name: keycloak/keycloak
resources:
    keycloak_attribute_importer_identity_provider_mapper:
        subCategory: ""
        name: keycloak_attribute_importer_identity_provider_mapper
        title: keycloak_attribute_importer_identity_provider_mapper Resource
        examples:
            - name: oidc
              manifest: |-
                {
                  "claim_name": "my-email-claim",
                  "extra_config": {
                    "syncMode": "INHERIT"
                  },
                  "identity_provider_alias": "${keycloak_oidc_identity_provider.oidc.alias}",
                  "name": "email-attribute-importer",
                  "realm": "${keycloak_realm.realm.id}",
                  "user_attribute": "email"
                }
              references:
                identity_provider_alias: keycloak_oidc_identity_provider.oidc.alias
                realm: keycloak_realm.realm.id
              dependencies:
                keycloak_oidc_identity_provider.oidc: |-
                    {
                      "alias": "oidc",
                      "authorization_url": "https://example.com/auth",
                      "client_id": "example_id",
                      "client_secret": "example_token",
                      "default_scopes": "openid random profile",
                      "realm": "${keycloak_realm.realm.id}",
                      "token_url": "https://example.com/token"
                    }
                keycloak_realm.realm: |-
                    {
                      "enabled": true,
                      "realm": "my-realm"
                    }
        argumentDocs:
            attribute_friendly_name: '- (Optional) For SAML based providers, this is the friendly name of the attribute to search for in the assertion. Conflicts with attribute_name.'
            attribute_name: '- (Optional) For SAML based providers, this is the name of the attribute to search for in the assertion. Conflicts with attribute_friendly_name.'
            claim_name: '- (Optional) For OIDC based providers, this is the name of the claim to use.'
            extra_config: '- (Optional) Key/value attributes to add to the identity provider mapper model that is persisted to Keycloak. This can be used to extend the base model with new Keycloak features.'
            identity_provider_alias: '- (Required) The alias of the associated identity provider.'
            name: '- (Required) The name of the mapper.'
            realm: '- (Required) The name of the realm.'
            user_attribute: '- (Required) The user attribute or property name to store the mapped result.'
        importStatements: []
    keycloak_attribute_to_role_identity_provider_mapper:
        subCategory: ""
        name: keycloak_attribute_to_role_identity_provider_mapper
        title: keycloak_attribute_to_role_identity_provider_mapper Resource
        examples:
            - name: oidc
              manifest: |-
                {
                  "claim_name": "my-claim",
                  "claim_value": "my-value",
                  "extra_config": {
                    "syncMode": "INHERIT"
                  },
                  "identity_provider_alias": "${keycloak_oidc_identity_provider.oidc.alias}",
                  "name": "role-attribute",
                  "realm": "${keycloak_realm.realm.id}",
                  "role": "my-realm-role"
                }
              references:
                identity_provider_alias: keycloak_oidc_identity_provider.oidc.alias
                realm: keycloak_realm.realm.id
              dependencies:
                keycloak_oidc_identity_provider.oidc: |-
                    {
                      "alias": "oidc",
                      "authorization_url": "https://example.com/auth",
                      "client_id": "example_id",
                      "client_secret": "example_token",
                      "default_scopes": "openid random profile",
                      "realm": "${keycloak_realm.realm.id}",
                      "token_url": "https://example.com/token"
                    }
                keycloak_realm.realm: |-
                    {
                      "enabled": true,
                      "realm": "my-realm"
                    }
                keycloak_role.realm_role: |-
                    {
                      "description": "My Realm Role",
                      "name": "my-realm-role",
                      "realm_id": "${keycloak_realm.realm.id}"
                    }
        argumentDocs:
            attribute_friendly_name: '- (Optional) Attribute Friendly Name. Conflicts with attribute_name.'
            attribute_name: '- (Optional) Attribute Name.'
            attribute_value: '- (Optional) Attribute Value.'
            claim_name: '- (Optional) OIDC Claim Name'
            claim_value: '- (Optional) OIDC Claim Value'
            extra_config: '- (Optional) Key/value attributes to add to the identity provider mapper model that is persisted to Keycloak. This can be used to extend the base model with new Keycloak features.'
            identity_provider_alias: '- (Required) The alias of the associated identity provider.'
            name: '- (Required) The name of the mapper.'
            realm: '- (Required) The name of the realm.'
            role: '- (Required) Role Name.'
        importStatements: []
    keycloak_authentication_bindings:
        subCategory: ""
        name: keycloak_authentication_bindings
        title: keycloak_authentication_bindings Resource
        examples:
            - name: browser_authentication_binding
              manifest: |-
                {
                  "browser_flow": "${keycloak_authentication_flow.flow.alias}",
                  "realm_id": "${keycloak_realm.realm.id}"
                }
              references:
                browser_flow: keycloak_authentication_flow.flow.alias
                realm_id: keycloak_realm.realm.id
              dependencies:
                keycloak_authentication_execution.execution_one: |-
                    {
                      "authenticator": "auth-cookie",
                      "parent_flow_alias": "${keycloak_authentication_flow.flow.alias}",
                      "realm_id": "${keycloak_realm.realm.id}",
                      "requirement": "ALTERNATIVE"
                    }
                keycloak_authentication_execution.execution_two: |-
                    {
                      "authenticator": "identity-provider-redirector",
                      "depends_on": [
                        "${keycloak_authentication_execution.execution_one}"
                      ],
                      "parent_flow_alias": "${keycloak_authentication_flow.flow.alias}",
                      "realm_id": "${keycloak_realm.realm.id}",
                      "requirement": "ALTERNATIVE"
                    }
                keycloak_authentication_flow.flow: |-
                    {
                      "alias": "my-flow-alias",
                      "realm_id": "${keycloak_realm.realm.id}"
                    }
                keycloak_realm.realm: |-
                    {
                      "enabled": true,
                      "realm": "my-realm"
                    }
        argumentDocs:
            browser_flow: '- (Optional) The alias of the flow to assign to the realm BrowserFlow.'
            client_authentication_flow: '- (Optional) The alias of the flow to assign to the realm ClientAuthenticationFlow.'
            direct_grant_flow: '- (Optional) The alias of the flow to assign to the realm DirectGrantFlow.'
            docker_authentication_flow: '- (Optional) The alias of the flow to assign to the realm DockerAuthenticationFlow.'
            realm_id: '- (Required) The realm the authentication flow binding exists in.'
            registration_flow: '- (Optional) The alias of the flow to assign to the realm RegistrationFlow.'
            reset_credentials_flow: '- (Optional) The alias of the flow to assign to the realm ResetCredentialsFlow.'
        importStatements: []
    keycloak_authentication_execution:
        subCategory: ""
        name: keycloak_authentication_execution
        title: keycloak_authentication_execution Resource
        examples:
            - name: execution_one
              manifest: |-
                {
                  "authenticator": "auth-cookie",
                  "parent_flow_alias": "${keycloak_authentication_flow.flow.alias}",
                  "realm_id": "${keycloak_realm.realm.id}",
                  "requirement": "ALTERNATIVE"
                }
              dependencies:
                keycloak_authentication_flow.flow: |-
                    {
                      "alias": "my-flow-alias",
                      "realm_id": "${keycloak_realm.realm.id}"
                    }
                keycloak_realm.realm: |-
                    {
                      "enabled": true,
                      "realm": "my-realm"
                    }
            - name: execution_two
              manifest: |-
                {
                  "authenticator": "identity-provider-redirector",
                  "depends_on": [
                    "${keycloak_authentication_execution.execution_one}"
                  ],
                  "parent_flow_alias": "${keycloak_authentication_flow.flow.alias}",
                  "realm_id": "${keycloak_realm.realm.id}",
                  "requirement": "ALTERNATIVE"
                }
              dependencies:
                keycloak_authentication_flow.flow: |-
                    {
                      "alias": "my-flow-alias",
                      "realm_id": "${keycloak_realm.realm.id}"
                    }
                keycloak_realm.realm: |-
                    {
                      "enabled": true,
                      "realm": "my-realm"
                    }
        argumentDocs:
            authenticator: '- (Required) The name of the authenticator. This can be found by experimenting with the GUI and looking at HTTP requests within the network tab of your browser''s development tools.'
            parent_flow_alias: '- (Required) The alias of the flow this execution is attached to.'
            realm_id: '- (Required) The realm the authentication execution exists in.'
            requirement: '- (Optional) The requirement setting, which can be one of REQUIRED, ALTERNATIVE, OPTIONAL, CONDITIONAL, or DISABLED. Defaults to DISABLED.'
        importStatements: []
    keycloak_authentication_execution_config:
        subCategory: ""
        name: keycloak_authentication_execution_config
        title: keycloak_authentication_execution_config Resource
        examples:
            - name: config
              manifest: |-
                {
                  "alias": "my-config-alias",
                  "config": {
                    "defaultProvider": "my-config-default-idp"
                  },
                  "execution_id": "${keycloak_authentication_execution.execution.id}",
                  "realm_id": "${keycloak_realm.realm.id}"
                }
              references:
                execution_id: keycloak_authentication_execution.execution.id
                realm_id: keycloak_realm.realm.id
              dependencies:
                keycloak_authentication_execution.execution: |-
                    {
                      "authenticator": "identity-provider-redirector",
                      "parent_flow_alias": "${keycloak_authentication_flow.flow.alias}",
                      "realm_id": "${keycloak_realm.realm.id}"
                    }
                keycloak_authentication_flow.flow: |-
                    {
                      "alias": "my-flow-alias",
                      "realm_id": "${keycloak_realm.realm.id}"
                    }
                keycloak_realm.realm: |-
                    {
                      "enabled": true,
                      "realm": "my-realm"
                    }
        argumentDocs:
            alias: '- (Required) The name of the configuration.'
            config: '- (Optional) The configuration. Keys are specific to each configurable authentication execution and not checked when applying.'
            execution_id: '- (Required) The authentication execution this configuration is attached to.'
            realm_id: '- (Required) The realm the authentication execution exists in.'
        importStatements: []
    keycloak_authentication_flow:
        subCategory: ""
        name: keycloak_authentication_flow
        title: keycloak_authentication_flow Resource
        examples:
            - name: flow
              manifest: |-
                {
                  "alias": "my-flow-alias",
                  "realm_id": "${keycloak_realm.realm.id}"
                }
              references:
                realm_id: keycloak_realm.realm.id
              dependencies:
                keycloak_authentication_execution.execution: |-
                    {
                      "authenticator": "identity-provider-redirector",
                      "parent_flow_alias": "${keycloak_authentication_flow.flow.alias}",
                      "realm_id": "${keycloak_realm.realm.id}",
                      "requirement": "REQUIRED"
                    }
                keycloak_realm.realm: |-
                    {
                      "enabled": true,
                      "realm": "my-realm"
                    }
        argumentDocs:
            alias: '- (Required) The alias for this authentication flow.'
            description: '- (Optional) A description for the authentication flow.'
            provider_id: '- (Optional) The type of authentication flow to create. Valid choices include basic-flow and client-flow. Defaults to basic-flow.'
            realm_id: '- (Required) The realm that the authentication flow exists in.'
        importStatements: []
    keycloak_authentication_subflow:
        subCategory: ""
        name: keycloak_authentication_subflow
        title: keycloak_authentication_subflow Resource
        examples:
            - name: subflow
              manifest: |-
                {
                  "alias": "my-subflow-alias",
                  "parent_flow_alias": "${keycloak_authentication_flow.flow.alias}",
                  "provider_id": "basic-flow",
                  "realm_id": "${keycloak_realm.realm.id}",
                  "requirement": "ALTERNATIVE"
                }
              references:
                parent_flow_alias: keycloak_authentication_flow.flow.alias
                realm_id: keycloak_realm.realm.id
              dependencies:
                keycloak_authentication_flow.flow: |-
                    {
                      "alias": "my-flow-alias",
                      "realm_id": "${keycloak_realm.realm.id}"
                    }
                keycloak_realm.realm: |-
                    {
                      "enabled": true,
                      "realm": "my-realm"
                    }
        argumentDocs:
            alias: '- (Required) The alias for this authentication subflow.'
            authenticator: |-
                - (Optional) The name of the authenticator. Might be needed to be set with certain custom subflows with specific
                authenticators. In general this will remain empty.
            description: '- (Optional) A description for the authentication subflow.'
            parent_flow_alias: '- (Required) The alias for the parent authentication flow.'
            provider_id: |-
                - (Optional) The type of authentication subflow to create. Valid choices include basic-flow, form-flow
                and client-flow. Defaults to basic-flow.
            realm_id: '- (Required) The realm that the authentication subflow exists in.'
            requirement: |-
                - (Optional) The requirement setting, which can be one of REQUIRED, ALTERNATIVE, OPTIONAL, CONDITIONAL,
                or DISABLED. Defaults to DISABLED.
        importStatements: []
    keycloak_custom_identity_provider_mapper:
        subCategory: ""
        name: keycloak_custom_identity_provider_mapper
        title: keycloak_custom_identity_provider_mapper Resource
        examples:
            - name: oidc
              manifest: |-
                {
                  "extra_config": {
                    "Claim": "my-email-claim",
                    "UserAttribute": "email",
                    "syncMode": "INHERIT"
                  },
                  "identity_provider_alias": "${keycloak_oidc_identity_provider.oidc.alias}",
                  "identity_provider_mapper": "%s-user-attribute-idp-mapper",
                  "name": "email-attribute-importer",
                  "realm": "${keycloak_realm.realm.id}"
                }
              references:
                identity_provider_alias: keycloak_oidc_identity_provider.oidc.alias
                realm: keycloak_realm.realm.id
              dependencies:
                keycloak_oidc_identity_provider.oidc: |-
                    {
                      "alias": "oidc",
                      "authorization_url": "https://example.com/auth",
                      "client_id": "example_id",
                      "client_secret": "example_token",
                      "default_scopes": "openid random profile",
                      "realm": "${keycloak_realm.realm.id}",
                      "token_url": "https://example.com/token"
                    }
                keycloak_realm.realm: |-
                    {
                      "enabled": true,
                      "realm": "my-realm"
                    }
        argumentDocs:
            extra_config: '- (Optional) Key/value attributes to add to the identity provider mapper model that is persisted to Keycloak. This can be used to extend the base model with new Keycloak features.'
            identity_provider_alias: '- (Required) The alias of the associated identity provider.'
            identity_provider_mapper: '- (Required) The type of the identity provider mapper. This can be a format string that includes a %s - this will be replaced by the provider id.'
            name: '- (Required) The name of the mapper.'
            realm: '- (Required) The name of the realm.'
        importStatements: []
    keycloak_custom_user_federation:
        subCategory: ""
        name: keycloak_custom_user_federation
        title: keycloak_custom_user_federation Resource
        examples:
            - name: custom_user_federation
              manifest: |-
                {
                  "config": {
                    "dummyBool": true,
                    "dummyString": "foobar",
                    "multivalue": "value1##value2"
                  },
                  "enabled": true,
                  "name": "custom",
                  "provider_id": "custom",
                  "realm_id": "${keycloak_realm.realm.id}"
                }
              references:
                realm_id: keycloak_realm.realm.id
              dependencies:
                keycloak_realm.realm: |-
                    {
                      "enabled": true,
                      "realm": "test"
                    }
        argumentDocs:
            cache_policy: '- (Optional) Can be one of DEFAULT, EVICT_DAILY, EVICT_WEEKLY, MAX_LIFESPAN, or NO_CACHE. Defaults to DEFAULT.'
            changed_sync_period: '- (Optional) How frequently Keycloak should sync changed users, in seconds. Omit this property to disable periodic changed users sync.'
            config: '- (Optional) The provider configuration handed over to your custom user federation provider. In order to add multivalue settings, use ## to seperate the values.'
            enabled: '- (Optional) When false, this provider will not be used when performing queries for users. Defaults to true.'
            full_sync_period: '- (Optional) How frequently Keycloak should sync all users, in seconds. Omit this property to disable periodic full sync.'
            name: '- (Required) Display name of the provider when displayed in the console.'
            parent_id: '- (Optional) Must be set to the realms'' internal_id  when it differs from the realm. This can happen when existing resources are imported into the state.'
            priority: '- (Optional) Priority of this provider when looking up users. Lower values are first. Defaults to 0.'
            provider_id: '- (Required) The unique ID of the custom provider, specified in the getId implementation for the UserStorageProviderFactory interface.'
            realm_id: '- (Required) The realm that this provider will provide user federation for.'
        importStatements: []
    keycloak_default_groups:
        subCategory: ""
        name: keycloak_default_groups
        title: keycloak_default_groups Resource
        examples:
            - name: default
              manifest: |-
                {
                  "group_ids": [
                    "${keycloak_group.group.id}"
                  ],
                  "realm_id": "${keycloak_realm.realm.id}"
                }
              references:
                realm_id: keycloak_realm.realm.id
              dependencies:
                keycloak_group.group: |-
                    {
                      "name": "my-group",
                      "realm_id": "${keycloak_realm.realm.id}"
                    }
                keycloak_realm.realm: |-
                    {
                      "enabled": true,
                      "realm": "my-realm"
                    }
        argumentDocs:
            group_ids: '- (Required) A set of group ids that should be default groups on the realm referenced by realm_id.'
            realm_id: '- (Required) The realm this group exists in.'
        importStatements: []
    keycloak_default_roles:
        subCategory: ""
        name: keycloak_default_roles
        title: keycloak_default_roles Resource
        examples:
            - name: default_roles
              manifest: |-
                {
                  "default_roles": [
                    "uma_authorization"
                  ],
                  "realm_id": "${keycloak_realm.realm.id}"
                }
              references:
                realm_id: keycloak_realm.realm.id
              dependencies:
                keycloak_realm.realm: |-
                    {
                      "enabled": true,
                      "realm": "my-realm"
                    }
        argumentDocs:
            default_roles: '- (Required) Realm level roles assigned to new users by default.'
            realm_id: '- (Required) The realm this role exists within.'
        importStatements: []
    keycloak_generic_client_protocol_mapper:
        subCategory: ""
        name: keycloak_generic_client_protocol_mapper
        title: keycloak_generic_client_protocol_mapper Resource
        examples:
            - name: saml_hardcode_attribute_mapper
              manifest: |-
                {
                  "client_id": "${keycloak_saml_client.saml_client.id}",
                  "config": {
                    "attribute.name": "name",
                    "attribute.nameformat": "Basic",
                    "attribute.value": "value",
                    "friendly.name": "display name"
                  },
                  "name": "test-mapper",
                  "protocol": "saml",
                  "protocol_mapper": "saml-hardcode-attribute-mapper",
                  "realm_id": "${keycloak_realm.realm.id}"
                }
              references:
                client_id: keycloak_saml_client.saml_client.id
                realm_id: keycloak_realm.realm.id
              dependencies:
                keycloak_realm.realm: |-
                    {
                      "enabled": true,
                      "realm": "my-realm"
                    }
                keycloak_saml_client.saml_client: |-
                    {
                      "client_id": "test-client",
                      "realm_id": "${keycloak_realm.realm.id}"
                    }
        argumentDocs:
            client_id: '- (Required) The client this protocol mapper is attached to.'
            config: '- (Required) A map with key / value pairs for configuring the protocol mapper. The supported keys depends on the protocol mapper.'
            name: '- (Required) The display name of this protocol mapper in the GUI.'
            protocol: '- (Required) The type of client (either openid-connect or saml). The type must match the type of the client.'
            protocol_mapper: '- (Required) The name of the protocol mapper. The protocol mapper must be compatible with the specified client.'
            realm_id: '- (Required) The realm this protocol mapper exists within.'
        importStatements: []
    keycloak_generic_client_role_mapper:
        subCategory: ""
        name: keycloak_generic_client_role_mapper
        title: keycloak_generic_client_role_mapper Resource
        examples:
            - name: client_role_mapper
              manifest: |-
                {
                  "client_id": "${keycloak_openid_client.client.id}",
                  "realm_id": "${keycloak_realm.realm.id}",
                  "role_id": "${keycloak_role.realm_role.id}"
                }
              references:
                client_id: keycloak_openid_client.client.id
                realm_id: keycloak_realm.realm.id
                role_id: keycloak_role.realm_role.id
              dependencies:
                keycloak_openid_client.client: |-
                    {
                      "access_type": "BEARER-ONLY",
                      "client_id": "client",
                      "enabled": true,
                      "name": "client",
                      "realm_id": "${keycloak_realm.realm.id}"
                    }
                keycloak_realm.realm: |-
                    {
                      "enabled": true,
                      "realm": "my-realm"
                    }
                keycloak_role.realm_role: |-
                    {
                      "description": "My Realm Role",
                      "name": "my-realm-role",
                      "realm_id": "${keycloak_realm.realm.id}"
                    }
            - name: client_b_role_mapper
              manifest: |-
                {
                  "client_id": "${keycloak_openid_client.client_b.id}",
                  "realm_id": "${keycloak_realm.realm.id}",
                  "role_id": "${keycloak_role.client_role_a.id}"
                }
              references:
                client_id: keycloak_openid_client.client_b.id
                realm_id: keycloak_realm.realm.id
                role_id: keycloak_role.client_role_a.id
              dependencies:
                keycloak_openid_client.client_a: |-
                    {
                      "access_type": "BEARER-ONLY",
                      "client_id": "client-a",
                      "enabled": true,
                      "full_scope_allowed": false,
                      "name": "client-a",
                      "realm_id": "${keycloak_realm.realm.id}"
                    }
                keycloak_openid_client.client_b: |-
                    {
                      "access_type": "BEARER-ONLY",
                      "client_id": "client-b",
                      "enabled": true,
                      "name": "client-b",
                      "realm_id": "${keycloak_realm.realm.id}"
                    }
                keycloak_realm.realm: |-
                    {
                      "enabled": true,
                      "realm": "my-realm"
                    }
                keycloak_role.client_role_a: |-
                    {
                      "client_id": "${keycloak_openid_client.client_a.id}",
                      "description": "My Client Role",
                      "name": "my-client-role",
                      "realm_id": "${keycloak_realm.realm.id}"
                    }
                keycloak_role.client_role_b: |-
                    {
                      "client_id": "${keycloak_openid_client.client_b.id}",
                      "description": "My Client Role",
                      "name": "my-client-role",
                      "realm_id": "${keycloak_realm.realm.id}"
                    }
            - name: client_role_mapper
              manifest: |-
                {
                  "client_scope_id": "${keycloak_openid_client_scope.client_scope.id}",
                  "realm_id": "${keycloak_realm.realm.id}",
                  "role_id": "${keycloak_role.realm_role.id}"
                }
              references:
                client_scope_id: keycloak_openid_client_scope.client_scope.id
                realm_id: keycloak_realm.realm.id
                role_id: keycloak_role.realm_role.id
              dependencies:
                keycloak_openid_client_scope.client_scope: |-
                    {
                      "name": "my-client-scope",
                      "realm_id": "${keycloak_realm.realm.id}"
                    }
                keycloak_realm.realm: |-
                    {
                      "enabled": true,
                      "realm": "my-realm"
                    }
                keycloak_role.realm_role: |-
                    {
                      "description": "My Realm Role",
                      "name": "my-realm-role",
                      "realm_id": "${keycloak_realm.realm.id}"
                    }
            - name: client_b_role_mapper
              manifest: |-
                {
                  "client_scope_id": "${keycloak_openid_client_scope.client_scope.id}",
                  "realm_id": "${keycloak_realm.realm.id}",
                  "role_id": "${keycloak_role.client_role.id}"
                }
              references:
                client_scope_id: keycloak_openid_client_scope.client_scope.id
                realm_id: keycloak_realm.realm.id
                role_id: keycloak_role.client_role.id
              dependencies:
                keycloak_openid_client.client: |-
                    {
                      "access_type": "BEARER-ONLY",
                      "client_id": "client",
                      "enabled": true,
                      "name": "client",
                      "realm_id": "${keycloak_realm.realm.id}"
                    }
                keycloak_openid_client_scope.client_scope: |-
                    {
                      "name": "my-client-scope",
                      "realm_id": "${keycloak_realm.realm.id}"
                    }
                keycloak_realm.realm: |-
                    {
                      "enabled": true,
                      "realm": "my-realm"
                    }
                keycloak_role.client_role: |-
                    {
                      "client_id": "${keycloak_openid_client.client.id}",
                      "description": "My Client Role",
                      "name": "my-client-role",
                      "realm_id": "${keycloak_realm.realm.id}"
                    }
        argumentDocs:
            client_id: '- (Optional) The ID of the client this role mapper should be added to. Conflicts with client_scope_id. This argument is required if client_scope_id is not set.'
            client_scope_id: '- (Optional) The ID of the client scope this role mapper should be added to. Conflicts with client_id. This argument is required if client_id is not set.'
            realm_id: '- (Required) The realm this role mapper exists within.'
            role_id: '- (Required) The ID of the role to be added to this role mapper.'
        importStatements: []
    keycloak_generic_protocol_mapper:
        subCategory: ""
        name: keycloak_generic_protocol_mapper
        title: keycloak_generic_protocol_mapper Resource
        examples:
            - name: saml_hardcode_attribute_mapper
              manifest: |-
                {
                  "client_id": "${keycloak_saml_client.saml_client.id}",
                  "config": {
                    "attribute.name": "name",
                    "attribute.nameformat": "Basic",
                    "attribute.value": "value",
                    "friendly.name": "display name"
                  },
                  "name": "test-mapper",
                  "protocol": "saml",
                  "protocol_mapper": "saml-hardcode-attribute-mapper",
                  "realm_id": "${keycloak_realm.realm.id}"
                }
              references:
                client_id: keycloak_saml_client.saml_client.id
                realm_id: keycloak_realm.realm.id
              dependencies:
                keycloak_realm.realm: |-
                    {
                      "enabled": true,
                      "realm": "my-realm"
                    }
                keycloak_saml_client.saml_client: |-
                    {
                      "client_id": "test-client",
                      "realm_id": "${keycloak_realm.realm.id}"
                    }
        argumentDocs:
            client_id: '- (Optional) The ID of the client this protocol mapper should be added to. Conflicts with client_scope_id. This argument is required if client_scope_id is not set.'
            client_scope_id: '- (Optional) The ID of the client scope this protocol mapper should be added to. Conflicts with client_id. This argument is required if client_id is not set.'
            config: '- (Required) A map with key / value pairs for configuring the protocol mapper. The supported keys depends on the protocol mapper.'
            name: '- (Required) The display name of this protocol mapper in the GUI.'
            protocol: '- (Required) The type of client (either openid-connect or saml). The type must match the type of the client.'
            protocol_mapper: '- (Required) The name of the protocol mapper. The protocol mapper must be compatible with the specified client.'
            realm_id: '- (Required) The realm this protocol mapper exists within.'
        importStatements: []
    keycloak_generic_role_mapper:
        subCategory: ""
        name: keycloak_generic_role_mapper
        title: keycloak_generic_role_mapper Resource
        examples:
            - name: client_role_mapper
              manifest: |-
                {
                  "client_id": "${keycloak_openid_client.client.id}",
                  "realm_id": "${keycloak_realm.realm.id}",
                  "role_id": "${keycloak_role.realm_role.id}"
                }
              references:
                client_id: keycloak_openid_client.client.id
                realm_id: keycloak_realm.realm.id
                role_id: keycloak_role.realm_role.id
              dependencies:
                keycloak_openid_client.client: |-
                    {
                      "access_type": "BEARER-ONLY",
                      "client_id": "client",
                      "enabled": true,
                      "name": "client",
                      "realm_id": "${keycloak_realm.realm.id}"
                    }
                keycloak_realm.realm: |-
                    {
                      "enabled": true,
                      "realm": "my-realm"
                    }
                keycloak_role.realm_role: |-
                    {
                      "description": "My Realm Role",
                      "name": "my-realm-role",
                      "realm_id": "${keycloak_realm.realm.id}"
                    }
            - name: client_b_role_mapper
              manifest: |-
                {
                  "client_id": "${keycloak_openid_client.client_b.id}",
                  "realm_id": "${keycloak_realm.realm.id}",
                  "role_id": "${keycloak_role.client_role_a.id}"
                }
              references:
                client_id: keycloak_openid_client.client_b.id
                realm_id: keycloak_realm.realm.id
                role_id: keycloak_role.client_role_a.id
              dependencies:
                keycloak_openid_client.client_a: |-
                    {
                      "access_type": "BEARER-ONLY",
                      "client_id": "client-a",
                      "enabled": true,
                      "full_scope_allowed": false,
                      "name": "client-a",
                      "realm_id": "${keycloak_realm.realm.id}"
                    }
                keycloak_openid_client.client_b: |-
                    {
                      "access_type": "BEARER-ONLY",
                      "client_id": "client-b",
                      "enabled": true,
                      "name": "client-b",
                      "realm_id": "${keycloak_realm.realm.id}"
                    }
                keycloak_realm.realm: |-
                    {
                      "enabled": true,
                      "realm": "my-realm"
                    }
                keycloak_role.client_role_a: |-
                    {
                      "client_id": "${keycloak_openid_client.client_a.id}",
                      "description": "My Client Role",
                      "name": "my-client-role",
                      "realm_id": "${keycloak_realm.realm.id}"
                    }
                keycloak_role.client_role_b: |-
                    {
                      "client_id": "${keycloak_openid_client.client_b.id}",
                      "description": "My Client Role",
                      "name": "my-client-role",
                      "realm_id": "${keycloak_realm.realm.id}"
                    }
            - name: client_role_mapper
              manifest: |-
                {
                  "client_scope_id": "${keycloak_openid_client_scope.client_scope.id}",
                  "realm_id": "${keycloak_realm.realm.id}",
                  "role_id": "${keycloak_role.realm_role.id}"
                }
              references:
                client_scope_id: keycloak_openid_client_scope.client_scope.id
                realm_id: keycloak_realm.realm.id
                role_id: keycloak_role.realm_role.id
              dependencies:
                keycloak_openid_client_scope.client_scope: |-
                    {
                      "name": "my-client-scope",
                      "realm_id": "${keycloak_realm.realm.id}"
                    }
                keycloak_realm.realm: |-
                    {
                      "enabled": true,
                      "realm": "my-realm"
                    }
                keycloak_role.realm_role: |-
                    {
                      "description": "My Realm Role",
                      "name": "my-realm-role",
                      "realm_id": "${keycloak_realm.realm.id}"
                    }
            - name: client_b_role_mapper
              manifest: |-
                {
                  "client_scope_id": "${keycloak_openid_client_scope.client_scope.id}",
                  "realm_id": "${keycloak_realm.realm.id}",
                  "role_id": "${keycloak_role.client_role.id}"
                }
              references:
                client_scope_id: keycloak_openid_client_scope.client_scope.id
                realm_id: keycloak_realm.realm.id
                role_id: keycloak_role.client_role.id
              dependencies:
                keycloak_openid_client.client: |-
                    {
                      "access_type": "BEARER-ONLY",
                      "client_id": "client",
                      "enabled": true,
                      "name": "client",
                      "realm_id": "${keycloak_realm.realm.id}"
                    }
                keycloak_openid_client_scope.client_scope: |-
                    {
                      "name": "my-client-scope",
                      "realm_id": "${keycloak_realm.realm.id}"
                    }
                keycloak_realm.realm: |-
                    {
                      "enabled": true,
                      "realm": "my-realm"
                    }
                keycloak_role.client_role: |-
                    {
                      "client_id": "${keycloak_openid_client.client.id}",
                      "description": "My Client Role",
                      "name": "my-client-role",
                      "realm_id": "${keycloak_realm.realm.id}"
                    }
        argumentDocs:
            client_id: '- (Optional) The ID of the client this role mapper should be added to. Conflicts with client_scope_id. This argument is required if client_scope_id is not set.'
            client_scope_id: '- (Optional) The ID of the client scope this role mapper should be added to. Conflicts with client_id. This argument is required if client_id is not set.'
            realm_id: '- (Required) The realm this role mapper exists within.'
            role_id: '- (Required) The ID of the role to be added to this role mapper.'
        importStatements: []
    keycloak_group:
        subCategory: ""
        name: keycloak_group
        title: keycloak_group Resource
        examples:
            - name: parent_group
              manifest: |-
                {
                  "name": "parent-group",
                  "realm_id": "${keycloak_realm.realm.id}"
                }
              references:
                realm_id: keycloak_realm.realm.id
              dependencies:
                keycloak_realm.realm: |-
                    {
                      "enabled": true,
                      "realm": "my-realm"
                    }
            - name: child_group
              manifest: |-
                {
                  "name": "child-group",
                  "parent_id": "${keycloak_group.parent_group.id}",
                  "realm_id": "${keycloak_realm.realm.id}"
                }
              references:
                parent_id: keycloak_group.parent_group.id
                realm_id: keycloak_realm.realm.id
              dependencies:
                keycloak_realm.realm: |-
                    {
                      "enabled": true,
                      "realm": "my-realm"
                    }
            - name: child_group_with_optional_attributes
              manifest: |-
                {
                  "attributes": {
                    "foo": "bar",
                    "multivalue": "value1##value2"
                  },
                  "name": "child-group-with-optional-attributes",
                  "parent_id": "${keycloak_group.parent_group.id}",
                  "realm_id": "${keycloak_realm.realm.id}"
                }
              references:
                parent_id: keycloak_group.parent_group.id
                realm_id: keycloak_realm.realm.id
              dependencies:
                keycloak_realm.realm: |-
                    {
                      "enabled": true,
                      "realm": "my-realm"
                    }
        argumentDocs:
            attributes: '- (Optional) A map representing attributes for the group. In order to add multivalue attributes, use ## to seperate the values. Max length for each value is 255 chars'
            name: '- (Required) The name of the group.'
            parent_id: '- (Optional) The ID of this group''s parent. If omitted, this group will be defined at the root level.'
            path: '- (Computed) The complete path of the group. For example, the child group''s path in the example configuration would be /parent-group/child-group.'
            realm_id: '- (Required) The realm this group exists in.'
        importStatements: []
    keycloak_group_memberships:
        subCategory: ""
        name: keycloak_group_memberships
        title: keycloak_group_memberships Resource
        examples:
            - name: group_members
              manifest: |-
                {
                  "group_id": "${keycloak_group.group.id}",
                  "members": [
                    "${keycloak_user.user.username}"
                  ],
                  "realm_id": "${keycloak_realm.realm.id}"
                }
              references:
                group_id: keycloak_group.group.id
                realm_id: keycloak_realm.realm.id
              dependencies:
                keycloak_group.group: |-
                    {
                      "name": "my-group",
                      "realm_id": "${keycloak_realm.realm.id}"
                    }
                keycloak_realm.realm: |-
                    {
                      "enabled": true,
                      "realm": "my-realm"
                    }
                keycloak_user.user: |-
                    {
                      "realm_id": "${keycloak_realm.realm.id}",
                      "username": "my-user"
                    }
        argumentDocs:
            group_id: '- (Required) The ID of the group this resource should manage memberships for.'
            members: '- (Required) A list of usernames that belong to this group.'
            realm_id: '- (Required) The realm this group exists in.'
        importStatements: []
    keycloak_group_permissions:
        subCategory: ""
        name: keycloak_group_permissions
        title: keycloak_group_permissions Resource
        examples:
            - name: test
              manifest: |-
                {
                  "group_id": "${keycloak_group.group.id}",
                  "manage_members_scope": [
                    {
                      "decision_strategy": "UNANIMOUS",
                      "description": "mangage_members_scope",
                      "policies": [
                        "${keycloak_openid_client_group_policy.test.id}"
                      ]
                    }
                  ],
                  "realm_id": "${keycloak_realm.realm.id}"
                }
              references:
                group_id: keycloak_group.group.id
                realm_id: keycloak_realm.realm.id
              dependencies:
                keycloak_group.group: |-
                    {
                      "name": "%s",
                      "realm_id": "${keycloak_realm.realm.id}"
                    }
                keycloak_openid_client_group_policy.test: |-
                    {
                      "decision_strategy": "UNANIMOUS",
                      "depends_on": [
                        "${keycloak_openid_client_permissions.realm-management_permission}"
                      ],
                      "groups": [
                        {
                          "extend_children": false,
                          "id": "${keycloak_group.group.id}",
                          "path": "${keycloak_group.group.path}"
                        }
                      ],
                      "logic": "POSITIVE",
                      "name": "client_group_policy_test",
                      "realm_id": "${keycloak_realm.realm.id}",
                      "resource_server_id": "${data.keycloak_openid_client.realm_management.id}"
                    }
                keycloak_openid_client_permissions.realm-management_permission: |-
                    {
                      "client_id": "${data.keycloak_openid_client.realm_management.id}",
                      "realm_id": "${keycloak_realm.realm.id}"
                    }
                keycloak_realm.realm: |-
                    {
                      "realm": "my_realm"
                    }
        argumentDocs:
            authorization_resource_server_id: '- Resource server id representing the realm management client on which these permissions are managed.'
            decision_strategy: '- (Optional) Decision strategy of the permission.'
            description: '- (Optional) Description of the permission.'
            enabled: '- When true, this indicates that fine-grained role permissions are enabled. This will always be true.'
            group_id: '- (Required) The id of the group.'
            manage_members_scope: '- (Optional) Policies that decide if the admin can manage the users that belong to this group.'
            manage_membership_scope: '- (Optional) Policies that decide if an admin can change the membership of the group. Add or remove members from the group.'
            manage_scope: '- (Optional) Policies that decide if the admin can manage the configuration of the group.'
            policies: '- (Optional) Assigned policies to the permission. Each element within this list should be a policy ID.'
            realm_id: '- (Required) The realm in which to manage fine-grained role permissions.'
            view_members_scope: '- (Optional) Policies that decide if the admin can view the user details of members of the group.'
            view_scope: '- (Optional) Policies that decide if the admin can view information about the group.'
        importStatements: []
    keycloak_group_roles:
        subCategory: ""
        name: keycloak_group_roles
        title: keycloak_group_roles Resource
        examples:
            - name: group_roles
              manifest: |-
                {
                  "group_id": "${keycloak_group.group.id}",
                  "realm_id": "${keycloak_realm.realm.id}",
                  "role_ids": [
                    "${keycloak_role.realm_role.id}",
                    "${keycloak_role.client_role.id}"
                  ]
                }
              references:
                group_id: keycloak_group.group.id
                realm_id: keycloak_realm.realm.id
              dependencies:
                keycloak_group.group: |-
                    {
                      "name": "my-group",
                      "realm_id": "${keycloak_realm.realm.id}"
                    }
                keycloak_openid_client.client: |-
                    {
                      "access_type": "BEARER-ONLY",
                      "client_id": "client",
                      "enabled": true,
                      "name": "client",
                      "realm_id": "${keycloak_realm.realm.id}"
                    }
                keycloak_realm.realm: |-
                    {
                      "enabled": true,
                      "realm": "my-realm"
                    }
                keycloak_role.client_role: |-
                    {
                      "client_id": "${keycloak_client.client.id}",
                      "description": "My Client Role",
                      "name": "my-client-role",
                      "realm_id": "${keycloak_realm.realm.id}"
                    }
                keycloak_role.realm_role: |-
                    {
                      "description": "My Realm Role",
                      "name": "my-realm-role",
                      "realm_id": "${keycloak_realm.realm.id}"
                    }
            - name: group_role_association1
              manifest: |-
                {
                  "exhaustive": false,
                  "group_id": "${keycloak_group.group.id}",
                  "realm_id": "${keycloak_realm.realm.id}",
                  "role_ids": [
                    "${keycloak_role.realm_role.id}"
                  ]
                }
              references:
                group_id: keycloak_group.group.id
                realm_id: keycloak_realm.realm.id
              dependencies:
                keycloak_group.group: |-
                    {
                      "name": "my-group",
                      "realm_id": "${keycloak_realm.realm.id}"
                    }
                keycloak_openid_client.client: |-
                    {
                      "access_type": "BEARER-ONLY",
                      "client_id": "client",
                      "enabled": true,
                      "name": "client",
                      "realm_id": "${keycloak_realm.realm.id}"
                    }
                keycloak_realm.realm: |-
                    {
                      "enabled": true,
                      "realm": "my-realm"
                    }
                keycloak_role.client_role: |-
                    {
                      "client_id": "${keycloak_client.client.id}",
                      "description": "My Client Role",
                      "name": "my-client-role",
                      "realm_id": "${keycloak_realm.realm.id}"
                    }
                keycloak_role.realm_role: |-
                    {
                      "description": "My Realm Role",
                      "name": "my-realm-role",
                      "realm_id": "${keycloak_realm.realm.id}"
                    }
            - name: group_role_association2
              manifest: |-
                {
                  "exhaustive": false,
                  "group_id": "${keycloak_group.group.id}",
                  "realm_id": "${keycloak_realm.realm.id}",
                  "role_ids": [
                    "${keycloak_role.client_role.id}"
                  ]
                }
              references:
                group_id: keycloak_group.group.id
                realm_id: keycloak_realm.realm.id
              dependencies:
                keycloak_group.group: |-
                    {
                      "name": "my-group",
                      "realm_id": "${keycloak_realm.realm.id}"
                    }
                keycloak_openid_client.client: |-
                    {
                      "access_type": "BEARER-ONLY",
                      "client_id": "client",
                      "enabled": true,
                      "name": "client",
                      "realm_id": "${keycloak_realm.realm.id}"
                    }
                keycloak_realm.realm: |-
                    {
                      "enabled": true,
                      "realm": "my-realm"
                    }
                keycloak_role.client_role: |-
                    {
                      "client_id": "${keycloak_client.client.id}",
                      "description": "My Client Role",
                      "name": "my-client-role",
                      "realm_id": "${keycloak_realm.realm.id}"
                    }
                keycloak_role.realm_role: |-
                    {
                      "description": "My Realm Role",
                      "name": "my-realm-role",
                      "realm_id": "${keycloak_realm.realm.id}"
                    }
        argumentDocs:
            exhaustive: '- (Optional) Indicates if the list of roles is exhaustive. In this case, roles that are manually added to the group will be removed. Defaults to true.'
            group_id: '- (Required) The ID of the group this resource should manage roles for.'
            realm_id: '- (Required) The realm this group exists in.'
            role_ids: '- (Required) A list of role IDs to map to the group.'
        importStatements: []
    keycloak_hardcoded_attribute_identity_provider_mapper:
        subCategory: ""
        name: keycloak_hardcoded_attribute_identity_provider_mapper
        title: keycloak_hardcoded_attribute_identity_provider_mapper Resource
        examples:
            - name: oidc
              manifest: |-
                {
                  "attribute_name": "attribute",
                  "attribute_value": "value",
                  "extra_config": {
                    "syncMode": "INHERIT"
                  },
                  "identity_provider_alias": "${keycloak_oidc_identity_provider.oidc.alias}",
                  "name": "hardcodedUserSessionAttribute",
                  "realm": "${keycloak_realm.realm.id}",
                  "user_session": true
                }
              references:
                identity_provider_alias: keycloak_oidc_identity_provider.oidc.alias
                realm: keycloak_realm.realm.id
              dependencies:
                keycloak_oidc_identity_provider.oidc: |-
                    {
                      "alias": "my-idp",
                      "authorization_url": "https://authorizationurl.com",
                      "client_id": "clientID",
                      "client_secret": "clientSecret",
                      "realm": "${keycloak_realm.realm.id}",
                      "token_url": "https://tokenurl.com"
                    }
                keycloak_realm.realm: |-
                    {
                      "enabled": true,
                      "realm": "my-realm"
                    }
        argumentDocs:
            attribute_name: '- (Required) The name of the IDP attribute to set.'
            attribute_value: '- (Optional) The value to set to the attribute. You can hardcode any value like ''foo''.'
            extra_config: '- (Optional) A map of key/value pairs to add extra configuration attributes to this mapper. This can be used for custom attributes, or to add configuration attributes that are not yet supported by this Terraform provider. Use this attribute at your own risk, as it may conflict with top-level configuration attributes in future provider updates.'
            identity_provider_alias: '- (Required) The IDP alias of the attribute to set.'
            name: '- (Required) Display name of this mapper when displayed in the console.'
            realm: '- (Required) The realm ID that this mapper will exist in.'
            user_session: '- (Required) Is Attribute related to a User Session.'
        importStatements: []
    keycloak_hardcoded_role_identity_provider_mapper:
        subCategory: ""
        name: keycloak_hardcoded_role_identity_provider_mapper
        title: keycloak_hardcoded_role_identity_provider_mapper Resource
        examples:
            - name: oidc
              manifest: |-
                {
                  "extra_config": {
                    "syncMode": "INHERIT"
                  },
                  "identity_provider_alias": "${keycloak_oidc_identity_provider.oidc.alias}",
                  "name": "hardcodedRole",
                  "realm": "${keycloak_realm.realm.id}",
                  "role": "my-realm-role"
                }
              references:
                identity_provider_alias: keycloak_oidc_identity_provider.oidc.alias
                realm: keycloak_realm.realm.id
              dependencies:
                keycloak_oidc_identity_provider.oidc: |-
                    {
                      "alias": "my-idp",
                      "authorization_url": "https://authorizationurl.com",
                      "client_id": "clientID",
                      "client_secret": "clientSecret",
                      "realm": "${keycloak_realm.realm.id}",
                      "token_url": "https://tokenurl.com"
                    }
                keycloak_realm.realm: |-
                    {
                      "enabled": true,
                      "realm": "my-realm"
                    }
                keycloak_role.realm_role: |-
                    {
                      "description": "My Realm Role",
                      "name": "my-realm-role",
                      "realm_id": "${keycloak_realm.realm.id}"
                    }
        argumentDocs:
            extra_config: '- (Optional) A map of key/value pairs to add extra configuration attributes to this mapper. This can be used for custom attributes, or to add configuration attributes that are not yet supported by this Terraform provider. Use this attribute at your own risk, as it may conflict with top-level configuration attributes in future provider updates.'
            identity_provider_alias: '- (Required) The IDP alias of the attribute to set.'
            name: '- (Required) Display name of this mapper when displayed in the console.'
            realm: '- (Required) The realm ID that this mapper will exist in.'
            role: '- (Optional) The name of the role which should be assigned to the users.'
        importStatements: []
    keycloak_identity_provider_token_exchange_scope_permission:
        subCategory: ""
        name: keycloak_identity_provider_token_exchange_scope_permission
        title: keycloak_identity_provider_token_exchange_scope_permission Resource
        examples:
            - name: oidc_idp_permission
              manifest: |-
                {
                  "clients": [
                    "${keycloak_openid_client.token-exchange_webapp_client.id}"
                  ],
                  "policy_type": "client",
                  "provider_alias": "${keycloak_oidc_identity_provider.token_exchange_my_oidc_idp.alias}",
                  "realm_id": "${keycloak_realm.token_exchange_realm.id}"
                }
              references:
                provider_alias: keycloak_oidc_identity_provider.token_exchange_my_oidc_idp.alias
                realm_id: keycloak_realm.token_exchange_realm.id
              dependencies:
                keycloak_oidc_identity_provider.token_exchange_my_oidc_idp: |-
                    {
                      "alias": "myIdp",
                      "authorization_url": "http://localhost:8080/auth/realms/someRealm/protocol/openid-connect/auth",
                      "client_id": "clientId",
                      "client_secret": "secret",
                      "default_scopes": "openid",
                      "realm": "${keycloak_realm.token_exchange_realm.id}",
                      "token_url": "http://localhost:8080/auth/realms/someRealm/protocol/openid-connect/token"
                    }
                keycloak_openid_client.token-exchange_webapp_client: |-
                    {
                      "access_type": "CONFIDENTIAL",
                      "client_id": "webapp_client",
                      "client_secret": "secret",
                      "description": "a webapp client on the destination realm",
                      "name": "webapp_client",
                      "realm_id": "${keycloak_realm.token_exchange_realm.id}",
                      "standard_flow_enabled": true,
                      "valid_redirect_uris": [
                        "http://localhost:8080/*"
                      ]
                    }
                keycloak_realm.token_exchange_realm: |-
                    {
                      "enabled": true,
                      "realm": "token-exchange_destination_realm"
                    }
        argumentDocs:
            authorization_idp_resource_id: '- (Computed) Resource ID representing the identity provider, this automatically created by keycloak.'
            authorization_resource_server_id: '- (Computed) Resource server ID representing the realm management client on which this permission is managed.'
            authorization_token_exchange_scope_permission_id: '- (Computed) Permission ID representing the Permission with scope ''Token Exchange'' and the resource ''authorization_idp_resource_id'', this automatically created by keycloak, the policy ID will be set on this permission.'
            clients: '- (Required) A list of IDs of the clients for which a policy will be created and set on scope based token exchange permission.'
            policy_id: '- (Computed) Policy ID that will be set on the scope based token exchange permission automatically created by enabling permissions on the reference identity provider.'
            policy_type: '- (Optional) Defaults to "client" This is also the only value policy type supported by this provider.'
            provider_alias: '- (Required) Alias of the identity provider.'
            realm_id: '- (Required) The realm that the identity provider exists in.'
        importStatements: []
    keycloak_ldap_custom_mapper:
        subCategory: ""
        name: keycloak_ldap_custom_mapper
        title: keycloak_ldap_custom_mapper Resource
        examples:
            - name: custom_mapper
              manifest: |-
                {
                  "config": {
                    "attribute.name": "name",
                    "attribute.value": "value"
                  },
                  "ldap_user_federation_id": "${keycloak_ldap_user_federation.openldap.id}",
                  "name": "custom-mapper",
                  "provider_id": "custom-provider-registered-in-keycloak",
                  "provider_type": "com.example.custom.ldap.mappers.CustomMapper",
                  "realm_id": "${keycloak_ldap_user_federation.openldap.realm_id}"
                }
              references:
                ldap_user_federation_id: keycloak_ldap_user_federation.openldap.id
                realm_id: keycloak_ldap_user_federation.openldap.realm_id
              dependencies:
                keycloak_ldap_user_federation.ldap_user_federation: |-
                    {
                      "bind_credential": "admin",
                      "bind_dn": "cn=admin,dc=example,dc=org",
                      "connection_url": "ldap://openldap",
                      "name": "openldap",
                      "rdn_ldap_attribute": "cn",
                      "realm_id": "${keycloak_realm.realm.id}",
                      "user_object_classes": [
                        "simpleSecurityObject",
                        "organizationalRole"
                      ],
                      "username_ldap_attribute": "cn",
                      "users_dn": "dc=example,dc=org",
                      "uuid_ldap_attribute": "entryDN"
                    }
                keycloak_realm.realm: |-
                    {
                      "enabled": true,
                      "realm": "my-realm"
                    }
        argumentDocs:
            config: '- (Optional) A map with key / value pairs for configuring the LDAP mapper. The supported keys depend on the protocol mapper.'
            ldap_user_federation_id: '- (Required) The ID of the LDAP user federation provider to attach this mapper to.'
            name: '- (Required) Display name of this mapper when displayed in the console.'
            provider_id: '- (Required) The id of the LDAP mapper implemented in MapperFactory.'
            provider_type: '- (Required) The fully-qualified Java class name of the custom LDAP mapper.'
            realm_id: '- (Required) The realm that this LDAP mapper will exist in.'
        importStatements: []
    keycloak_ldap_full_name_mapper:
        subCategory: ""
        name: keycloak_ldap_full_name_mapper
        title: keycloak_ldap_full_name_mapper Resource
        examples:
            - name: ldap_full_name_mapper
              manifest: |-
                {
                  "ldap_full_name_attribute": "cn",
                  "ldap_user_federation_id": "${keycloak_ldap_user_federation.ldap_user_federation.id}",
                  "name": "full-name-mapper",
                  "realm_id": "${keycloak_realm.realm.id}"
                }
              references:
                ldap_user_federation_id: keycloak_ldap_user_federation.ldap_user_federation.id
                realm_id: keycloak_realm.realm.id
              dependencies:
                keycloak_ldap_user_federation.ldap_user_federation: |-
                    {
                      "bind_credential": "admin",
                      "bind_dn": "cn=admin,dc=example,dc=org",
                      "connection_url": "ldap://openldap",
                      "name": "openldap",
                      "rdn_ldap_attribute": "cn",
                      "realm_id": "${keycloak_realm.realm.id}",
                      "user_object_classes": [
                        "simpleSecurityObject",
                        "organizationalRole"
                      ],
                      "username_ldap_attribute": "cn",
                      "users_dn": "dc=example,dc=org",
                      "uuid_ldap_attribute": "entryDN"
                    }
                keycloak_realm.realm: |-
                    {
                      "enabled": true,
                      "realm": "my-realm"
                    }
        argumentDocs:
            ldap_full_name_attribute: '- (Required) The name of the LDAP attribute containing the user''s full name.'
            ldap_user_federation_id: '- (Required) The ID of the LDAP user federation provider to attach this mapper to.'
            name: '- (Required) Display name of this mapper when displayed in the console.'
            read_only: '- (Optional) When true, updates to a user within Keycloak will not be written back to LDAP. Defaults to false.'
            realm_id: '- (Required) The realm that this LDAP mapper will exist in.'
            write_only: '- (Optional) When true, this mapper will only be used to write updates to LDAP. Defaults to false.'
        importStatements: []
    keycloak_ldap_group_mapper:
        subCategory: ""
        name: keycloak_ldap_group_mapper
        title: keycloak_ldap_group_mapper Resource
        examples:
            - name: ldap_group_mapper
              manifest: |-
                {
                  "group_name_ldap_attribute": "cn",
                  "group_object_classes": [
                    "groupOfNames"
                  ],
                  "ldap_groups_dn": "dc=example,dc=org",
                  "ldap_user_federation_id": "${keycloak_ldap_user_federation.ldap_user_federation.id}",
                  "memberof_ldap_attribute": "memberOf",
                  "membership_attribute_type": "DN",
                  "membership_ldap_attribute": "member",
                  "membership_user_ldap_attribute": "cn",
                  "name": "group-mapper",
                  "realm_id": "${keycloak_realm.realm.id}"
                }
              references:
                ldap_user_federation_id: keycloak_ldap_user_federation.ldap_user_federation.id
                realm_id: keycloak_realm.realm.id
              dependencies:
                keycloak_ldap_user_federation.ldap_user_federation: |-
                    {
                      "bind_credential": "admin",
                      "bind_dn": "cn=admin,dc=example,dc=org",
                      "connection_url": "ldap://openldap",
                      "name": "openldap",
                      "rdn_ldap_attribute": "cn",
                      "realm_id": "${keycloak_realm.realm.id}",
                      "user_object_classes": [
                        "simpleSecurityObject",
                        "organizationalRole"
                      ],
                      "username_ldap_attribute": "cn",
                      "users_dn": "dc=example,dc=org",
                      "uuid_ldap_attribute": "entryDN"
                    }
                keycloak_realm.realm: |-
                    {
                      "enabled": true,
                      "realm": "my-realm"
                    }
        argumentDocs:
            drop_non_existing_groups_during_sync: '- (Optional) When true, groups that no longer exist within LDAP will be dropped in Keycloak during sync. Defaults to false.'
            group_name_ldap_attribute: '- (Required) The name of the LDAP attribute that is used in group objects for the name and RDN of the group. Typically cn.'
            group_object_classes: '- (Required) List of strings representing the object classes for the group. Must contain at least one.'
            groups_ldap_filter: '- (Optional) When specified, adds an additional custom filter to be used when querying for groups. Must start with ( and end with ).'
            groups_path: '- (Optional) Keycloak group path the LDAP groups are added to. For example if value /Applications/App1 is used, then LDAP groups will be available in Keycloak under group App1, which is the child of top level group Applications. The configured group path must already exist in Keycloak when creating this mapper.'
            ignore_missing_groups: '- (Optional) When true, missing groups in the hierarchy will be ignored.'
            ldap_groups_dn: '- (Required) The LDAP DN where groups can be found.'
            ldap_user_federation_id: '- (Required) The ID of the LDAP user federation provider to attach this mapper to.'
            mapped_group_attributes: '- (Optional) Array of strings representing attributes on the LDAP group which will be mapped to attributes on the Keycloak group.'
            memberof_ldap_attribute: '- (Optional) Specifies the name of the LDAP attribute on the LDAP user that contains the groups the user is a member of. Defaults to memberOf.'
            membership_attribute_type: '- (Optional) Can be one of DN or UID. Defaults to DN.'
            membership_ldap_attribute: '- (Required) The name of the LDAP attribute that is used for membership mappings.'
            membership_user_ldap_attribute: '- (Required) The name of the LDAP attribute on a user that is used for membership mappings.'
            mode: '- (Optional) Can be one of READ_ONLY, LDAP_ONLY or IMPORT. Defaults to READ_ONLY.'
            name: '- (Required) Display name of this mapper when displayed in the console.'
            preserve_group_inheritance: '- (Optional) When true, group inheritance will be propagated from LDAP to Keycloak. When false, all LDAP groups will be propagated as top level groups within Keycloak.'
            realm_id: '- (Required) The realm that this LDAP mapper will exist in.'
            user_roles_retrieve_strategy: '- (Optional) Can be one of LOAD_GROUPS_BY_MEMBER_ATTRIBUTE, GET_GROUPS_FROM_USER_MEMBEROF_ATTRIBUTE, or LOAD_GROUPS_BY_MEMBER_ATTRIBUTE_RECURSIVELY. Defaults to LOAD_GROUPS_BY_MEMBER_ATTRIBUTE.'
        importStatements: []
    keycloak_ldap_hardcoded_attribute_mapper:
        subCategory: ""
        name: keycloak_ldap_hardcoded_attribute_mapper
        title: keycloak_ldap_hardcoded_attribute_mapper Resource
        examples:
            - name: assign_bar_to_foo
              manifest: |-
                {
                  "attribute_name": "foo",
                  "attribute_value": "bar",
                  "ldap_user_federation_id": "${keycloak_ldap_user_federation.ldap_user_federation.id}",
                  "name": "assign-foo-to-bar",
                  "realm_id": "${keycloak_realm.realm.id}"
                }
              references:
                ldap_user_federation_id: keycloak_ldap_user_federation.ldap_user_federation.id
                realm_id: keycloak_realm.realm.id
              dependencies:
                keycloak_ldap_user_federation.ldap_user_federation: |-
                    {
                      "bind_credential": "admin",
                      "bind_dn": "cn=admin,dc=example,dc=org",
                      "connection_url": "ldap://openldap",
                      "name": "openldap",
                      "rdn_ldap_attribute": "cn",
                      "realm_id": "${keycloak_realm.realm.id}",
                      "sync_registrations": true,
                      "user_object_classes": [
                        "simpleSecurityObject",
                        "organizationalRole"
                      ],
                      "username_ldap_attribute": "cn",
                      "users_dn": "dc=example,dc=org",
                      "uuid_ldap_attribute": "entryDN"
                    }
                keycloak_realm.realm: |-
                    {
                      "enabled": true,
                      "realm": "my-realm"
                    }
        argumentDocs:
            attribute_name: '- (Required) The name of the LDAP attribute to set.'
            attribute_value: '- (Required) The value to set to the LDAP attribute. You can hardcode any value like ''foo''.'
            ldap_user_federation_id: '- (Required) The ID of the LDAP user federation provider to attach this mapper to.'
            name: '- (Required) Display name of this mapper when displayed in the console.'
            realm_id: '- (Required) The realm that this LDAP mapper will exist in.'
        importStatements: []
    keycloak_ldap_hardcoded_group_mapper:
        subCategory: ""
        name: keycloak_ldap_hardcoded_group_mapper
        title: keycloak_ldap_hardcoded_group_mapper Resource
        examples:
            - name: assign_group_to_users
              manifest: |-
                {
                  "group": "${keycloak_group.realm_group.name}",
                  "ldap_user_federation_id": "${keycloak_ldap_user_federation.ldap_user_federation.id}",
                  "name": "assign-group-to-users",
                  "realm_id": "${keycloak_realm.realm.id}"
                }
              references:
                group: keycloak_group.realm_group.name
                ldap_user_federation_id: keycloak_ldap_user_federation.ldap_user_federation.id
                realm_id: keycloak_realm.realm.id
              dependencies:
                keycloak_group.realm_group: |-
                    {
                      "name": "my-group",
                      "realm_id": "${keycloak_realm.realm.id}"
                    }
                keycloak_ldap_user_federation.ldap_user_federation: |-
                    {
                      "bind_credential": "admin",
                      "bind_dn": "cn=admin,dc=example,dc=org",
                      "connection_url": "ldap://openldap",
                      "name": "openldap",
                      "rdn_ldap_attribute": "cn",
                      "realm_id": "${keycloak_realm.realm.id}",
                      "user_object_classes": [
                        "simpleSecurityObject",
                        "organizationalRole"
                      ],
                      "username_ldap_attribute": "cn",
                      "users_dn": "dc=example,dc=org",
                      "uuid_ldap_attribute": "entryDN"
                    }
                keycloak_realm.realm: |-
                    {
                      "enabled": true,
                      "realm": "my-realm"
                    }
        argumentDocs:
            group: '- (Required) The name of the group which should be assigned to the users.'
            ldap_user_federation_id: '- (Required) The ID of the LDAP user federation provider to attach this mapper to.'
            name: '- (Required) Display name of this mapper when displayed in the console.'
            realm_id: '- (Required) The realm that this LDAP mapper will exist in.'
        importStatements: []
    keycloak_ldap_hardcoded_role_mapper:
        subCategory: ""
        name: keycloak_ldap_hardcoded_role_mapper
        title: keycloak_ldap_hardcoded_role_mapper Resource
        examples:
            - name: assign_admin_role_to_all_users
              manifest: |-
                {
                  "ldap_user_federation_id": "${keycloak_ldap_user_federation.ldap_user_federation.id}",
                  "name": "assign-admin-role-to-all-users",
                  "realm_id": "${keycloak_realm.realm.id}",
                  "role": "${keycloak_role.realm_admin_role.name}"
                }
              references:
                ldap_user_federation_id: keycloak_ldap_user_federation.ldap_user_federation.id
                realm_id: keycloak_realm.realm.id
                role: keycloak_role.realm_admin_role.name
              dependencies:
                keycloak_ldap_user_federation.ldap_user_federation: |-
                    {
                      "bind_credential": "admin",
                      "bind_dn": "cn=admin,dc=example,dc=org",
                      "connection_url": "ldap://openldap",
                      "name": "openldap",
                      "rdn_ldap_attribute": "cn",
                      "realm_id": "${keycloak_realm.realm.id}",
                      "user_object_classes": [
                        "simpleSecurityObject",
                        "organizationalRole"
                      ],
                      "username_ldap_attribute": "cn",
                      "users_dn": "dc=example,dc=org",
                      "uuid_ldap_attribute": "entryDN"
                    }
                keycloak_realm.realm: |-
                    {
                      "enabled": true,
                      "realm": "my-realm"
                    }
                keycloak_role.realm_admin_role: |-
                    {
                      "description": "My Realm Role",
                      "name": "my-admin-role",
                      "realm_id": "${keycloak_realm.realm.id}"
                    }
            - name: assign_admin_role_to_all_users
              manifest: |-
                {
                  "ldap_user_federation_id": "${keycloak_ldap_user_federation.ldap_user_federation.id}",
                  "name": "assign-admin-role-to-all-users",
                  "realm_id": "${keycloak_realm.realm.id}",
                  "role": "${data.keycloak_openid_client.realm_management.client_id}.${data.keycloak_role.create_client.name}"
                }
              references:
                ldap_user_federation_id: keycloak_ldap_user_federation.ldap_user_federation.id
                realm_id: keycloak_realm.realm.id
              dependencies:
                keycloak_ldap_user_federation.ldap_user_federation: |-
                    {
                      "bind_credential": "admin",
                      "bind_dn": "cn=admin,dc=example,dc=org",
                      "connection_url": "ldap://openldap",
                      "name": "openldap",
                      "rdn_ldap_attribute": "cn",
                      "realm_id": "${keycloak_realm.realm.id}",
                      "user_object_classes": [
                        "simpleSecurityObject",
                        "organizationalRole"
                      ],
                      "username_ldap_attribute": "cn",
                      "users_dn": "dc=example,dc=org",
                      "uuid_ldap_attribute": "entryDN"
                    }
                keycloak_realm.realm: |-
                    {
                      "enabled": true,
                      "realm": "my-realm"
                    }
        argumentDocs:
            ldap_user_federation_id: '- (Required) The ID of the LDAP user federation provider to attach this mapper to.'
            name: '- (Required) Display name of this mapper when displayed in the console.'
            realm_id: '- (Required) The realm that this LDAP mapper will exist in.'
            role: '- (Required) The name of the role which should be assigned to the users. Client roles should use the format {{client_id}}.{{client_role_name}}.'
        importStatements: []
    keycloak_ldap_msad_lds_user_account_control_mapper:
        subCategory: ""
        name: keycloak_ldap_msad_lds_user_account_control_mapper
        title: keycloak_ldap_msad_lds_user_account_control_mapper Resource
        examples:
            - name: msad_lds_user_account_control_mapper
              manifest: |-
                {
                  "ldap_user_federation_id": "${keycloak_ldap_user_federation.ldap_user_federation.id}",
                  "name": "msad-lds-user-account-control-mapper",
                  "realm_id": "${keycloak_realm.realm.id}"
                }
              references:
                ldap_user_federation_id: keycloak_ldap_user_federation.ldap_user_federation.id
                realm_id: keycloak_realm.realm.id
              dependencies:
                keycloak_ldap_user_federation.ldap_user_federation: |-
                    {
                      "bind_credential": "admin",
                      "bind_dn": "cn=admin,dc=example,dc=org",
                      "connection_url": "ldap://my-ad-server",
                      "name": "ad",
                      "rdn_ldap_attribute": "cn",
                      "realm_id": "${keycloak_realm.realm.id}",
                      "user_object_classes": [
                        "person",
                        "organizationalPerson",
                        "user"
                      ],
                      "username_ldap_attribute": "cn",
                      "users_dn": "dc=example,dc=org",
                      "uuid_ldap_attribute": "objectGUID"
                    }
                keycloak_realm.realm: |-
                    {
                      "enabled": true,
                      "realm": "my-realm"
                    }
        argumentDocs:
            ldap_user_federation_id: '- (Required) The ID of the LDAP user federation provider to attach this mapper to.'
            name: '- (Required) Display name of this mapper when displayed in the console.'
            realm_id: '- (Required) The realm that this LDAP mapper will exist in.'
        importStatements: []
    keycloak_ldap_msad_user_account_control_mapper:
        subCategory: ""
        name: keycloak_ldap_msad_user_account_control_mapper
        title: keycloak_ldap_msad_user_account_control_mapper Resource
        examples:
            - name: msad_user_account_control_mapper
              manifest: |-
                {
                  "ldap_user_federation_id": "${keycloak_ldap_user_federation.ldap_user_federation.id}",
                  "name": "msad-user-account-control-mapper",
                  "realm_id": "${keycloak_realm.realm.id}"
                }
              references:
                ldap_user_federation_id: keycloak_ldap_user_federation.ldap_user_federation.id
                realm_id: keycloak_realm.realm.id
              dependencies:
                keycloak_ldap_user_federation.ldap_user_federation: |-
                    {
                      "bind_credential": "admin",
                      "bind_dn": "cn=admin,dc=example,dc=org",
                      "connection_url": "ldap://my-ad-server",
                      "name": "ad",
                      "rdn_ldap_attribute": "cn",
                      "realm_id": "${keycloak_realm.realm.id}",
                      "user_object_classes": [
                        "person",
                        "organizationalPerson",
                        "user"
                      ],
                      "username_ldap_attribute": "cn",
                      "users_dn": "dc=example,dc=org",
                      "uuid_ldap_attribute": "objectGUID"
                    }
                keycloak_realm.realm: |-
                    {
                      "enabled": true,
                      "realm": "my-realm"
                    }
        argumentDocs:
            ldap_password_policy_hints_enabled: '- (Optional) When true, advanced password policies, such as password hints and previous password history will be used when writing new passwords to AD. Defaults to false.'
            ldap_user_federation_id: '- (Required) The ID of the LDAP user federation provider to attach this mapper to.'
            name: '- (Required) Display name of this mapper when displayed in the console.'
            realm_id: '- (Required) The realm that this LDAP mapper will exist in.'
        importStatements: []
    keycloak_ldap_role_mapper:
        subCategory: ""
        name: keycloak_ldap_role_mapper
        title: keycloak_ldap_role_mapper Resource
        examples:
            - name: ldap_role_mapper
              manifest: |-
                {
                  "ldap_roles_dn": "dc=example,dc=org",
                  "ldap_user_federation_id": "${keycloak_ldap_user_federation.ldap_user_federation.id}",
                  "memberof_ldap_attribute": "memberOf",
                  "membership_attribute_type": "DN",
                  "membership_ldap_attribute": "member",
                  "membership_user_ldap_attribute": "cn",
                  "name": "role-mapper",
                  "realm_id": "${keycloak_realm.realm.id}",
                  "role_name_ldap_attribute": "cn",
                  "role_object_classes": [
                    "groupOfNames"
                  ],
                  "user_roles_retrieve_strategy": "GET_ROLES_FROM_USER_MEMBEROF_ATTRIBUTE"
                }
              references:
                ldap_user_federation_id: keycloak_ldap_user_federation.ldap_user_federation.id
                realm_id: keycloak_realm.realm.id
              dependencies:
                keycloak_ldap_user_federation.ldap_user_federation: |-
                    {
                      "bind_credential": "admin",
                      "bind_dn": "cn=admin,dc=example,dc=org",
                      "connection_url": "ldap://openldap",
                      "name": "openldap",
                      "rdn_ldap_attribute": "cn",
                      "realm_id": "${keycloak_realm.realm.id}",
                      "user_object_classes": [
                        "simpleSecurityObject",
                        "organizationalRole"
                      ],
                      "username_ldap_attribute": "cn",
                      "users_dn": "dc=example,dc=org",
                      "uuid_ldap_attribute": "entryDN"
                    }
                keycloak_realm.realm: |-
                    {
                      "enabled": true,
                      "realm": "my-realm"
                    }
        argumentDocs:
            client_id: '- (Optional) When specified, LDAP role mappings will be mapped to client role mappings tied to this client ID. Can only be set if use_realm_roles_mapping is false.'
            ldap_roles_dn: '- (Required) The LDAP DN where roles can be found.'
            ldap_user_federation_id: '- (Required) The ID of the LDAP user federation provider to attach this mapper to.'
            memberof_ldap_attribute: '- (Optional) Specifies the name of the LDAP attribute on the LDAP user that contains the roles the user has. Defaults to memberOf. This is only used when'
            membership_attribute_type: '- (Optional) Can be one of DN or UID. Defaults to DN.'
            membership_ldap_attribute: '- (Required) The name of the LDAP attribute that is used for membership mappings.'
            membership_user_ldap_attribute: '- (Required) The name of the LDAP attribute on a user that is used for membership mappings.'
            mode: '- (Optional) Can be one of READ_ONLY, LDAP_ONLY or IMPORT. Defaults to READ_ONLY.'
            name: '- (Required) Display name of this mapper when displayed in the console.'
            realm_id: '- (Required) The realm that this LDAP mapper will exist in.'
            role_name_ldap_attribute: '- (Required) The name of the LDAP attribute that is used in role objects for the name and RDN of the role. Typically cn.'
            role_object_classes: '- (Required) List of strings representing the object classes for the role. Must contain at least one.'
            roles_ldap_filter: '- (Optional) When specified, adds an additional custom filter to be used when querying for roles. Must start with ( and end with ).'
            use_realm_roles_mapping: '- (Optional) When true, LDAP role mappings will be mapped to realm roles within Keycloak. Defaults to true.'
            user_roles_retrieve_strategy: '- (Optional) Can be one of LOAD_ROLES_BY_MEMBER_ATTRIBUTE, GET_ROLES_FROM_USER_MEMBEROF_ATTRIBUTE, or LOAD_ROLES_BY_MEMBER_ATTRIBUTE_RECURSIVELY. Defaults to LOAD_ROLES_BY_MEMBER_ATTRIBUTE.'
        importStatements: []
    keycloak_ldap_user_attribute_mapper:
        subCategory: ""
        name: keycloak_ldap_user_attribute_mapper
        title: keycloak_ldap_user_attribute_mapper Resource
        examples:
            - name: ldap_user_attribute_mapper
              manifest: |-
                {
                  "ldap_attribute": "bar",
                  "ldap_user_federation_id": "${keycloak_ldap_user_federation.ldap_user_federation.id}",
                  "name": "user-attribute-mapper",
                  "realm_id": "${keycloak_realm.realm.id}",
                  "user_model_attribute": "foo"
                }
              references:
                ldap_user_federation_id: keycloak_ldap_user_federation.ldap_user_federation.id
                realm_id: keycloak_realm.realm.id
              dependencies:
                keycloak_ldap_user_federation.ldap_user_federation: |-
                    {
                      "bind_credential": "admin",
                      "bind_dn": "cn=admin,dc=example,dc=org",
                      "connection_url": "ldap://openldap",
                      "name": "openldap",
                      "rdn_ldap_attribute": "cn",
                      "realm_id": "${keycloak_realm.realm.id}",
                      "user_object_classes": [
                        "simpleSecurityObject",
                        "organizationalRole"
                      ],
                      "username_ldap_attribute": "cn",
                      "users_dn": "dc=example,dc=org",
                      "uuid_ldap_attribute": "entryDN"
                    }
                keycloak_realm.realm: |-
                    {
                      "enabled": true,
                      "realm": "my-realm"
                    }
        argumentDocs:
            always_read_value_from_ldap: '- (Optional) When true, the value fetched from LDAP will override the value stored in Keycloak. Defaults to false.'
            attribute_default_value: '- (Optional) Default value to set in LDAP if is_mandatory_in_ldap is true and the value is empty.'
            is_binary_attribute: '- (Optional) Should be true for binary LDAP attributes.'
            is_mandatory_in_ldap: '- (Optional) When true, this attribute must exist in LDAP. Defaults to false.'
            ldap_attribute: '- (Required) Name of the mapped attribute on the LDAP object.'
            ldap_user_federation_id: '- (Required) The ID of the LDAP user federation provider to attach this mapper to.'
            name: '- (Required) Display name of this mapper when displayed in the console.'
            read_only: '- (Optional) When true, this attribute is not saved back to LDAP when the user attribute is updated in Keycloak. Defaults to false.'
            realm_id: '- (Required) The realm that this LDAP mapper will exist in.'
            user_model_attribute: '- (Required) Name of the user property or attribute you want to map the LDAP attribute into.'
        importStatements: []
    keycloak_ldap_user_federation:
        subCategory: ""
        name: keycloak_ldap_user_federation
        title: keycloak_ldap_user_federation Resource
        examples:
            - name: ldap_user_federation
              manifest: |-
                {
                  "bind_credential": "admin",
                  "bind_dn": "cn=admin,dc=example,dc=org",
                  "connection_timeout": "5s",
                  "connection_url": "ldap://openldap",
                  "enabled": true,
                  "kerberos": [
                    {
                      "kerberos_realm": "FOO.LOCAL",
                      "key_tab": "/etc/host.keytab",
                      "server_principal": "HTTP/host.foo.com@FOO.LOCAL"
                    }
                  ],
                  "name": "openldap",
                  "rdn_ldap_attribute": "cn",
                  "read_timeout": "10s",
                  "realm_id": "${keycloak_realm.realm.id}",
                  "user_object_classes": [
                    "simpleSecurityObject",
                    "organizationalRole"
                  ],
                  "username_ldap_attribute": "cn",
                  "users_dn": "dc=example,dc=org",
                  "uuid_ldap_attribute": "entryDN"
                }
              references:
                realm_id: keycloak_realm.realm.id
              dependencies:
                keycloak_realm.realm: |-
                    {
                      "enabled": true,
                      "realm": "my-realm"
                    }
        argumentDocs:
            ALWAYS: '- Always use the truststore SPI for LDAP connections.'
            NEVER: '- Never use the truststore SPI for LDAP connections.'
            ONE_LEVEL: ': Only search for users in the DN specified by user_dn.'
            ONLY_FOR_LDAPS: '- Only use the truststore SPI if your LDAP connection uses the ldaps protocol.'
            SUBTREE: ': Search entire LDAP subtree.'
            batch_size_for_sync: '- (Optional) The number of users to sync within a single transaction. Defaults to 1000.'
            bind_credential: '- (Optional) Password of LDAP admin. This attribute must be set if bind_dn is set.'
            bind_dn: '- (Optional) DN of LDAP admin, which will be used by Keycloak to access LDAP server. This attribute must be set if bind_credential is set.'
            cache: '- (Optional) A block containing the cache settings.'
            cache_policy: '- (Optional) Deprecated Can be one of DEFAULT, EVICT_DAILY, EVICT_WEEKLY, MAX_LIFESPAN, or NO_CACHE. Defaults to DEFAULT.'
            changed_sync_period: '- (Optional) How frequently Keycloak should sync changed LDAP users, in seconds. Omit this property to disable periodic changed users sync.'
            connection_timeout: '- (Optional) LDAP connection timeout in the format of a Go duration string.'
            connection_url: '- (Required) Connection URL to the LDAP server.'
            custom_user_search_filter: '- (Optional) Additional LDAP filter for filtering searched users. Must begin with ( and end with ).'
            delete_default_mappers: '- (Optional) When true, the provider will delete the default mappers which are normally created by Keycloak when creating an LDAP user federation provider. Defaults to false.'
            edit_mode: '- (Optional) Can be one of READ_ONLY, WRITABLE, or UNSYNCED. UNSYNCED allows user data to be imported but not synced back to LDAP. Defaults to READ_ONLY.'
            enabled: '- (Optional) When false, this provider will not be used when performing queries for users. Defaults to true.'
            eviction_day: '- (Optional) Day of the week the entry will become invalid on'
            eviction_hour: '- (Optional) Hour of day the entry will become invalid on.'
            eviction_minute: '- (Optional) Minute of day the entry will become invalid on.'
            full_sync_period: '- (Optional) How frequently Keycloak should sync all LDAP users, in seconds. Omit this property to disable periodic full sync.'
            import_enabled: '- (Optional) When true, LDAP users will be imported into the Keycloak database. Defaults to true.'
            kerberos: '- (Optional) A block containing the kerberos settings.'
            kerberos_realm: '- (Required) The name of the kerberos realm, e.g. FOO.LOCAL.'
            key_tab: '- (Required) Path to the kerberos keytab file on the server with credentials of the service principal.'
            max_lifespan: '- (Optional) Max lifespan of cache entry (duration string).'
            name: '- (Required) Display name of the provider when displayed in the console.'
            pagination: '- (Optional) When true, Keycloak assumes the LDAP server supports pagination. Defaults to true.'
            policy: '- (Optional) Can be one of DEFAULT, EVICT_DAILY, EVICT_WEEKLY, MAX_LIFESPAN, or NO_CACHE. Defaults to DEFAULT.'
            priority: '- (Optional) Priority of this provider when looking up users. Lower values are first. Defaults to 0.'
            rdn_ldap_attribute: '- (Required) Name of the LDAP attribute to use as the relative distinguished name.'
            read_timeout: '- (Optional) LDAP read timeout in the format of a Go duration string.'
            realm_id: '- (Required) The realm that this provider will provide user federation for.'
            search_scope: '- (Optional) Can be one of ONE_LEVEL or SUBTREE:'
            server_principal: '- (Required) The kerberos server principal, e.g. ''HTTP/host.foo.com@FOO.LOCAL''.'
            start_tls: '- (Optional) When true, Keycloak will encrypt the connection to LDAP using STARTTLS, which will disable connection pooling.'
            sync_registrations: '- (Optional) When true, newly created users will be synced back to LDAP. Defaults to false.'
            trust_email: '- (Optional) If enabled, email provided by this provider is not verified even if verification is enabled for the realm.'
            use_kerberos_for_password_authentication: '- (Optional) Use kerberos login module instead of ldap service api. Defaults to false.'
            use_password_modify_extended_op: '- (Optional) When true, use the LDAPv3 Password Modify Extended Operation (RFC-3062).'
            use_truststore_spi: '- (Optional) Can be one of ALWAYS, ONLY_FOR_LDAPS, or NEVER:'
            user_object_classes: '- (Required) Array of all values of LDAP objectClass attribute for users in LDAP. Must contain at least one.'
            username_ldap_attribute: '- (Required) Name of the LDAP attribute to use as the Keycloak username.'
            users_dn: '- (Required) Full DN of LDAP tree where your users are.'
            uuid_ldap_attribute: '- (Required) Name of the LDAP attribute to use as a unique object identifier for objects in LDAP.'
            validate_password_policy: '- (Optional) When true, Keycloak will validate passwords using the realm policy before updating it.'
            vendor: '- (Optional) Can be one of OTHER, EDIRECTORY, AD, RHDS, or TIVOLI. When this is selected in the GUI, it provides reasonable defaults for other fields. When used with the Keycloak API, this attribute does nothing, but is still required. Defaults to OTHER.'
        importStatements: []
    keycloak_oidc_google_identity_provider:
        subCategory: ""
        name: keycloak_oidc_google_identity_provider
        title: keycloak_oidc_google_identity_provider Resource
        examples:
            - name: google
              manifest: |-
                {
                  "client_id": "${var.google_identity_provider_client_id}",
                  "client_secret": "${var.google_identity_provider_client_secret}",
                  "extra_config": {
                    "myCustomConfigKey": "myValue"
                  },
                  "hosted_domain": "example.com",
                  "realm": "${keycloak_realm.realm.id}",
                  "sync_mode": "IMPORT",
                  "trust_email": true
                }
              references:
                client_id: var.google_identity_provider_client_id
                client_secret: var.google_identity_provider_client_secret
                realm: keycloak_realm.realm.id
              dependencies:
                keycloak_realm.realm: |-
                    {
                      "enabled": true,
                      "realm": "my-realm"
                    }
        argumentDocs:
            accepts_prompt_none_forward_from_client: '- (Optional) When true, unauthenticated requests with prompt=none will be forwarded to Google instead of returning an error. Defaults to false.'
            add_read_token_role_on_create: '- (Optional) When true, new users will be able to read stored tokens. This will automatically assign the broker.read-token role. Defaults to false.'
            alias: '- (Computed) The alias for the Google identity provider.'
            client_id: '- (Required) The client or client identifier registered within the identity provider.'
            client_secret: '- (Required) The client or client secret registered within the identity provider. This field is able to obtain its value from vault, use $${vault.ID} format.'
            default_scopes: '- (Optional) The scopes to be sent when asking for authorization. It can be a space-separated list of scopes. Defaults to openid profile email.'
            disable_user_info: '- (Optional) When true, disables the usage of the user info service to obtain additional user information. Defaults to false.'
            display_name: '- (Computed) Display name for the Google identity provider in the GUI.'
            enabled: '- (Optional) When true, users will be able to log in to this realm using this identity provider. Defaults to true.'
            extra_config: '- (Optional) A map of key/value pairs to add extra configuration to this identity provider. This can be used for custom oidc provider implementations, or to add configuration that is not yet supported by this Terraform provider. Use this attribute at your own risk, as custom attributes may conflict with top-level configuration attributes in future provider updates.'
            first_broker_login_flow_alias: '- (Optional) The authentication flow to use when users log in for the first time through this identity provider. Defaults to first broker login.'
            gui_order: '- (Optional) A number defining the order of this identity provider in the GUI.'
            hide_on_login_page: '- (Optional) When true, this identity provider will be hidden on the login page. Defaults to false.'
            hosted_domain: '- (Optional) Sets the "hd" query parameter when logging in with Google. Google will only list accounts for this domain. Keycloak will validate that the returned identity token has a claim for this domain. When * is entered, an account from any domain can be used.'
            internal_id: '- (Computed) The unique ID that Keycloak assigns to the identity provider upon creation.'
            link_only: '- (Optional) When true, users cannot login using this provider, but their existing accounts will be linked when possible. Defaults to false.'
            post_broker_login_flow_alias: '- (Optional) The authentication flow to use after users have successfully logged in, which can be used to perform additional user verification (such as OTP checking). Defaults to an empty string, which means no post login flow will be used.'
            provider_id: '- (Optional) The ID of the identity provider to use. Defaults to google, which should be used unless you have extended Keycloak and provided your own implementation.'
            realm: '- (Required) The name of the realm. This is unique across Keycloak.'
            request_refresh_token: '- (Optional) Sets the "access_type" query parameter to "offline" when redirecting to google authorization endpoint,to get a refresh token back. This is useful for using Token Exchange to retrieve a Google token to access Google APIs when the user is offline.'
            store_token: '- (Optional) When true, tokens will be stored after authenticating users. Defaults to true.'
            sync_mode: '- (Optional) The default sync mode to use for all mappers attached to this identity provider. Can be once of IMPORT, FORCE, or LEGACY.'
            trust_email: '- (Optional) When true, email addresses for users in this provider will automatically be verified regardless of the realm''s email verification policy. Defaults to false.'
            use_user_ip_param: '- (Optional) Sets the "userIp" query parameter when querying Google''s User Info service. This will use the user''s IP address. This is useful if Google is throttling Keycloak''s access to the User Info service.'
        importStatements: []
    keycloak_oidc_identity_provider:
        subCategory: ""
        name: keycloak_oidc_identity_provider
        title: keycloak_oidc_identity_provider Resource
        examples:
            - name: realm_identity_provider
              manifest: |-
                {
                  "alias": "my-idp",
                  "authorization_url": "https://authorizationurl.com",
                  "client_id": "clientID",
                  "client_secret": "clientSecret",
                  "extra_config": {
                    "clientAuthMethod": "client_secret_post"
                  },
                  "realm": "${keycloak_realm.realm.id}",
                  "token_url": "https://tokenurl.com"
                }
              references:
                realm: keycloak_realm.realm.id
              dependencies:
                keycloak_realm.realm: |-
                    {
                      "enabled": true,
                      "realm": "my-realm"
                    }
        argumentDocs:
            accepts_prompt_none_forward_from_client: (Optional) When true, the IDP will accept forwarded authentication requests that contain the prompt=none query parameter. Defaults to false.
            add_read_token_role_on_create: '- (Optional) When true, new users will be able to read stored tokens. This will automatically assign the broker.read-token role. Defaults to false.'
            alias: '- (Required) The alias uniquely identifies an identity provider and it is also used to build the redirect uri.'
            authorization_url: '- (Required) The Authorization Url.'
            backchannel_supported: '- (Optional) Does the external IDP support backchannel logout? Defaults to true.'
            client_id: '- (Required) The client or client identifier registered within the identity provider.'
            client_secret: '- (Required) The client or client secret registered within the identity provider. This field is able to obtain its value from vault, use $${vault.ID} format.'
            clientAuthMethod: (Optional) The client authentication method. Since Keycloak 8, this is a required attribute if OIDC provider is created using the Keycloak GUI. It accepts the values client_secret_post (Client secret sent as post), client_secret_basic (Client secret sent as basic auth), client_secret_jwt (Client secret as jwt) and private_key_jwt  (JTW signed with private key)
            default_scopes: '- (Optional) The scopes to be sent when asking for authorization. It can be a space-separated list of scopes. Defaults to openid.'
            disable_user_info: '- (Optional) When true, disables the usage of the user info service to obtain additional user information. Defaults to false.'
            display_name: '- (Optional) Display name for the identity provider in the GUI.'
            enabled: '- (Optional) When true, users will be able to log in to this realm using this identity provider. Defaults to true.'
            extra_config: '- (Optional) A map of key/value pairs to add extra configuration to this identity provider. This can be used for custom oidc provider implementations, or to add configuration that is not yet supported by this Terraform provider. Use this attribute at your own risk, as custom attributes may conflict with top-level configuration attributes in future provider updates.'
            first_broker_login_flow_alias: '- (Optional) The authentication flow to use when users log in for the first time through this identity provider. Defaults to first broker login.'
            gui_order: '- (Optional) A number defining the order of this identity provider in the GUI.'
            hide_on_login_page: '- (Optional) When true, this provider will be hidden on the login page, and is only accessible when requested explicitly. Defaults to false.'
            internal_id: '- (Computed) The unique ID that Keycloak assigns to the identity provider upon creation.'
            issuer: '- (Optional) The issuer identifier for the issuer of the response. If not provided, no validation will be performed.'
            jwks_url: '- (Optional) JSON Web Key Set URL.'
            link_only: '- (Optional) When true, users cannot login using this provider, but their existing accounts will be linked when possible. Defaults to false.'
            login_hint: '- (Optional) Pass login hint to identity provider.'
            logout_url: '- (Optional) The Logout URL is the end session endpoint to use to logout user from external identity provider.'
            post_broker_login_flow_alias: '- (Optional) The authentication flow to use after users have successfully logged in, which can be used to perform additional user verification (such as OTP checking). Defaults to an empty string, which means no post login flow will be used.'
            provider_id: '- (Optional) The ID of the identity provider to use. Defaults to oidc, which should be used unless you have extended Keycloak and provided your own implementation.'
            realm: '- (Required) The name of the realm. This is unique across Keycloak.'
            store_token: '- (Optional) When true, tokens will be stored after authenticating users. Defaults to true.'
            sync_mode: '- (Optional) The default sync mode to use for all mappers attached to this identity provider. Can be once of IMPORT, FORCE, or LEGACY.'
            token_url: '- (Required) The Token URL.'
            trust_email: '- (Optional) When true, email addresses for users in this provider will automatically be verified regardless of the realm''s email verification policy. Defaults to false.'
            ui_locales: '- (Optional) Pass current locale to identity provider. Defaults to false.'
            user_info_url: '- (Optional) User Info URL.'
            validate_signature: '- (Optional) Enable/disable signature validation of external IDP signatures. Defaults to false.'
        importStatements: []
    keycloak_openid_audience_protocol_mapper:
        subCategory: ""
        name: keycloak_openid_audience_protocol_mapper
        title: keycloak_openid_audience_protocol_mapper Resource
        examples:
            - name: audience_mapper
              manifest: |-
                {
                  "client_id": "${keycloak_openid_client.openid_client.id}",
                  "included_custom_audience": "foo",
                  "name": "audience-mapper",
                  "realm_id": "${keycloak_realm.realm.id}"
                }
              references:
                client_id: keycloak_openid_client.openid_client.id
                realm_id: keycloak_realm.realm.id
              dependencies:
                keycloak_openid_client.openid_client: |-
                    {
                      "access_type": "CONFIDENTIAL",
                      "client_id": "client",
                      "enabled": true,
                      "name": "client",
                      "realm_id": "${keycloak_realm.realm.id}",
                      "valid_redirect_uris": [
                        "http://localhost:8080/openid-callback"
                      ]
                    }
                keycloak_realm.realm: |-
                    {
                      "enabled": true,
                      "realm": "my-realm"
                    }
            - name: audience_mapper
              manifest: |-
                {
                  "client_scope_id": "${keycloak_openid_client_scope.client_scope.id}",
                  "included_custom_audience": "foo",
                  "name": "audience-mapper",
                  "realm_id": "${keycloak_realm.realm.id}"
                }
              references:
                client_scope_id: keycloak_openid_client_scope.client_scope.id
                realm_id: keycloak_realm.realm.id
              dependencies:
                keycloak_openid_client_scope.client_scope: |-
                    {
                      "name": "test-client-scope",
                      "realm_id": "${keycloak_realm.realm.id}"
                    }
                keycloak_realm.realm: |-
                    {
                      "enabled": true,
                      "realm": "my-realm"
                    }
        argumentDocs:
            add_to_access_token: '- (Optional) Indicates if the audience should be included in the aud claim for the id token. Defaults to true.'
            add_to_id_token: '- (Optional) Indicates if the audience should be included in the aud claim for the id token. Defaults to true.'
            client_id: '- (Optional) The client this protocol mapper should be attached to. Conflicts with client_scope_id. One of client_id or client_scope_id must be specified.'
            client_scope_id: '- (Optional) The client scope this protocol mapper should be attached to. Conflicts with client_id. One of client_id or client_scope_id must be specified.'
            included_client_audience: '- (Optional) A client ID to include within the token''s aud claim. Conflicts with included_custom_audience. One of included_client_audience or included_custom_audience must be specified.'
            included_custom_audience: '- (Optional) A custom audience to include within the token''s aud claim. Conflicts with included_client_audience. One of included_client_audience or included_custom_audience must be specified.'
            name: '- (Required) The display name of this protocol mapper in the GUI.'
            realm_id: '- (Required) The realm this protocol mapper exists within.'
        importStatements: []
    keycloak_openid_audience_resolve_protocol_mapper:
        subCategory: ""
        name: keycloak_openid_audience_resolve_protocol_mapper
        title: keycloak_openid_audience_resolve_protocol_mapper Resource
        examples:
            - name: audience_mapper
              manifest: |-
                {
                  "client_id": "${keycloak_openid_client.openid_client.id}",
                  "name": "my-audience-resolve-mapper",
                  "realm_id": "${keycloak_realm.realm.id}"
                }
              references:
                client_id: keycloak_openid_client.openid_client.id
                realm_id: keycloak_realm.realm.id
              dependencies:
                keycloak_openid_client.openid_client: |-
                    {
                      "access_type": "CONFIDENTIAL",
                      "client_id": "client",
                      "enabled": true,
                      "name": "client",
                      "realm_id": "${keycloak_realm.realm.id}",
                      "valid_redirect_uris": [
                        "http://localhost:8080/openid-callback"
                      ]
                    }
                keycloak_realm.realm: |-
                    {
                      "enabled": true,
                      "realm": "my-realm"
                    }
        argumentDocs:
            client_id: '- (Optional) The client this protocol mapper should be attached to. Conflicts with client_scope_id. One of client_id or client_scope_id must be specified.'
            client_scope_id: '- (Optional) The client scope this protocol mapper should be attached to. Conflicts with client_id. One of client_id or client_scope_id must be specified.'
            name: '- (Optional) The display name of this protocol mapper in the GUI. Defaults to "audience resolve".'
            realm_id: '- (Required) The realm this protocol mapper exists within.'
        importStatements: []
    keycloak_openid_client:
        subCategory: ""
        name: keycloak_openid_client
        title: keycloak_openid_client Resource
        examples:
            - name: openid_client
              manifest: |-
                {
                  "access_type": "CONFIDENTIAL",
                  "client_id": "test-client",
                  "enabled": true,
                  "extra_config": {
                    "key1": "value1",
                    "key2": "value2"
                  },
                  "login_theme": "keycloak",
                  "name": "test client",
                  "realm_id": "${keycloak_realm.realm.id}",
                  "valid_redirect_uris": [
                    "http://localhost:8080/openid-callback"
                  ]
                }
              references:
                realm_id: keycloak_realm.realm.id
              dependencies:
                keycloak_realm.realm: |-
                    {
                      "enabled": true,
                      "realm": "my-realm"
                    }
        argumentDocs:
            BEARER-ONLY: '- Used for services that never initiate a login. This client will only allow bearer token requests.'
            CONFIDENTIAL: |-
                - Used for server-side clients that require both client ID and secret when authenticating.
                This client should be used for applications using the Authorization Code or Client Credentials grant flows.
            PUBLIC: |-
                - Used for browser-only applications that do not require a client secret, and instead rely only on authorized redirect
                URIs for security. This client should be used for applications using the Implicit grant flow.
            access_token_lifespan: '- (Optional) The amount of time in seconds before an access token expires. This will override the default for the realm.'
            access_type: '- (Required) Specifies the type of client, which can be one of the following:'
            admin_url: '- (Optional) URL to the admin interface of the client.'
            authentication_flow_binding_overrides: '- (Optional) Override realm authentication flow bindings'
            authorization: '- (Optional) When this block is present, fine-grained authorization will be enabled for this client. The client''s access_type must be CONFIDENTIAL, and service_accounts_enabled must be true. This block has the following arguments:'
            authorization.allow_remote_resource_management: '- (Optional) When true, resources can be managed remotely by the resource server. Defaults to false.'
            authorization.decision_strategy: '- (Optional) Dictates how the policies associated with a given permission are evaluated and how a final decision is obtained. Could be one of AFFIRMATIVE, CONSENSUS, or UNANIMOUS. Applies to permissions.'
            authorization.keep_defaults: '- (Optional) When true, defaults set by Keycloak will be respected. Defaults to false.'
            authorization.policy_enforcement_mode: '- (Required) Dictates how policies are enforced when evaluating authorization requests. Can be one of ENFORCING, PERMISSIVE, or DISABLED.'
            backchannel_logout_revoke_offline_sessions: '- (Optional) Specifying whether a "revoke_offline_access" event is included in the Logout Token when the Backchannel Logout URL is used. Keycloak will revoke offline sessions when receiving a Logout Token with this event.'
            backchannel_logout_session_required: '- (Optional) When true, a sid (session ID) claim will be included in the logout token when the backchannel logout URL is used. Defaults to true.'
            backchannel_logout_url: '- (Optional) The URL that will cause the client to log itself out when a logout request is sent to this realm. If omitted, no logout request will be sent to the client is this case.'
            base_url: '- (Optional) Default URL to use when the auth server needs to redirect or link back to the client.'
            browser_id: '- (Optional) Browser flow id, (flow needs to exist)'
            client-jwt: Use signed JWT to authenticate client. Set signing algorithm in extra_config with attributes.token.endpoint.auth.signing.alg = <alg>
            client-secret: (Default) Use client id and client secret to authenticate client.
            client-secret-jwt: Use signed JWT with client secret to authenticate client. Set signing algorithm in extra_config with attributes.token.endpoint.auth.signing.alg = <alg>
            client-x509: Use x509 certificate to authenticate client. Set Subject DN in extra_config with attributes.x509.subjectdn = <subjectDn>
            client_authenticator_type: '- (Optional) Defaults to client-secret. The authenticator type for clients with an access_type of CONFIDENTIAL or BEARER-ONLY. A default Keycloak installation will have the following available types:'
            client_id: '- (Required) The Client ID for this client, referenced in the URI during authentication and in issued tokens.'
            client_offline_session_idle_timeout: '- (Optional) Time a client session is allowed to be idle before it expires. Tokens are invalidated when a client session is expired. If not set it uses the standard SSO Session Idle value.'
            client_offline_session_max_lifespan: '- (Optional) Max time before a client session is expired. Tokens are invalidated when a client session is expired. If not set, it uses the standard SSO Session Max value.'
            client_secret: '- (Optional) The secret for clients with an access_type of CONFIDENTIAL or BEARER-ONLY. This value is sensitive and should be treated with the same care as a password. If omitted, this will be generated by Keycloak.'
            client_session_idle_timeout: '- (Optional) Time a client offline session is allowed to be idle before it expires. Offline tokens are invalidated when a client offline session is expired. If not set it uses the Offline Session Idle value.'
            client_session_max_lifespan: '- (Optional) Max time before a client offline session is expired. Offline tokens are invalidated when a client offline session is expired. If not set, it uses the Offline Session Max value.'
            consent_required: '- (Optional) When true, users have to consent to client access. Defaults to false.'
            consent_screen_text: '- (Optional) The text to display on the consent screen about permissions specific to this client. This is applicable only when display_on_consent_screen is true.'
            description: '- (Optional) The description of this client in the GUI.'
            direct_access_grants_enabled: '- (Optional) When true, the OAuth2 Resource Owner Password Grant will be enabled for this client. Defaults to false.'
            direct_grant_id: '- (Optional) Direct grant flow id (flow needs to exist)'
            display_on_consent_screen: '- (Optional) When true, the consent screen will display information about the client itself. Defaults to false. This is applicable only when consent_required is true.'
            enabled: '- (Optional) When false, this client will not be able to initiate a login or obtain access tokens. Defaults to true.'
            exclude_session_state_from_auth_response: '- (Optional) When true, the parameter session_state will not be included in OpenID Connect Authentication Response.'
            extra_config: '- (Optional) A map of key/value pairs to add extra configuration attributes to this client. This can be used for custom attributes, or to add configuration attributes that are not yet supported by this Terraform provider. Use this attribute at your own risk, as it may conflict with top-level configuration attributes in future provider updates. For example, the extra_config map can be used to set Authentication Context Class Reference (ACR) to Level of Authentication (LoA) mapping'
            frontchannel_logout_enabled: '- (Optional) When true, frontchannel logout will be enabled for this client. Specify the url with frontchannel_logout_url. Defaults to false.'
            frontchannel_logout_url: '- (Optional) The frontchannel logout url. This is applicable only when frontchannel_logout_enabled is true.'
            full_scope_allowed: '- (Optional) Allow to include all roles mappings in the access token.'
            implicit_flow_enabled: '- (Optional) When true, the OAuth2 Implicit Grant will be enabled for this client. Defaults to false.'
            import: '- (Optional) When true, the client with the specified client_id is assumed to already exist, and it will be imported into state instead of being created. This attribute is useful when dealing with clients that Keycloak creates automatically during realm creation, such as account and admin-cli. Note, that the client will not be removed during destruction if import is true.'
            login_theme: '- (Optional) The client login theme. This will override the default theme for the realm.'
            name: '- (Optional) The display name of this client in the GUI.'
            oauth2_device_authorization_grant_enabled: '- (Optional) Enables support for OAuth 2.0 Device Authorization Grant, which means that client is an application on device that has limited input capabilities or lack a suitable browser.'
            oauth2_device_code_lifespan: '- (Optional) The maximum amount of time a client has to finish the device code flow before it expires.'
            oauth2_device_polling_interval: '- (Optional) The minimum amount of time in seconds that the client should wait between polling requests to the token endpoint.'
            pkce_code_challenge_method: '- (Optional) The challenge method to use for Proof Key for Code Exchange. Can be either plain or S256 or set to empty value ``.'
            realm_id: '- (Required) The realm this client is attached to.'
            resource_server_id: '- (Computed) When authorization is enabled for this client, this attribute is the unique ID for the client (the same value as the .id attribute).'
            root_url: '- (Optional) When specified, this URL is prepended to any relative URLs found within valid_redirect_uris, web_origins, and admin_url. NOTE: Due to limitations in the Keycloak API, when the root_url attribute is used, the valid_redirect_uris, web_origins, and admin_url attributes will be required.'
            service_account_user_id: '- (Computed) When service accounts are enabled for this client, this attribute is the unique ID for the Keycloak user that represents this service account.'
            service_accounts_enabled: '- (Optional) When true, the OAuth2 Client Credentials grant will be enabled for this client. Defaults to false.'
            standard_flow_enabled: '- (Optional) When true, the OAuth2 Authorization Code Grant will be enabled for this client. Defaults to false.'
            use_refresh_tokens: '- (Optional) If this is true, a refresh_token will be created and added to the token response. If this is false then no refresh_token will be generated.  Defaults to true.'
            use_refresh_tokens_client_credentials: '- (Optional) If this is true, a refresh_token will be created and added to the token response if the client_credentials grant is used and a user session will be created. If this is false then no refresh_token will be generated and the associated user session will be removed, in accordance with OAuth 2.0 RFC6749 Section 4.4.3. Defaults to false.'
            valid_post_logout_redirect_uris: '- (Optional) A list of valid URIs a browser is permitted to redirect to after a successful logout.'
            valid_redirect_uris: |-
                - (Optional) A list of valid URIs a browser is permitted to redirect to after a successful login or logout. Simple
                wildcards in the form of an asterisk can be used here. This attribute must be set if either standard_flow_enabled or implicit_flow_enabled
                is set to true.
            web_origins: '- (Optional) A list of allowed CORS origins. To permit all valid redirect URIs, add +. Note that this will not include the * wildcard. To permit all origins, explicitly add *."'
        importStatements: []
    keycloak_openid_client_authorization_permission:
        subCategory: ""
        name: keycloak_openid_client_authorization_permission
        title: keycloak_openid_client_authorization_permission Resource
        examples:
            - name: test
              manifest: |-
                {
                  "name": "permission_name",
                  "policies": [
                    "${data.keycloak_openid_client_authorization_policy.default.id}"
                  ],
                  "realm_id": "${keycloak_realm.realm.id}",
                  "resource_server_id": "${keycloak_openid_client.test.resource_server_id}",
                  "resources": [
                    "${keycloak_openid_client_authorization_resource.test.id}"
                  ]
                }
              references:
                realm_id: keycloak_realm.realm.id
                resource_server_id: keycloak_openid_client.test.resource_server_id
              dependencies:
                keycloak_openid_client.test: |-
                    {
                      "access_type": "CONFIDENTIAL",
                      "authorization": [
                        {
                          "policy_enforcement_mode": "ENFORCING"
                        }
                      ],
                      "client_id": "client_id",
                      "realm_id": "${keycloak_realm.realm.id}",
                      "service_accounts_enabled": true
                    }
                keycloak_openid_client_authorization_resource.test: |-
                    {
                      "name": "resource_name",
                      "realm_id": "${keycloak_realm.realm.id}",
                      "resource_server_id": "${keycloak_openid_client.test.resource_server_id}",
                      "uris": [
                        "/endpoint/*"
                      ]
                    }
                keycloak_openid_client_authorization_scope.test: |-
                    {
                      "name": "scope_name",
                      "realm_id": "${keycloak_realm.realm.id}",
                      "resource_server_id": "${keycloak_openid_client.test.resource_server_id}"
                    }
                keycloak_realm.realm: |-
                    {
                      "enabled": true,
                      "realm": "my-realm"
                    }
        argumentDocs:
            decision_strategy: '- (Optional) The decision strategy, can be one of UNANIMOUS, AFFIRMATIVE, or CONSENSUS. Defaults to UNANIMOUS.'
            description: '- (Optional) A description for the authorization permission.'
            id: '- Permission ID representing the permission.'
            name: '- (Required) The name of the permission.'
            policies: '- (Optional) A list of policy IDs that must be applied to the scopes defined by this permission.'
            realm_id: '- (Required) The realm this group exists in.'
            resource_server_id: '- (Required) The ID of the resource server.'
            resource_type: '- (Optional) When specified, this permission will be evaluated for all instances of a given resource type. Conflicts with resources.'
            resources: '- (Optional) A list of resource IDs that this permission must be applied to. Conflicts with resource_type.'
            scopes: '- (Optional) A list of scope IDs that this permission must be applied to.'
            type: '- (Optional) The type of permission, can be one of resource or scope.'
        importStatements: []
    keycloak_openid_client_client_policy:
        subCategory: ""
        name: keycloak_openid_client_client_policy
        title: keycloak_openid_client_client_policy Resource
        examples:
            - name: token_exchange
              manifest: |-
                {
                  "clients": [
                    "${keycloak_openid_client.openid_client.id}"
                  ],
                  "decision_strategy": "UNANIMOUS",
                  "logic": "POSITIVE",
                  "name": "my-policy",
                  "realm_id": "${keycloak_realm.realm.id}",
                  "resource_server_id": "${data.keycloak_openid_client.realm_management.id}"
                }
              references:
                realm_id: keycloak_realm.realm.id
                resource_server_id: data.keycloak_openid_client.realm_management.id
              dependencies:
                keycloak_openid_client.openid_client: |-
                    {
                      "access_type": "CONFIDENTIAL",
                      "client_id": "openid_client",
                      "name": "openid_client",
                      "realm_id": "${keycloak_realm.realm.id}",
                      "service_accounts_enabled": true
                    }
                keycloak_openid_client_permissions.my_permission: |-
                    {
                      "client_id": "${keycloak_openid_client.openid_client.id}",
                      "realm_id": "${keycloak_realm.realm.id}"
                    }
                keycloak_realm.realm: |-
                    {
                      "enabled": true,
                      "realm": "my-realm"
                    }
        argumentDocs:
            clients: '- (Required) The clients allowed by this client policy.'
            decision_strategy: '- (Computed) Dictates how the policies associated with a given permission are evaluated and how a final decision is obtained. Could be one of AFFIRMATIVE, CONSENSUS, or UNANIMOUS. Applies to permissions.'
            description: '- (Optional) The description of this client policy.'
            logic: '- (Computed) Dictates how the policy decision should be made. Can be either POSITIVE or NEGATIVE. Applies to policies.'
            name: '- (Required) The name of this client policy.'
            realm_id: '- (Required) The realm this client policy exists within.'
            resource_server_id: '- (Required) The ID of the resource server this client policy is attached to.'
        importStatements: []
    keycloak_openid_client_default_scopes:
        subCategory: ""
        name: keycloak_openid_client_default_scopes
        title: keycloak_openid_client_default_scopes Resource
        examples:
            - name: client_default_scopes
              manifest: |-
                {
                  "client_id": "${keycloak_openid_client.client.id}",
                  "default_scopes": [
                    "profile",
                    "email",
                    "roles",
                    "web-origins",
                    "${keycloak_openid_client_scope.client_scope.name}"
                  ],
                  "realm_id": "${keycloak_realm.realm.id}"
                }
              references:
                client_id: keycloak_openid_client.client.id
                realm_id: keycloak_realm.realm.id
              dependencies:
                keycloak_openid_client.client: |-
                    {
                      "access_type": "CONFIDENTIAL",
                      "client_id": "test-client",
                      "realm_id": "${keycloak_realm.realm.id}"
                    }
                keycloak_openid_client_scope.client_scope: |-
                    {
                      "name": "test-client-scope",
                      "realm_id": "${keycloak_realm.realm.id}"
                    }
                keycloak_realm.realm: |-
                    {
                      "enabled": true,
                      "realm": "my-realm"
                    }
        argumentDocs:
            client_id: '- (Required) The ID of the client to attach default scopes to. Note that this is the unique ID of the client generated by Keycloak.'
            default_scopes: '- (Required) An array of client scope names to attach to this client.'
            realm_id: '- (Required) The realm this client and scopes exists in.'
        importStatements: []
    keycloak_openid_client_optional_scopes:
        subCategory: ""
        name: keycloak_openid_client_optional_scopes
        title: keycloak_openid_client_optional_scopes Resource
        examples:
            - name: client_optional_scopes
              manifest: |-
                {
                  "client_id": "${keycloak_openid_client.client.id}",
                  "optional_scopes": [
                    "address",
                    "phone",
                    "offline_access",
                    "microprofile-jwt",
                    "${keycloak_openid_client_scope.client_scope.name}"
                  ],
                  "realm_id": "${keycloak_realm.realm.id}"
                }
              references:
                client_id: keycloak_openid_client.client.id
                realm_id: keycloak_realm.realm.id
              dependencies:
                keycloak_openid_client.client: |-
                    {
                      "access_type": "CONFIDENTIAL",
                      "client_id": "test-client",
                      "realm_id": "${keycloak_realm.realm.id}"
                    }
                keycloak_openid_client_scope.client_scope: |-
                    {
                      "name": "test-client-scope",
                      "realm_id": "${keycloak_realm.realm.id}"
                    }
                keycloak_realm.realm: |-
                    {
                      "enabled": true,
                      "realm": "my-realm"
                    }
        argumentDocs:
            client_id: '- (Required) The ID of the client to attach optional scopes to. Note that this is the unique ID of the client generated by Keycloak.'
            optional_scopes: '- (Required) An array of client scope names to attach to this client as optional scopes.'
            realm_id: '- (Required) The realm this client and scopes exists in.'
        importStatements: []
    keycloak_openid_client_permissions:
        subCategory: ""
        name: keycloak_openid_client_permissions
        title: keycloak_openid_client_permissions Resource
        examples:
            - name: my_permission
              manifest: |-
                {
                  "client_id": "${keycloak_openid_client.my_openid_client.id}",
                  "realm_id": "${keycloak_realm.realm.id}",
                  "view_scope": [
                    {
                      "decision_strategy": "UNANIMOUS",
                      "description": "my description",
                      "policies": [
                        "${keycloak_openid_client_user_policy.test.id}"
                      ]
                    }
                  ]
                }
              references:
                client_id: keycloak_openid_client.my_openid_client.id
                realm_id: keycloak_realm.realm.id
              dependencies:
                keycloak_openid_client.my_openid_client: |-
                    {
                      "access_type": "CONFIDENTIAL",
                      "client_id": "my_openid_client",
                      "client_secret": "secret",
                      "name": "my_openid_client",
                      "realm_id": "${keycloak_realm.realm.id}",
                      "standard_flow_enabled": true,
                      "valid_redirect_uris": [
                        "http://localhost:8080/*"
                      ]
                    }
                keycloak_openid_client_user_policy.test: |-
                    {
                      "decision_strategy": "UNANIMOUS",
                      "depends_on": [
                        "${keycloak_openid_client.my_openid_client}"
                      ],
                      "logic": "POSITIVE",
                      "name": "client_user_policy_test",
                      "realm_id": "${keycloak_realm.realm.id}",
                      "resource_server_id": "${data.keycloak_openid_client.realm_management.id}",
                      "users": [
                        "${keycloak_user.test.id}"
                      ]
                    }
                keycloak_realm.realm: |-
                    {
                      "realm": "realm"
                    }
                keycloak_user.test: |-
                    {
                      "email": "test-user@fakedomain.com",
                      "first_name": "Testy",
                      "last_name": "Tester",
                      "realm_id": "${keycloak_realm.realm.id}",
                      "username": "test-user"
                    }
        argumentDocs:
            authorization_resource_server_id: |-
                - Resource server id representing the realm management client on which this
                permission is managed.
            client_id: '- (Required) The id of the client that provides the role.'
            decision_strategy: '- (Optional) The decision strategy, can be one of UNANIMOUS, AFFIRMATIVE, or CONSENSUS.'
            description: '- (Optional) A description for the permission scope'
            policies: '- (Optional) A list of policy IDs'
            realm_id: '- (Required) The realm this group exists in.'
        importStatements: []
    keycloak_openid_client_scope:
        subCategory: ""
        name: keycloak_openid_client_scope
        title: keycloak_openid_client_scope Resource
        examples:
            - name: openid_client_scope
              manifest: |-
                {
                  "description": "When requested, this scope will map a user's group memberships to a claim",
                  "gui_order": 1,
                  "include_in_token_scope": true,
                  "name": "groups",
                  "realm_id": "${keycloak_realm.realm.id}"
                }
              references:
                realm_id: keycloak_realm.realm.id
              dependencies:
                keycloak_realm.realm: |-
                    {
                      "enabled": true,
                      "realm": "my-realm"
                    }
        argumentDocs:
            consent_screen_text: '- (Optional) When set, a consent screen will be displayed to users authenticating to clients with this scope attached. The consent screen will display the string value of this attribute.'
            description: '- (Optional) The description of this client scope in the GUI.'
            gui_order: '- (Optional) Specify order of the client scope in GUI (such as in Consent page) as integer.'
            include_in_token_scope: '- (Optional) When true, the name of this client scope will be added to the access token property ''scope'' as well as to the Token Introspection Endpoint response.'
            name: '- (Required) The display name of this client scope in the GUI.'
            realm_id: '- (Required) The realm this client scope belongs to.'
        importStatements: []
    keycloak_openid_client_service_account_realm_role:
        subCategory: ""
        name: keycloak_openid_client_service_account_realm_role
        title: keycloak_openid_client_service_account_realm_role Resource
        examples:
            - name: client_service_account_role
              manifest: |-
                {
                  "realm_id": "${keycloak_realm.realm.id}",
                  "role": "${keycloak_role.realm_role.name}",
                  "service_account_user_id": "${keycloak_openid_client.client.service_account_user_id}"
                }
              references:
                realm_id: keycloak_realm.realm.id
                role: keycloak_role.realm_role.name
                service_account_user_id: keycloak_openid_client.client.service_account_user_id
              dependencies:
                keycloak_openid_client.client: |-
                    {
                      "name": "client",
                      "realm_id": "${keycloak_realm.realm.id}",
                      "service_accounts_enabled": true
                    }
                keycloak_realm.realm: |-
                    {
                      "enabled": true,
                      "realm": "my-realm"
                    }
                keycloak_role.realm_role: |-
                    {
                      "name": "my-realm-role",
                      "realm_id": "${keycloak_realm.realm.id}"
                    }
        argumentDocs:
            realm_id: '- (Required) The realm that the client and role belong to.'
            role: '- (Required) The name of the role that is assigned.'
            service_account_user_id: '- (Required) The id of the service account that is assigned the role (the service account of the client that "consumes" the role).'
        importStatements: []
    keycloak_openid_client_service_account_role:
        subCategory: ""
        name: keycloak_openid_client_service_account_role
        title: keycloak_openid_client_service_account_role Resource
        examples:
            - name: client2_service_account_role
              manifest: |-
                {
                  "client_id": "${keycloak_openid_client.client1.id}",
                  "realm_id": "${keycloak_realm.realm.id}",
                  "role": "${keycloak_role.client1_role.name}",
                  "service_account_user_id": "${keycloak_openid_client.client2.service_account_user_id}"
                }
              references:
                client_id: keycloak_openid_client.client1.id
                realm_id: keycloak_realm.realm.id
                role: keycloak_role.client1_role.name
                service_account_user_id: keycloak_openid_client.client2.service_account_user_id
              dependencies:
                keycloak_openid_client.client1: |-
                    {
                      "name": "client1",
                      "realm_id": "${keycloak_realm.realm.id}"
                    }
                keycloak_openid_client.client2: |-
                    {
                      "name": "client2",
                      "realm_id": "${keycloak_realm.realm.id}",
                      "service_accounts_enabled": true
                    }
                keycloak_realm.realm: |-
                    {
                      "enabled": true,
                      "realm": "my-realm"
                    }
                keycloak_role.client1_role: |-
                    {
                      "client_id": "${keycloak_openid_client.client1.id}",
                      "description": "A role that client1 provides",
                      "name": "my-client1-role",
                      "realm_id": "${keycloak_realm.realm.id}"
                    }
        argumentDocs:
            client_id: '- (Required) The id of the client that provides the role.'
            realm_id: '- (Required) The realm the clients and roles belong to.'
            role: '- (Required) The name of the role that is assigned.'
            service_account_user_id: '- (Required) The id of the service account that is assigned the role (the service account of the client that "consumes" the role).'
        importStatements: []
    keycloak_openid_full_name_protocol_mapper:
        subCategory: ""
        name: keycloak_openid_full_name_protocol_mapper
        title: keycloak_openid_full_name_protocol_mapper Resource
        examples:
            - name: full_name_mapper
              manifest: |-
                {
                  "client_id": "${keycloak_openid_client.openid_client.id}",
                  "name": "full-name-mapper",
                  "realm_id": "${keycloak_realm.realm.id}"
                }
              references:
                client_id: keycloak_openid_client.openid_client.id
                realm_id: keycloak_realm.realm.id
              dependencies:
                keycloak_openid_client.openid_client: |-
                    {
                      "access_type": "CONFIDENTIAL",
                      "client_id": "client",
                      "enabled": true,
                      "name": "client",
                      "realm_id": "${keycloak_realm.realm.id}",
                      "valid_redirect_uris": [
                        "http://localhost:8080/openid-callback"
                      ]
                    }
                keycloak_realm.realm: |-
                    {
                      "enabled": true,
                      "realm": "my-realm"
                    }
            - name: full_name_mapper
              manifest: |-
                {
                  "client_scope_id": "${keycloak_openid_client_scope.client_scope.id}",
                  "name": "full-name-mapper",
                  "realm_id": "${keycloak_realm.realm.id}"
                }
              references:
                client_scope_id: keycloak_openid_client_scope.client_scope.id
                realm_id: keycloak_realm.realm.id
              dependencies:
                keycloak_openid_client_scope.client_scope: |-
                    {
                      "name": "client-scope",
                      "realm_id": "${keycloak_realm.realm.id}"
                    }
                keycloak_realm.realm: |-
                    {
                      "enabled": true,
                      "realm": "my-realm"
                    }
        argumentDocs:
            add_to_access_token: '- (Optional) Indicates if the user''s full name should be added as a claim to the access token. Defaults to true.'
            add_to_id_token: '- (Optional) Indicates if the user''s full name should be added as a claim to the id token. Defaults to true.'
            add_to_userinfo: '- (Optional) Indicates if the user''s full name should be added as a claim to the UserInfo response body. Defaults to true.'
            client_id: '- (Optional) The client this protocol mapper should be attached to. Conflicts with client_scope_id. One of client_id or client_scope_id must be specified.'
            client_scope_id: '- (Optional) The client scope this protocol mapper should be attached to. Conflicts with client_id. One of client_id or client_scope_id must be specified.'
            name: '- (Required) The display name of this protocol mapper in the GUI.'
            realm_id: '- (Required) The realm this protocol mapper exists within.'
        importStatements: []
    keycloak_openid_group_membership_protocol_mapper:
        subCategory: ""
        name: keycloak_openid_group_membership_protocol_mapper
        title: keycloak_openid_group_membership_protocol_mapper Resource
        examples:
            - name: group_membership_mapper
              manifest: |-
                {
                  "claim_name": "groups",
                  "client_id": "${keycloak_openid_client.openid_client.id}",
                  "name": "group-membership-mapper",
                  "realm_id": "${keycloak_realm.realm.id}"
                }
              references:
                client_id: keycloak_openid_client.openid_client.id
                realm_id: keycloak_realm.realm.id
              dependencies:
                keycloak_openid_client.openid_client: |-
                    {
                      "access_type": "CONFIDENTIAL",
                      "client_id": "client",
                      "enabled": true,
                      "name": "client",
                      "realm_id": "${keycloak_realm.realm.id}",
                      "valid_redirect_uris": [
                        "http://localhost:8080/openid-callback"
                      ]
                    }
                keycloak_realm.realm: |-
                    {
                      "enabled": true,
                      "realm": "my-realm"
                    }
            - name: group_membership_mapper
              manifest: |-
                {
                  "claim_name": "groups",
                  "client_scope_id": "${keycloak_openid_client_scope.client_scope.id}",
                  "name": "group-membership-mapper",
                  "realm_id": "${keycloak_realm.realm.id}"
                }
              references:
                client_scope_id: keycloak_openid_client_scope.client_scope.id
                realm_id: keycloak_realm.realm.id
              dependencies:
                keycloak_openid_client_scope.client_scope: |-
                    {
                      "name": "client-scope",
                      "realm_id": "${keycloak_realm.realm.id}"
                    }
                keycloak_realm.realm: |-
                    {
                      "enabled": true,
                      "realm": "my-realm"
                    }
        argumentDocs:
            add_to_access_token: '- (Optional) Indicates if the property should be added as a claim to the access token. Defaults to true.'
            add_to_id_token: '- (Optional) Indicates if the property should be added as a claim to the id token. Defaults to true.'
            add_to_userinfo: '- (Optional) Indicates if the property should be added as a claim to the UserInfo response body. Defaults to true.'
            claim_name: '- (Required) The name of the claim to insert into a token.'
            client_id: '- (Optional) The client this protocol mapper should be attached to. Conflicts with client_scope_id. One of client_id or client_scope_id must be specified.'
            client_scope_id: '- (Optional) The client scope this protocol mapper should be attached to. Conflicts with client_id. One of client_id or client_scope_id must be specified.'
            full_path: '- (Optional) Indicates whether the full path of the group including its parents will be used. Defaults to true.'
            name: '- (Required) The display name of this protocol mapper in the GUI.'
            realm_id: '- (Required) The realm this protocol mapper exists within.'
        importStatements: []
    keycloak_openid_hardcoded_claim_protocol_mapper:
        subCategory: ""
        name: keycloak_openid_hardcoded_claim_protocol_mapper
        title: keycloak_openid_hardcoded_claim_protocol_mapper Resource
        examples:
            - name: hardcoded_claim_mapper
              manifest: |-
                {
                  "claim_name": "foo",
                  "claim_value": "bar",
                  "client_id": "${keycloak_openid_client.openid_client.id}",
                  "name": "hardcoded-claim-mapper",
                  "realm_id": "${keycloak_realm.realm.id}"
                }
              references:
                client_id: keycloak_openid_client.openid_client.id
                realm_id: keycloak_realm.realm.id
              dependencies:
                keycloak_openid_client.openid_client: |-
                    {
                      "access_type": "CONFIDENTIAL",
                      "client_id": "client",
                      "enabled": true,
                      "name": "client",
                      "realm_id": "${keycloak_realm.realm.id}",
                      "valid_redirect_uris": [
                        "http://localhost:8080/openid-callback"
                      ]
                    }
                keycloak_realm.realm: |-
                    {
                      "enabled": true,
                      "realm": "my-realm"
                    }
            - name: hardcoded_claim_mapper
              manifest: |-
                {
                  "claim_name": "foo",
                  "claim_value": "bar",
                  "client_scope_id": "${keycloak_openid_client_scope.client_scope.id}",
                  "name": "hardcoded-claim-mapper",
                  "realm_id": "${keycloak_realm.realm.id}"
                }
              references:
                client_scope_id: keycloak_openid_client_scope.client_scope.id
                realm_id: keycloak_realm.realm.id
              dependencies:
                keycloak_openid_client_scope.client_scope: |-
                    {
                      "name": "client-scope",
                      "realm_id": "${keycloak_realm.realm.id}"
                    }
                keycloak_realm.realm: |-
                    {
                      "enabled": true,
                      "realm": "my-realm"
                    }
        argumentDocs:
            add_to_access_token: '- (Optional) Indicates if the property should be added as a claim to the access token. Defaults to true.'
            add_to_id_token: '- (Optional) Indicates if the property should be added as a claim to the id token. Defaults to true.'
            add_to_userinfo: '- (Optional) Indicates if the property should be added as a claim to the UserInfo response body. Defaults to true.'
            claim_name: '- (Required) The name of the claim to insert into a token.'
            claim_value: '- (Required) The hardcoded value of the claim.'
            claim_value_type: '- (Optional) The claim type used when serializing JSON tokens. Can be one of String, JSON, long, int, or boolean. Defaults to String.'
            client_id: '- (Optional) The client this protocol mapper should be attached to. Conflicts with client_scope_id. One of client_id or client_scope_id must be specified.'
            client_scope_id: '- (Optional) The client scope this protocol mapper should be attached to. Conflicts with client_id. One of client_id or client_scope_id must be specified.'
            name: '- (Required) The display name of this protocol mapper in the GUI.'
            realm_id: '- (Required) The realm this protocol mapper exists within.'
        importStatements: []
    keycloak_openid_hardcoded_role_protocol_mapper:
        subCategory: ""
        name: keycloak_openid_hardcoded_role_protocol_mapper
        title: keycloak_openid_hardcoded_role_protocol_mapper Resource
        examples:
            - name: hardcoded_role_mapper
              manifest: |-
                {
                  "client_id": "${keycloak_openid_client.openid_client.id}",
                  "name": "hardcoded-role-mapper",
                  "realm_id": "${keycloak_realm.realm.id}",
                  "role_id": "${keycloak_role.role.id}"
                }
              references:
                client_id: keycloak_openid_client.openid_client.id
                realm_id: keycloak_realm.realm.id
                role_id: keycloak_role.role.id
              dependencies:
                keycloak_openid_client.openid_client: |-
                    {
                      "access_type": "CONFIDENTIAL",
                      "client_id": "client",
                      "enabled": true,
                      "name": "client",
                      "realm_id": "${keycloak_realm.realm.id}",
                      "valid_redirect_uris": [
                        "http://localhost:8080/openid-callback"
                      ]
                    }
                keycloak_realm.realm: |-
                    {
                      "enabled": true,
                      "realm": "my-realm"
                    }
                keycloak_role.role: |-
                    {
                      "name": "my-role",
                      "realm_id": "${keycloak_realm.realm.id}"
                    }
            - name: hardcoded_role_mapper
              manifest: |-
                {
                  "client_scope_id": "${keycloak_openid_client_scope.client_scope.id}",
                  "name": "hardcoded-role-mapper",
                  "realm_id": "${keycloak_realm.realm.id}",
                  "role_id": "${keycloak_role.role.id}"
                }
              references:
                client_scope_id: keycloak_openid_client_scope.client_scope.id
                realm_id: keycloak_realm.realm.id
                role_id: keycloak_role.role.id
              dependencies:
                keycloak_openid_client_scope.client_scope: |-
                    {
                      "name": "client-scope",
                      "realm_id": "${keycloak_realm.realm.id}"
                    }
                keycloak_realm.realm: |-
                    {
                      "enabled": true,
                      "realm": "my-realm"
                    }
                keycloak_role.role: |-
                    {
                      "name": "my-role",
                      "realm_id": "${keycloak_realm.realm.id}"
                    }
        argumentDocs:
            client_id: '- (Optional) The client this protocol mapper should be attached to. Conflicts with client_scope_id. One of client_id or client_scope_id must be specified.'
            client_scope_id: '- (Optional) The client scope this protocol mapper should be attached to. Conflicts with client_id. One of client_id or client_scope_id must be specified.'
            name: '- (Required) The display name of this protocol mapper in the GUI.'
            realm_id: '- (Required) The realm this protocol mapper exists within.'
            role_id: '- (Required) The ID of the role to map to an access token.'
        importStatements: []
    keycloak_openid_script_protocol_mapper:
        subCategory: ""
        name: keycloak_openid_script_protocol_mapper
        title: keycloak_openid_script_protocol_mapper Resource
        examples:
            - name: script_mapper
              manifest: |-
                {
                  "claim_name": "foo",
                  "client_id": "${keycloak_openid_client.openid_client.id}",
                  "name": "script-mapper",
                  "realm_id": "${keycloak_realm.realm.id}",
                  "script": "exports = 'foo';"
                }
              references:
                client_id: keycloak_openid_client.openid_client.id
                realm_id: keycloak_realm.realm.id
              dependencies:
                keycloak_openid_client.openid_client: |-
                    {
                      "access_type": "CONFIDENTIAL",
                      "client_id": "client",
                      "enabled": true,
                      "name": "client",
                      "realm_id": "${keycloak_realm.realm.id}",
                      "valid_redirect_uris": [
                        "http://localhost:8080/openid-callback"
                      ]
                    }
                keycloak_realm.realm: |-
                    {
                      "enabled": true,
                      "realm": "my-realm"
                    }
            - name: script_mapper
              manifest: |-
                {
                  "claim_name": "foo",
                  "client_scope_id": "${keycloak_openid_client_scope.client_scope.id}",
                  "name": "script-mapper",
                  "realm_id": "${keycloak_realm.realm.id}",
                  "script": "exports = 'foo';"
                }
              references:
                client_scope_id: keycloak_openid_client_scope.client_scope.id
                realm_id: keycloak_realm.realm.id
              dependencies:
                keycloak_openid_client_scope.client_scope: |-
                    {
                      "name": "client-scope",
                      "realm_id": "${keycloak_realm.realm.id}"
                    }
                keycloak_realm.realm: |-
                    {
                      "enabled": true,
                      "realm": "my-realm"
                    }
        argumentDocs:
            add_to_access_token: '- (Optional) Indicates if the property should be added as a claim to the access token. Defaults to true.'
            add_to_id_token: '- (Optional) Indicates if the property should be added as a claim to the id token. Defaults to true.'
            add_to_userinfo: '- (Optional) Indicates if the property should be added as a claim to the UserInfo response body. Defaults to true.'
            claim_name: '- (Required) The name of the claim to insert into a token.'
            claim_value_type: '- (Optional) The claim type used when serializing JSON tokens. Can be one of String, JSON, long, int, or boolean. Defaults to String.'
            client_id: '- (Optional) The client this protocol mapper should be attached to. Conflicts with client_scope_id. One of client_id or client_scope_id must be specified.'
            client_scope_id: '- (Optional) The client scope this protocol mapper should be attached to. Conflicts with client_id. One of client_id or client_scope_id must be specified.'
            multivalued: '- (Optional) Indicates if attribute supports multiple values. If true, then the list of all values of this attribute will be set as claim. If false, then just first value will be set as claim. Defaults to false.'
            name: '- (Required) The display name of this protocol mapper in the GUI.'
            realm_id: '- (Required) The realm this protocol mapper exists within.'
            script: '- (Required) JavaScript code to compute the claim value.'
        importStatements: []
    keycloak_openid_user_attribute_protocol_mapper:
        subCategory: ""
        name: keycloak_openid_user_attribute_protocol_mapper
        title: keycloak_openid_user_attribute_protocol_mapper Resource
        examples:
            - name: user_attribute_mapper
              manifest: |-
                {
                  "claim_name": "bar",
                  "client_id": "${keycloak_openid_client.openid_client.id}",
                  "name": "user-attribute-mapper",
                  "realm_id": "${keycloak_realm.realm.id}",
                  "user_attribute": "foo"
                }
              references:
                client_id: keycloak_openid_client.openid_client.id
                realm_id: keycloak_realm.realm.id
              dependencies:
                keycloak_openid_client.openid_client: |-
                    {
                      "access_type": "CONFIDENTIAL",
                      "client_id": "client",
                      "enabled": true,
                      "name": "client",
                      "realm_id": "${keycloak_realm.realm.id}",
                      "valid_redirect_uris": [
                        "http://localhost:8080/openid-callback"
                      ]
                    }
                keycloak_realm.realm: |-
                    {
                      "enabled": true,
                      "realm": "my-realm"
                    }
            - name: user_attribute_mapper
              manifest: |-
                {
                  "claim_name": "bar",
                  "client_scope_id": "${keycloak_openid_client_scope.client_scope.id}",
                  "name": "user-attribute-mapper",
                  "realm_id": "${keycloak_realm.realm.id}",
                  "user_attribute": "foo"
                }
              references:
                client_scope_id: keycloak_openid_client_scope.client_scope.id
                realm_id: keycloak_realm.realm.id
              dependencies:
                keycloak_openid_client_scope.client_scope: |-
                    {
                      "name": "client-scope",
                      "realm_id": "${keycloak_realm.realm.id}"
                    }
                keycloak_realm.realm: |-
                    {
                      "enabled": true,
                      "realm": "my-realm"
                    }
        argumentDocs:
            add_to_access_token: '- (Optional) Indicates if the attribute should be added as a claim to the access token. Defaults to true.'
            add_to_id_token: '- (Optional) Indicates if the attribute should be added as a claim to the id token. Defaults to true.'
            add_to_userinfo: '- (Optional) Indicates if the attribute should be added as a claim to the UserInfo response body. Defaults to true.'
            aggregate_attributes: '- (Optional) Indicates whether this attribute is a single value or an array of values. Defaults to false.'
            claim_name: '- (Required) The name of the claim to insert into a token.'
            claim_value_type: '- (Optional) The claim type used when serializing JSON tokens. Can be one of String, JSON, long, int, or boolean. Defaults to String.'
            client_id: '- (Optional) The client this protocol mapper should be attached to. Conflicts with client_scope_id. One of client_id or client_scope_id must be specified.'
            client_scope_id: '- (Optional) The client scope this protocol mapper should be attached to. Conflicts with client_id. One of client_id or client_scope_id must be specified.'
            multivalued: '- (Optional) Indicates whether this attribute is a single value or an array of values. Defaults to false.'
            name: '- (Required) The display name of this protocol mapper in the GUI.'
            realm_id: '- (Required) The realm this protocol mapper exists within.'
            user_attribute: '- (Required) The custom user attribute to map a claim for.'
        importStatements: []
    keycloak_openid_user_client_role_protocol_mapper:
        subCategory: ""
        name: keycloak_openid_user_client_role_protocol_mapper
        title: keycloak_openid_user_client_role_protocol_mapper Resource
        examples:
            - name: user_client_role_mapper
              manifest: |-
                {
                  "claim_name": "foo",
                  "client_id": "${keycloak_openid_client.openid_client.id}",
                  "name": "user-client-role-mapper",
                  "realm_id": "${keycloak_realm.realm.id}"
                }
              references:
                client_id: keycloak_openid_client.openid_client.id
                realm_id: keycloak_realm.realm.id
              dependencies:
                keycloak_openid_client.openid_client: |-
                    {
                      "access_type": "CONFIDENTIAL",
                      "client_id": "client",
                      "enabled": true,
                      "name": "client",
                      "realm_id": "${keycloak_realm.realm.id}",
                      "valid_redirect_uris": [
                        "http://localhost:8080/openid-callback"
                      ]
                    }
                keycloak_realm.realm: |-
                    {
                      "enabled": true,
                      "realm": "my-realm"
                    }
            - name: user_client_role_mapper
              manifest: |-
                {
                  "claim_name": "foo",
                  "client_scope_id": "${keycloak_openid_client_scope.client_scope.id}",
                  "name": "user-client-role-mapper",
                  "realm_id": "${keycloak_realm.realm.id}"
                }
              references:
                client_scope_id: keycloak_openid_client_scope.client_scope.id
                realm_id: keycloak_realm.realm.id
              dependencies:
                keycloak_openid_client_scope.client_scope: |-
                    {
                      "name": "client-scope",
                      "realm_id": "${keycloak_realm.realm.id}"
                    }
                keycloak_realm.realm: |-
                    {
                      "enabled": true,
                      "realm": "my-realm"
                    }
        argumentDocs:
            add_to_access_token: '- (Optional) Indicates if the property should be added as a claim to the access token. Defaults to true.'
            add_to_id_token: '- (Optional) Indicates if the property should be added as a claim to the id token. Defaults to true.'
            add_to_userinfo: '- (Optional) Indicates if the property should be added as a claim to the UserInfo response body. Defaults to true.'
            claim_name: '- (Required) The name of the claim to insert into a token.'
            claim_value_type: '- (Optional) The claim type used when serializing JSON tokens. Can be one of String, JSON, long, int, or boolean. Defaults to String.'
            client_id: '- (Optional) The client this protocol mapper should be attached to. Conflicts with client_scope_id. One of client_id or client_scope_id must be specified.'
            client_id_for_role_mappings: '- (Optional) The Client ID for role mappings. Just client roles of this client will be added to the token. If this is unset, client roles of all clients will be added to the token.'
            client_role_prefix: '- (Optional) A prefix for each Client Role.'
            client_scope_id: '- (Optional) The client scope this protocol mapper should be attached to. Conflicts with client_id. One of client_id or client_scope_id must be specified.'
            multivalued: '- (Optional) Indicates if attribute supports multiple values. If true, then the list of all values of this attribute will be set as claim. If false, then just first value will be set as claim. Defaults to false.'
            name: '- (Required) The display name of this protocol mapper in the GUI.'
            realm_id: '- (Required) The realm this protocol mapper exists within.'
        importStatements: []
    keycloak_openid_user_property_protocol_mapper:
        subCategory: ""
        name: keycloak_openid_user_property_protocol_mapper
        title: keycloak_openid_user_property_protocol_mapper Resource
        examples:
            - name: user_property_mapper
              manifest: |-
                {
                  "claim_name": "email",
                  "client_id": "${keycloak_openid_client.openid_client.id}",
                  "name": "user-property-mapper",
                  "realm_id": "${keycloak_realm.realm.id}",
                  "user_property": "email"
                }
              references:
                client_id: keycloak_openid_client.openid_client.id
                realm_id: keycloak_realm.realm.id
              dependencies:
                keycloak_openid_client.openid_client: |-
                    {
                      "access_type": "CONFIDENTIAL",
                      "client_id": "client",
                      "enabled": true,
                      "name": "client",
                      "realm_id": "${keycloak_realm.realm.id}",
                      "valid_redirect_uris": [
                        "http://localhost:8080/openid-callback"
                      ]
                    }
                keycloak_realm.realm: |-
                    {
                      "enabled": true,
                      "realm": "my-realm"
                    }
            - name: user_property_mapper
              manifest: |-
                {
                  "claim_name": "email",
                  "client_scope_id": "${keycloak_openid_client_scope.client_scope.id}",
                  "name": "test-mapper",
                  "realm_id": "${keycloak_realm.realm.id}",
                  "user_property": "email"
                }
              references:
                client_scope_id: keycloak_openid_client_scope.client_scope.id
                realm_id: keycloak_realm.realm.id
              dependencies:
                keycloak_openid_client_scope.client_scope: |-
                    {
                      "name": "client-scope",
                      "realm_id": "${keycloak_realm.realm.id}"
                    }
                keycloak_realm.realm: |-
                    {
                      "enabled": true,
                      "realm": "my-realm"
                    }
        argumentDocs:
            add_to_access_token: '- (Optional) Indicates if the property should be added as a claim to the access token. Defaults to true.'
            add_to_id_token: '- (Optional) Indicates if the property should be added as a claim to the id token. Defaults to true.'
            add_to_userinfo: '- (Optional) Indicates if the property should be added as a claim to the UserInfo response body. Defaults to true.'
            claim_name: '- (Required) The name of the claim to insert into a token.'
            claim_value_type: '- (Optional) The claim type used when serializing JSON tokens. Can be one of String, JSON, long, int, or boolean. Defaults to String.'
            client_id: '- (Optional) The client this protocol mapper should be attached to. Conflicts with client_scope_id. One of client_id or client_scope_id must be specified.'
            client_scope_id: '- (Optional) The client scope this protocol mapper should be attached to. Conflicts with client_id. One of client_id or client_scope_id must be specified. client_scope_id - (Required if client_id is not specified) The client scope this protocol mapper is attached to.'
            name: '- (Required) The display name of this protocol mapper in the GUI.'
            realm_id: '- (Required) The realm this protocol mapper exists within.'
            user_property: '- (Required) The built in user property (such as email) to map a claim for.'
        importStatements: []
    keycloak_openid_user_realm_role_protocol_mapper:
        subCategory: ""
        name: keycloak_openid_user_realm_role_protocol_mapper
        title: keycloak_openid_user_realm_role_protocol_mapper Resource
        examples:
            - name: user_realm_role_mapper
              manifest: |-
                {
                  "claim_name": "foo",
                  "client_id": "${keycloak_openid_client.openid_client.id}",
                  "name": "user-realm-role-mapper",
                  "realm_id": "${keycloak_realm.realm.id}"
                }
              references:
                client_id: keycloak_openid_client.openid_client.id
                realm_id: keycloak_realm.realm.id
              dependencies:
                keycloak_openid_client.openid_client: |-
                    {
                      "access_type": "CONFIDENTIAL",
                      "client_id": "client",
                      "enabled": true,
                      "name": "client",
                      "realm_id": "${keycloak_realm.realm.id}",
                      "valid_redirect_uris": [
                        "http://localhost:8080/openid-callback"
                      ]
                    }
                keycloak_realm.realm: |-
                    {
                      "enabled": true,
                      "realm": "my-realm"
                    }
            - name: user_realm_role_mapper
              manifest: |-
                {
                  "claim_name": "foo",
                  "client_scope_id": "${keycloak_openid_client_scope.client_scope.id}",
                  "name": "user-realm-role-mapper",
                  "realm_id": "${keycloak_realm.realm.id}"
                }
              references:
                client_scope_id: keycloak_openid_client_scope.client_scope.id
                realm_id: keycloak_realm.realm.id
              dependencies:
                keycloak_openid_client_scope.client_scope: |-
                    {
                      "name": "test-client-scope",
                      "realm_id": "${keycloak_realm.realm.id}"
                    }
                keycloak_realm.realm: |-
                    {
                      "enabled": true,
                      "realm": "my-realm"
                    }
        argumentDocs:
            add_to_access_token: '- (Optional) Indicates if the property should be added as a claim to the access token. Defaults to true.'
            add_to_id_token: '- (Optional) Indicates if the property should be added as a claim to the id token. Defaults to true.'
            add_to_userinfo: '- (Optional) Indicates if the property should be added as a claim to the UserInfo response body. Defaults to true.'
            claim_name: '- (Required) The name of the claim to insert into a token.'
            claim_value_type: '- (Optional) The claim type used when serializing JSON tokens. Can be one of String, JSON, long, int, or boolean. Defaults to String.'
            client_id: '- (Optional) The client this protocol mapper should be attached to. Conflicts with client_scope_id. One of client_id or client_scope_id must be specified.'
            client_scope_id: '- (Optional) The client scope this protocol mapper should be attached to. Conflicts with client_id. One of client_id or client_scope_id must be specified.'
            multivalued: '- (Optional) Indicates if attribute supports multiple values. If true, then the list of all values of this attribute will be set as claim. If false, then just first value will be set as claim. Defaults to false.'
            name: '- (Required) The display name of this protocol mapper in the GUI.'
            realm_id: '- (Required) The realm this protocol mapper exists within.'
            realm_role_prefix: '- (Optional) A prefix for each Realm Role.'
        importStatements: []
    keycloak_openid_user_session_note_protocol_mapper:
        subCategory: ""
        name: keycloak_openid_user_session_note_protocol_mapper
        title: keycloak_openid_user_session_note_protocol_mapper Resource
        examples:
            - name: user_session_note_mapper
              manifest: |-
                {
                  "claim_name": "foo",
                  "claim_value_type": "String",
                  "client_id": "${keycloak_openid_client.openid_client.id}",
                  "name": "user-session-note-mapper",
                  "realm_id": "${keycloak_realm.realm.id}",
                  "session_note": "bar"
                }
              references:
                client_id: keycloak_openid_client.openid_client.id
                realm_id: keycloak_realm.realm.id
              dependencies:
                keycloak_openid_client.openid_client: |-
                    {
                      "access_type": "CONFIDENTIAL",
                      "client_id": "client",
                      "enabled": true,
                      "name": "client",
                      "realm_id": "${keycloak_realm.realm.id}",
                      "valid_redirect_uris": [
                        "http://localhost:8080/openid-callback"
                      ]
                    }
                keycloak_realm.realm: |-
                    {
                      "enabled": true,
                      "realm": "my-realm"
                    }
            - name: user_session_note_mapper
              manifest: |-
                {
                  "claim_name": "foo",
                  "claim_value_type": "String",
                  "client_scope_id": "${keycloak_openid_client_scope.client_scope.id}",
                  "name": "user-session-note-mapper",
                  "realm_id": "${keycloak_realm.realm.id}",
                  "session_note": "bar"
                }
              references:
                client_scope_id: keycloak_openid_client_scope.client_scope.id
                realm_id: keycloak_realm.realm.id
              dependencies:
                keycloak_openid_client_scope.client_scope: |-
                    {
                      "name": "client-scope",
                      "realm_id": "${keycloak_realm.realm.id}"
                    }
                keycloak_realm.realm: |-
                    {
                      "enabled": true,
                      "realm": "my-realm"
                    }
        argumentDocs:
            add_to_access_token: '- (Optional) Indicates if the property should be added as a claim to the access token. Defaults to true.'
            add_to_id_token: '- (Optional) Indicates if the property should be added as a claim to the id token. Defaults to true.'
            claim_name: '- (Required) The name of the claim to insert into a token.'
            claim_value_type: '- (Optional) The claim type used when serializing JSON tokens. Can be one of String, JSON, long, int, or boolean. Defaults to String.'
            client_id: '- (Optional) The client this protocol mapper should be attached to. Conflicts with client_scope_id. One of client_id or client_scope_id must be specified.'
            client_scope_id: '- (Optional) The client scope this protocol mapper should be attached to. Conflicts with client_id. One of client_id or client_scope_id must be specified.'
            name: '- (Required) The display name of this protocol mapper in the GUI.'
            realm_id: '- (Required) The realm this protocol mapper exists within.'
            session_note: '- (Optional) String value being the name of stored user session note within the UserSessionModel.note map.'
            session_note_label: '- (Optional) Deprecated Use session_note instead.'
        importStatements: []
    keycloak_realm:
        subCategory: ""
        name: keycloak_realm
        title: keycloak_realm Resource
        examples:
            - name: realm
              manifest: |-
                {
                  "access_code_lifespan": "1h",
                  "attributes": {
                    "mycustomAttribute": "myCustomValue"
                  },
                  "display_name": "my realm",
                  "display_name_html": "\u003cb\u003emy realm\u003c/b\u003e",
                  "enabled": true,
                  "internationalization": [
                    {
                      "default_locale": "en",
                      "supported_locales": [
                        "en",
                        "de",
                        "es"
                      ]
                    }
                  ],
                  "login_theme": "base",
                  "password_policy": "upperCase(1) and length(8) and forceExpiredPasswordChange(365) and notUsername",
                  "realm": "my-realm",
                  "security_defenses": [
                    {
                      "brute_force_detection": [
                        {
                          "failure_reset_time_seconds": 43200,
                          "max_failure_wait_seconds": 900,
                          "max_login_failures": 30,
                          "minimum_quick_login_wait_seconds": 60,
                          "permanent_lockout": false,
                          "quick_login_check_milli_seconds": 1000,
                          "wait_increment_seconds": 60
                        }
                      ],
                      "headers": [
                        {
                          "content_security_policy": "frame-src 'self'; frame-ancestors 'self'; object-src 'none';",
                          "content_security_policy_report_only": "",
                          "strict_transport_security": "max-age=31536000; includeSubDomains",
                          "x_content_type_options": "nosniff",
                          "x_frame_options": "DENY",
                          "x_robots_tag": "none",
                          "x_xss_protection": "1; mode=block"
                        }
                      ]
                    }
                  ],
                  "smtp_server": [
                    {
                      "auth": [
                        {
                          "password": "password",
                          "username": "tom"
                        }
                      ],
                      "from": "example@example.com",
                      "host": "smtp.example.com"
                    }
                  ],
                  "ssl_required": "external",
                  "web_authn_policy": [
                    {
                      "relying_party_entity_name": "Example",
                      "relying_party_id": "keycloak.example.com",
                      "signature_algorithms": [
                        "ES256",
                        "RS256"
                      ]
                    }
                  ]
                }
        argumentDocs:
            acceptable_aaguids: '- (Optional) A set of AAGUIDs for which an authenticator can be registered.'
            access_code_lifespan: '- (Optional) The maximum amount of time a client has to finish the authorization code flow.'
            access_code_lifespan_login: '- (Optional) The maximum amount of time a user is permitted to stay on the login page before the authentication process must be restarted.'
            access_code_lifespan_user_action: '- (Optional) The maximum amount of time a user has to complete login related actions, such as updating a password.'
            access_token_lifespan: '- (Optional) The amount of time an access token can be used before it expires.'
            access_token_lifespan_for_implicit_flow: '- (Optional) The amount of time an access token issued with the OpenID Connect Implicit Flow can be used before it expires.'
            account_theme: '- (Optional) Used for account management pages.'
            action_token_generated_by_admin_lifespan: '- (Optional) The maximum time a user has to use an admin-generated permit before it expires.'
            action_token_generated_by_user_lifespan: '- (Optional) The maximum time a user has to use a user-generated permit before it expires.'
            admin_theme: '- (Optional) Used for the admin console.'
            attestation_conveyance_preference: '- (Optional) The preference of how to generate a WebAuthn attestation statement. Valid options are not specified, none, indirect, direct, or enterprise. Defaults to not specified.'
            attributes: '- (Optional) A map of custom attributes to add to the realm.'
            authenticator_attachment: '- (Optional) The acceptable attachment pattern for the WebAuthn authenticator. Valid options are not specified, platform, or cross-platform. Defaults to not specified.'
            avoid_same_authenticator_register: '- (Optional) When true, Keycloak will avoid registering the authenticator for WebAuthn if it has already been registered. Defaults to false.'
            browser_flow: '- (Optional) The desired flow for browser authentication. Defaults to browser.'
            brute_force_detection.failure_reset_time_seconds: '- (Optional) When will failure count be reset?'
            'brute_force_detection.max_failure_wait_seconds ': '- (Optional) Max. time a user will be locked out.'
            brute_force_detection.max_login_failures: '- (Optional) How many failures before wait is triggered.'
            brute_force_detection.minimum_quick_login_wait_seconds: '- (Optional) How long to wait after a quick login failure.'
            brute_force_detection.permanent_lockout: '- (Optional) When true, this will lock the user permanently when the user exceeds the maximum login failures.'
            brute_force_detection.quick_login_check_milli_seconds: '- (Optional) Configures the amount of time, in milliseconds, for consecutive failures to lock a user out.'
            brute_force_detection.wait_increment_seconds: '- (Optional) This represents the amount of time a user should be locked out when the login failure threshold has been met.'
            client_authentication_flow: '- (Optional) The desired flow for client authentication. Defaults to clients.'
            client_session_idle_timeout: '- (Optional) The amount of time a session can be idle before it expires. Users can override it for individual clients.'
            client_session_max_lifespan: '- (Optional) The maximum amount of time before a session expires regardless of activity. Users can override it for individual clients.'
            create_timeout: '- (Optional) The timeout value for creating a user''s public key credential in seconds. When set to 0, this timeout option is not adapted. Defaults to 0.'
            default_default_client_scopes: '- (Optional) A list of default default client scopes to be used for client definitions. Defaults to [] or keycloak''s built-in default default client-scopes.'
            default_optional_client_scopes: '- (Optional) A list of default optional client scopes to be used for client definitions. Defaults to [] or keycloak''s built-in default optional client-scopes.'
            default_signature_algorithm: '- (Optional) Default algorithm used to sign tokens for the realm.'
            direct_grant_flow: '- (Optional) The desired flow for direct access authentication. Defaults to direct grant.'
            display_name: '- (Optional) The display name for the realm that is shown when logging in to the admin console.'
            display_name_html: '- (Optional) The display name for the realm that is rendered as HTML on the screen when logging in to the admin console.'
            docker_authentication_flow: '- (Optional) The desired flow for Docker authentication. Defaults to docker auth.'
            duplicate_emails_allowed: '- (Optional) When true, multiple users will be allowed to have the same email address. This argument must be set to false if login_with_email_allowed is set to true.'
            edit_username_allowed: '- (Optional) When true, the username field is editable.'
            email_theme: '- (Optional) Used for emails that are sent by Keycloak.'
            enabled: '- (Optional) When false, users and clients will not be able to access this realm. Defaults to true.'
            headers.content_security_policy: '- (Optional) Sets the Content Security Policy, which can be used for prevent pages from being included by non-origin iframes. More information can be found in the W3C-CSP Abstract.'
            headers.content_security_policy_report_only: '- (Optional) Used for testing Content Security Policies.'
            headers.referrer_policy: '- (Optional) The Referrer-Policy HTTP header controls how much referrer information (sent with the Referer header) should be included with requests.'
            headers.strict_transport_security: '- (Optional) The Script-Transport-Security HTTP header tells browsers to always use HTTPS.'
            headers.x_content_type_options: '- (Optional) Sets the X-Content-Type-Options, which can be used for prevent MIME-sniffing a response away from the declared content-type'
            headers.x_frame_options: '- (Optional) Sets the x-frame-option, which can be used to prevent pages from being included by non-origin iframes. More information can be found in the RFC7034'
            headers.x_robots_tag: '- (Optional) Prevent pages from appearing in search engines.'
            headers.x_xss_protection: '- (Optional) This header configures the Cross-site scripting (XSS) filter in your browser.'
            internal_id: '- (Optional) When specified, this will be used as the realm''s internal ID within Keycloak. When not specified, the realm''s internal ID will be set to the realm''s name.'
            internationalization.default_locale: '- (Required) The locale to use by default. This locale code must be present within the supported_locales list.'
            internationalization.supported_locales: '- (Required) A list of ISO 639-1 locale codes that the realm should support.'
            login_theme: '- (Optional) Used for the login, forgot password, and registration pages.'
            login_with_email_allowed: '- (Optional) When true, users may log in with their email address.'
            oauth2_device_code_lifespan: '- (Optional) The maximum amount of time a client has to finish the device code flow before it expires.'
            oauth2_device_polling_interval: '- (Optional) The minimum amount of time in seconds that the client should wait between polling requests to the token endpoint.'
            offline_session_idle_timeout: '- (Optional) The amount of time an offline session can be idle before it expires.'
            offline_session_max_lifespan: '- (Optional) The maximum amount of time before an offline session expires regardless of activity.'
            offline_session_max_lifespan_enabled: '- (Optional) Enable offline_session_max_lifespan.'
            otp_policy.algorithm: '- (Optional) What hashing algorithm should be used to generate the OTP, Valid options are HmacSHA1,HmacSHA256 and HmacSHA512. Defaults to HmacSHA1.'
            otp_policy.digits: '- (Optional) How many digits the OTP have. Defaults to 6.'
            otp_policy.initial_counter: '- (Optional) What should the initial counter value be. Defaults to 2.'
            otp_policy.look_ahead_window: '- (Optional) How far ahead should the server look just in case the token generator and server are out of time sync or counter sync. Defaults to 1.'
            otp_policy.period: '- (Optional) How many seconds should an OTP token be valid. Defaults to 30.'
            otp_policy.type: '- (Optional) One Time Password Type, supported Values are totp for Time-Based One Time Password and hotp for Counter Based. Defaults to totp.'
            password: '- (Required) The SMTP server password.'
            password_policy: '- (Optional) The password policy for users within the realm.'
            realm: '- (Required) The name of the realm. This is unique across Keycloak. This will also be used as the realm''s internal ID within Keycloak.'
            refresh_token_max_reuse: '- (Optional) Maximum number of times a refresh token can be reused before they are revoked. If unspecified and ''revoke_refresh_token'' is enabled the default value is 0 and refresh tokens can not be reused.'
            registration_allowed: '- (Optional) When true, user registration will be enabled, and a link for registration will be displayed on the login page.'
            registration_email_as_username: '- (Optional) When true, the user''s email will be used as their username during registration.'
            registration_flow: '- (Optional) The desired flow for user registration. Defaults to registration.'
            relying_party_entity_name: '- (Optional) A human readable server name for the WebAuthn Relying Party. Defaults to keycloak.'
            relying_party_id: '- (Optional) The WebAuthn relying party ID.'
            remember_me: '- (Optional) When true, a "remember me" checkbox will be displayed on the login page, and the user''s session will not expire between browser restarts.'
            require_resident_key: '- (Optional) Specifies whether or not a public key should be created to represent the resident key. Valid options are not specified, Yes, or No. Defaults to not specified.'
            reset_credentials_flow: '- (Optional) The desired flow to use when a user attempts to reset their credentials. Defaults to reset credentials.'
            reset_password_allowed: '- (Optional) When true, a "forgot password" link will be displayed on the login page.'
            revoke_refresh_token: '- (Optional) If enabled a refresh token can only be used number of times specified in ''refresh_token_max_reuse'' before they are revoked. If unspecified, refresh tokens can be reused.'
            signature_algorithms: '- (Optional) A set of signature algorithms that should be used for the authentication assertion. Valid options at the time these docs were written are ES256, ES384, ES512, RS256, RS384, RS512, and RS1.'
            smtp_server.auth: '- (Optional) Enables authentication to the SMTP server.  This block supports the following arguments:'
            smtp_server.envelope_from: '- (Optional) The email address uses for bounces.'
            smtp_server.from: '- (Required) The email address for the sender.'
            smtp_server.from_display_name: '- (Optional) The display name of the sender email address.'
            smtp_server.host: '- (Required) The host of the SMTP server.'
            smtp_server.port: '- (Optional) The port of the SMTP server (defaults to 25).'
            smtp_server.reply_to: '- (Optional) The "reply to" email address.'
            smtp_server.reply_to_display_name: '- (Optional) The display name of the "reply to" email address.'
            smtp_server.ssl: '- (Optional) When true, enables SSL. Defaults to false.'
            smtp_server.starttls: '- (Optional) When true, enables StartTLS. Defaults to false.'
            ssl_required: '- (Optional) Can be one of following values: ''none, ''external'' or ''all'''
            sso_session_idle_timeout: '- (Optional) The amount of time a session can be idle before it expires.'
            sso_session_idle_timeout_remember_me: '- (Optional) Similar to sso_session_idle_timeout, but used when a user clicks "Remember Me". If not set, Keycloak will default to the value of sso_session_idle_timeout.'
            sso_session_max_lifespan: '- (Optional) The maximum amount of time before a session expires regardless of activity.'
            sso_session_max_lifespan_remember_me: '- (Optional) Similar to sso_session_max_lifespan, but used when a user clicks "Remember Me". If not set, Keycloak will default to the value of sso_session_max_lifespan.'
            user_managed_access: '- (Optional) When true, users are allowed to manage their own resources. Defaults to false.'
            user_verification_requirement: '- (Optional) Specifies the policy for verifying a user logging in via WebAuthn. Valid options are not specified, required, preferred, or discouraged. Defaults to not specified.'
            username: '- (Required) The SMTP server username.'
            verify_email: '- (Optional) When true, users are required to verify their email address after registration and after email address changes.'
            web_authn_passwordless_policy: '- (Optional) Configuration for WebAuthn Passwordless Policy authentication.'
            web_authn_policy: '- (Optional) Configuration for WebAuthn Policy authentication.'
        importStatements: []
    keycloak_realm_events:
        subCategory: ""
        name: keycloak_realm_events
        title: keycloak_realm_events Resource
        examples:
            - name: realm_events
              manifest: |-
                {
                  "admin_events_details_enabled": true,
                  "admin_events_enabled": true,
                  "enabled_event_types": [
                    "LOGIN",
                    "LOGOUT"
                  ],
                  "events_enabled": true,
                  "events_expiration": 3600,
                  "events_listeners": [
                    "jboss-logging"
                  ],
                  "realm_id": "${keycloak_realm.realm.id}"
                }
              references:
                realm_id: keycloak_realm.realm.id
              dependencies:
                keycloak_realm.realm: |-
                    {
                      "enabled": true,
                      "realm": "my-realm"
                    }
        argumentDocs:
            admin_events_details_enabled: '- (Optional) When true, saved admin events will included detailed information for create/update requests. Defaults to false.'
            admin_events_enabled: '- (Optional) When true, admin events are saved to the database, making them available through the admin console. Defaults to false.'
            enabled_event_types: '- (Optional) The event types that will be saved to the database. Omitting this field enables all event types. Defaults to [] or all event types.'
            events_enabled: '- (Optional) When true, events from enabled_event_types are saved to the database, making them available through the admin console. Defaults to false.'
            events_expiration: '- (Optional) The amount of time in seconds events will be saved in the database. Defaults to 0 or never.'
            events_listeners: '- (Optional) The event listeners that events should be sent to. Defaults to [] or none. Note that new realms enable the jboss-logging listener by default, and this resource will remove that unless it is specified.'
            realm_id: '- (Required) The name of the realm the event settings apply to.'
        importStatements: []
    keycloak_realm_keystore_aes_generated:
        subCategory: ""
        name: keycloak_realm_keystore_aes_generated
        title: keycloak_realm_keystore_aes_generated Resources
        examples:
            - name: keystore_aes_generated
              manifest: |-
                {
                  "active": true,
                  "enabled": true,
                  "name": "my-aes-generated-key",
                  "priority": 100,
                  "realm_id": "${keycloak_realm.realm.id}",
                  "secret_size": 16
                }
              references:
                realm_id: keycloak_realm.realm.id
              dependencies:
                keycloak_realm.realm: |-
                    {
                      "realm": "my-realm"
                    }
        argumentDocs:
            active: '- (Optional) When false, key in not used for signing. Defaults to true.'
            enabled: '- (Optional) When false, key is not accessible in this realm. Defaults to true.'
            name: '- (Required) Display name of provider when linked in admin console.'
            priority: '- (Optional) Priority for the provider. Defaults to 0'
            realm_id: '- (Required) The realm this keystore exists in.'
            secret_size: '- (Optional) Size in bytes for the generated AES Key. Size 16 is for AES-128, Size 24 for AES-192 and Size 32 for AES-256. WARN: Bigger keys then 128 bits are not allowed on some JDK implementations. Defaults to 16.'
        importStatements: []
    keycloak_realm_keystore_ecdsa_generated:
        subCategory: ""
        name: keycloak_realm_keystore_ecdsa_generated
        title: keycloak_realm_keystore_ecdsa_generated Resources
        examples:
            - name: keystore_ecdsa_generated
              manifest: |-
                {
                  "active": true,
                  "elliptic_curve_key": "P-256",
                  "enabled": true,
                  "name": "my-ecdsa-generated-key",
                  "priority": 100,
                  "realm_id": "${keycloak_realm.realm.id}"
                }
              references:
                realm_id: keycloak_realm.realm.id
              dependencies:
                keycloak_realm.realm: |-
                    {
                      "realm": "my-realm"
                    }
        argumentDocs:
            active: '- (Optional) When false, key in not used for signing. Defaults to true.'
            elliptic_curve_key: '- (Optional) Elliptic Curve used in ECDSA. Defaults to P-256.'
            enabled: '- (Optional) When false, key is not accessible in this realm. Defaults to true.'
            name: '- (Required) Display name of provider when linked in admin console.'
            priority: '- (Optional) Priority for the provider. Defaults to 0'
            realm_id: '- (Required) The realm this keystore exists in.'
        importStatements: []
    keycloak_realm_keystore_hmac_generated:
        subCategory: ""
        name: keycloak_realm_keystore_hmac_generated
        title: keycloak_realm_keystore_hmac_generated Resources
        examples:
            - name: keystore_hmac_generated
              manifest: |-
                {
                  "active": true,
                  "algorithm": "HS256",
                  "enabled": true,
                  "name": "my-hmac-generated-key",
                  "priority": 100,
                  "realm_id": "${keycloak_realm.realm.id}",
                  "secret_size": 64
                }
              references:
                realm_id: keycloak_realm.realm.id
              dependencies:
                keycloak_realm.realm: |-
                    {
                      "realm": "my-realm"
                    }
        argumentDocs:
            active: '- (Optional) When false, key in not used for signing. Defaults to true.'
            algorithm: '- (Optional) Intended algorithm for the key. Defaults to HS256'
            enabled: '- (Optional) When false, key is not accessible in this realm. Defaults to true.'
            name: '- (Required) Display name of provider when linked in admin console.'
            priority: '- (Optional) Priority for the provider. Defaults to 0'
            realm_id: '- (Required) The realm this keystore exists in.'
            secret_size: '- (Optional) Size in bytes for the generated secret. Defaults to 64.'
        importStatements: []
    keycloak_realm_keystore_java_keystore:
        subCategory: ""
        name: keycloak_realm_keystore_java_keystore
        title: keycloak_realm_keystore_java_keystore Resources
        examples:
            - name: java_keystore
              manifest: |-
                {
                  "active": true,
                  "algorithm": "RS256",
                  "enabled": true,
                  "key_alias": "\u003calias for the private key\u003e",
                  "key_password": "\u003cpassword for the private key\u003e",
                  "keystore": "\u003cpath to your keystore\u003e",
                  "keystore_password": "\u003cpassword for keystore\u003e",
                  "name": "my-java-keystore",
                  "priority": 100,
                  "realm_id": "${keycloak_realm.realm.id}"
                }
              references:
                realm_id: keycloak_realm.realm.id
              dependencies:
                keycloak_realm.realm: |-
                    {
                      "realm": "my-realm"
                    }
        argumentDocs:
            active: '- (Optional) When false, key in not used for signing. Defaults to true.'
            algorithm: '- (Optional) Intended algorithm for the key. Defaults to RS256'
            enabled: '- (Optional) When false, key is not accessible in this realm. Defaults to true.'
            key_alias: '- (Required) Alias for the private key.'
            key_password: '- (Required) Password for the private key.'
            keystore: '- (Required) Path to keys file on keycloak instance.'
            keystore_password: '- (Required) Password for the keys.'
            name: '- (Required) Display name of provider when linked in admin console.'
            priority: '- (Optional) Priority for the provider. Defaults to 0'
            realm_id: '- (Required) The realm this keystore exists in.'
        importStatements: []
    keycloak_realm_keystore_rsa:
        subCategory: ""
        name: keycloak_realm_keystore_rsa
        title: keycloak_realm_keystore_rsa Resources
        examples:
            - name: keystore_rsa
              manifest: |-
                {
                  "active": true,
                  "algorithm": "RS256",
                  "certificate": "\u003cyour certificate\u003e",
                  "enabled": true,
                  "keystore_size": 2048,
                  "name": "my-rsa-key",
                  "priority": 100,
                  "private_key": "\u003cyour rsa private key\u003e",
                  "provider_id": "rsa",
                  "realm_id": "${keycloak_realm.realm.id}"
                }
              references:
                realm_id: keycloak_realm.realm.id
              dependencies:
                keycloak_realm.realm: |-
                    {
                      "realm": "my-realm"
                    }
        argumentDocs:
            active: '- (Optional) When false, key in not used for signing. Defaults to true.'
            algorithm: '- (Optional) Intended algorithm for the key. Defaults to RS256. Use RSA-OAEP for encryption keys'
            certificate: '- (Required) X509 Certificate encoded in PEM format.'
            enabled: '- (Optional) When false, key is not accessible in this realm. Defaults to true.'
            keystore_size: '- (Optional) Size for the generated keys. Defaults to 2048.'
            name: '- (Required) Display name of provider when linked in admin console.'
            priority: '- (Optional) Priority for the provider. Defaults to 0'
            private_key: '- (Required) Private RSA Key encoded in PEM format.'
            provider_id: '- (Optional) Use rsa for signing keys, rsa-enc for encryption keys'
            realm_id: '- (Required) The realm this keystore exists in.'
        importStatements: []
    keycloak_realm_keystore_rsa_generated:
        subCategory: ""
        name: keycloak_realm_keystore_rsa_generated
        title: keycloak_realm_keystore_rsa_generated Resources
        examples:
            - name: keystore_rsa_generated
              manifest: |-
                {
                  "active": true,
                  "algorithm": "RS256",
                  "enabled": true,
                  "key_size": 2048,
                  "name": "my-rsa-generated-key",
                  "priority": 100,
                  "realm_id": "${keycloak_realm.realm.id}"
                }
              references:
                realm_id: keycloak_realm.realm.id
              dependencies:
                keycloak_realm.realm: |-
                    {
                      "realm": "my-realm"
                    }
        argumentDocs:
            active: '- (Optional) When false, key in not used for signing. Defaults to true.'
            algorithm: '- (Optional) Intended algorithm for the key. Defaults to RS256'
            enabled: '- (Optional) When false, key is not accessible in this realm. Defaults to true.'
            key_size: '- (Optional) Size for the generated keys. Defaults to 2048.'
            name: '- (Required) Display name of provider when linked in admin console.'
            priority: '- (Optional) Priority for the provider. Defaults to 0'
            realm_id: '- (Required) The realm this keystore exists in.'
        importStatements: []
    keycloak_realm_user_profile:
        subCategory: ""
        name: keycloak_realm_user_profile
        title: keycloak_realm_user_profile Resource
        examples:
            - name: userprofile
              manifest: |-
                {
                  "attribute": [
                    {
                      "annotations": {
                        "foo": "bar"
                      },
                      "display_name": "Field 1",
                      "enabled_when_scope": [
                        "offline_access"
                      ],
                      "group": "group1",
                      "name": "field1",
                      "permissions": [
                        {
                          "edit": [
                            "admin",
                            "user"
                          ],
                          "view": [
                            "admin",
                            "user"
                          ]
                        }
                      ],
                      "required_for_roles": [
                        "user"
                      ],
                      "required_for_scopes": [
                        "offline_access"
                      ],
                      "validator": [
                        {
                          "name": "person-name-prohibited-characters"
                        },
                        {
                          "config": {
                            "error-message": "Nope",
                            "pattern": "^[a-z]+$"
                          },
                          "name": "pattern"
                        }
                      ]
                    },
                    {
                      "annotations": {
                        "foo": "${jsonencode ( {\"key\": \"val\" } )}"
                      },
                      "name": "field2",
                      "validator": [
                        {
                          "config": {
                            "options": "${jsonencode ( [ \"opt1\" ])}"
                          },
                          "name": "options"
                        }
                      ]
                    }
                  ],
                  "group": [
                    {
                      "annotations": {
                        "foo": "bar",
                        "foo2": "${jsonencode ( { \"key\": \"val\" } )}"
                      },
                      "display_description": "A first group",
                      "display_header": "Group 1",
                      "name": "group1"
                    },
                    {
                      "name": "group2"
                    }
                  ],
                  "realm_id": "${keycloak_realm.my_realm.id}"
                }
              references:
                realm_id: keycloak_realm.my_realm.id
              dependencies:
                keycloak_realm.realm: |-
                    {
                      "attributes": {
                        "userProfileEnabled": true
                      },
                      "realm": "my-realm"
                    }
        argumentDocs:
            --features=preview: or --features=declarative-user-profile
            annotations: '- (Optional) A map of annotations for the attribute. Values can be a String or a json object.'
            attribute: '- (Optional) An ordered list of attributes.'
            config: '- (Optional) A map defining the configuration of the validator. Values can be a String or a json object.'
            display_description: '- (Optional) The display description of the group.'
            display_header: '- (Optional) The display header of the group.'
            display_name: '- (Optional) The display name of the attribute.'
            edit: '- (Optional) A list of profiles that will be able to edit the attribute. One of admin, user.'
            enabled_when_scope: '- (Optional) A list of scopes. The attribute will only be enabled when these scopes are requested by clients.'
            group: '- (Optional) A list of groups.'
            name: '- (Required) The name of the attribute.'
            permissions: '- (Optional) The permissions configuration information.'
            realm_id: '- (Required) The ID of the realm the user profile applies to.'
            required_for_roles: '- (Optional) A list of roles for which the attribute will be required.'
            required_for_scopes: '- (Optional) A list of scopes for which the attribute will be required.'
            validator: '- (Optional) A list of validators for the attribute.'
            view: '- (Optional) A list of profiles that will be able to view the attribute. One of admin, user.'
        importStatements: []
    keycloak_required_action:
        subCategory: ""
        name: keycloak_required_action
        title: keycloak_required_action Resource
        examples:
            - name: required_action
              manifest: |-
                {
                  "alias": "webauthn-register",
                  "enabled": true,
                  "name": "Webauthn Register",
                  "realm_id": "${keycloak_realm.realm.realm}"
                }
              references:
                realm_id: keycloak_realm.realm.realm
              dependencies:
                keycloak_realm.realm: |-
                    {
                      "enabled": true,
                      "realm": "my-realm"
                    }
        argumentDocs:
            alias: '- (Required) The alias of the action to attach as a required action.'
            default_action: '- (Optional) When true, the required action is set as the default action for new users. Defaults to false.'
            enabled: '- (Optional) When false, the required action is not enabled for new users. Defaults to false.'
            name: '- (Optional) The name of the required action.'
            priority: '- (Optional) The priority of the required action.'
            realm_id: '- (Required) The realm the required action exists in.'
        importStatements: []
    keycloak_role:
        subCategory: ""
        name: keycloak_role
        title: keycloak_role Resource
        examples:
            - name: realm_role
              manifest: |-
                {
                  "attributes": {
                    "key": "value",
                    "multivalue": "value1##value2"
                  },
                  "description": "My Realm Role",
                  "name": "my-realm-role",
                  "realm_id": "${keycloak_realm.realm.id}"
                }
              references:
                realm_id: keycloak_realm.realm.id
              dependencies:
                keycloak_realm.realm: |-
                    {
                      "enabled": true,
                      "realm": "my-realm"
                    }
            - name: client_role
              manifest: |-
                {
                  "attributes": {
                    "key": "value"
                  },
                  "client_id": "${keycloak_client.openid_client.id}",
                  "description": "My Client Role",
                  "name": "my-client-role",
                  "realm_id": "${keycloak_realm.realm.id}"
                }
              references:
                client_id: keycloak_client.openid_client.id
                realm_id: keycloak_realm.realm.id
              dependencies:
                keycloak_openid_client.openid_client: |-
                    {
                      "access_type": "CONFIDENTIAL",
                      "client_id": "client",
                      "enabled": true,
                      "name": "client",
                      "realm_id": "${keycloak_realm.realm.id}",
                      "valid_redirect_uris": [
                        "http://localhost:8080/openid-callback"
                      ]
                    }
                keycloak_realm.realm: |-
                    {
                      "enabled": true,
                      "realm": "my-realm"
                    }
            - name: create_role
              manifest: |-
                {
                  "attributes": {
                    "key": "value"
                  },
                  "name": "create",
                  "realm_id": "${keycloak_realm.realm.id}"
                }
              references:
                realm_id: keycloak_realm.realm.id
              dependencies:
                keycloak_openid_client.openid_client: |-
                    {
                      "access_type": "CONFIDENTIAL",
                      "client_id": "client",
                      "enabled": true,
                      "name": "client",
                      "realm_id": "${keycloak_realm.realm.id}",
                      "valid_redirect_uris": [
                        "http://localhost:8080/openid-callback"
                      ]
                    }
                keycloak_realm.realm: |-
                    {
                      "enabled": true,
                      "realm": "my-realm"
                    }
            - name: read_role
              manifest: |-
                {
                  "attributes": {
                    "key": "value"
                  },
                  "name": "read",
                  "realm_id": "${keycloak_realm.realm.id}"
                }
              references:
                realm_id: keycloak_realm.realm.id
              dependencies:
                keycloak_openid_client.openid_client: |-
                    {
                      "access_type": "CONFIDENTIAL",
                      "client_id": "client",
                      "enabled": true,
                      "name": "client",
                      "realm_id": "${keycloak_realm.realm.id}",
                      "valid_redirect_uris": [
                        "http://localhost:8080/openid-callback"
                      ]
                    }
                keycloak_realm.realm: |-
                    {
                      "enabled": true,
                      "realm": "my-realm"
                    }
            - name: update_role
              manifest: |-
                {
                  "attributes": {
                    "key": "value"
                  },
                  "name": "update",
                  "realm_id": "${keycloak_realm.realm.id}"
                }
              references:
                realm_id: keycloak_realm.realm.id
              dependencies:
                keycloak_openid_client.openid_client: |-
                    {
                      "access_type": "CONFIDENTIAL",
                      "client_id": "client",
                      "enabled": true,
                      "name": "client",
                      "realm_id": "${keycloak_realm.realm.id}",
                      "valid_redirect_uris": [
                        "http://localhost:8080/openid-callback"
                      ]
                    }
                keycloak_realm.realm: |-
                    {
                      "enabled": true,
                      "realm": "my-realm"
                    }
            - name: delete_role
              manifest: |-
                {
                  "attributes": {
                    "key": "value"
                  },
                  "name": "delete",
                  "realm_id": "${keycloak_realm.realm.id}"
                }
              references:
                realm_id: keycloak_realm.realm.id
              dependencies:
                keycloak_openid_client.openid_client: |-
                    {
                      "access_type": "CONFIDENTIAL",
                      "client_id": "client",
                      "enabled": true,
                      "name": "client",
                      "realm_id": "${keycloak_realm.realm.id}",
                      "valid_redirect_uris": [
                        "http://localhost:8080/openid-callback"
                      ]
                    }
                keycloak_realm.realm: |-
                    {
                      "enabled": true,
                      "realm": "my-realm"
                    }
            - name: client_role
              manifest: |-
                {
                  "attributes": {
                    "key": "value"
                  },
                  "client_id": "${keycloak_client.openid_client.id}",
                  "description": "My Client Role",
                  "name": "my-client-role",
                  "realm_id": "${keycloak_realm.realm.id}"
                }
              references:
                client_id: keycloak_client.openid_client.id
                realm_id: keycloak_realm.realm.id
              dependencies:
                keycloak_openid_client.openid_client: |-
                    {
                      "access_type": "CONFIDENTIAL",
                      "client_id": "client",
                      "enabled": true,
                      "name": "client",
                      "realm_id": "${keycloak_realm.realm.id}",
                      "valid_redirect_uris": [
                        "http://localhost:8080/openid-callback"
                      ]
                    }
                keycloak_realm.realm: |-
                    {
                      "enabled": true,
                      "realm": "my-realm"
                    }
            - name: admin_role
              manifest: |-
                {
                  "attributes": {
                    "key": "value"
                  },
                  "composite_roles": [
                    "${keycloak_role.create_role.id}",
                    "${keycloak_role.read_role.id}",
                    "${keycloak_role.update_role.id}",
                    "${keycloak_role.delete_role.id}",
                    "${keycloak_role.client_role.id}"
                  ],
                  "name": "admin",
                  "realm_id": "${keycloak_realm.realm.id}"
                }
              references:
                realm_id: keycloak_realm.realm.id
              dependencies:
                keycloak_openid_client.openid_client: |-
                    {
                      "access_type": "CONFIDENTIAL",
                      "client_id": "client",
                      "enabled": true,
                      "name": "client",
                      "realm_id": "${keycloak_realm.realm.id}",
                      "valid_redirect_uris": [
                        "http://localhost:8080/openid-callback"
                      ]
                    }
                keycloak_realm.realm: |-
                    {
                      "enabled": true,
                      "realm": "my-realm"
                    }
        argumentDocs:
            attributes: '- (Optional) A map representing attributes for the role. In order to add multivalue attributes, use ## to seperate the values. Max length for each value is 255 chars'
            client_id: '- (Optional) When specified, this role will be created as a client role attached to the client with the provided ID'
            composite_roles: '- (Optional) When specified, this role will be a composite role, composed of all roles that have an ID present within this list.'
            description: '- (Optional) The description of the role'
            name: '- (Required) The name of the role'
            realm_id: '- (Required) The realm this role exists within.'
        importStatements: []
    keycloak_saml_client:
        subCategory: ""
        name: keycloak_saml_client
        title: keycloak_saml_client Resource
        examples:
            - name: saml_client
              manifest: |-
                {
                  "client_id": "saml-client",
                  "include_authn_statement": true,
                  "name": "saml-client",
                  "realm_id": "${keycloak_realm.realm.id}",
                  "sign_assertions": true,
                  "sign_documents": false,
                  "signing_certificate": "${file(\"saml-cert.pem\")}",
                  "signing_private_key": "${file(\"saml-key.pem\")}"
                }
              references:
                realm_id: keycloak_realm.realm.id
              dependencies:
                keycloak_realm.realm: |-
                    {
                      "enabled": true,
                      "realm": "my-realm"
                    }
        argumentDocs:
            assertion_consumer_post_url: '- (Optional) SAML POST Binding URL for the client''s assertion consumer service (login responses).'
            assertion_consumer_redirect_url: '- (Optional) SAML Redirect Binding URL for the client''s assertion consumer service (login responses).'
            authentication_flow_binding_overrides: '- (Optional) Override realm authentication flow bindings'
            base_url: '- (Optional) When specified, this URL will be used whenever Keycloak needs to link to this client.'
            browser_id: '- (Optional) Browser flow id, (flow needs to exist)'
            canonicalization_method: '- (Optional) The Canonicalization Method for XML signatures. Should be one of "EXCLUSIVE", "EXCLUSIVE_WITH_COMMENTS", "INCLUSIVE", or "INCLUSIVE_WITH_COMMENTS". Defaults to "EXCLUSIVE".'
            client_id: '- (Required) The unique ID of this client, referenced in the URI during authentication and in issued tokens.'
            client_signature_required: '- (Optional) When true, Keycloak will expect that documents originating from a client will be signed using the certificate and/or key configured via signing_certificate and signing_private_key. Defaults to true.'
            description: '- (Optional) The description of this client in the GUI.'
            direct_grant_id: '- (Optional) Direct grant flow id (flow needs to exist)'
            enabled: '- (Optional) When false, this client will not be able to initiate a login or obtain access tokens. Defaults to true.'
            encrypt_assertions: '- (Optional) When true, the SAML assertions will be encrypted by Keycloak using the client''s public key. Defaults to false.'
            encryption_certificate: '- (Optional) If assertions for the client are encrypted, this certificate will be used for encryption.'
            encryption_certificate_sha1: '- (Computed) The sha1sum fingerprint of the encryption certificate. If the encryption certificate is not in correct base64 format, this will be left empty.'
            extra_config: '- (Optional) A map of key/value pairs to add extra configuration attributes to this client. This can be used for custom attributes, or to add configuration attributes that is not yet supported by this Terraform provider. Use this attribute at your own risk, as s may conflict with top-level configuration attributes in future provider updates.'
            force_name_id_format: '- (Optional) Ignore requested NameID subject format and use the one defined in name_id_format instead. Defaults to false.'
            force_post_binding: '- (Optional) When true, Keycloak will always respond to an authentication request via the SAML POST Binding. Defaults to true.'
            front_channel_logout: '- (Optional) When true, this client will require a browser redirect in order to perform a logout. Defaults to true.'
            full_scope_allowed: '- (Optional) - Allow to include all roles mappings in the access token'
            idp_initiated_sso_relay_state: '- (Optional) Relay state you want to send with SAML request when you want to do IDP Initiated SSO.'
            idp_initiated_sso_url_name: '- (Optional) URL fragment name to reference client when you want to do IDP Initiated SSO.'
            include_authn_statement: '- (Optional) When true, an AuthnStatement will be included in the SAML response. Defaults to true.'
            login_theme: '- (Optional) The login theme of this client.'
            logout_service_post_binding_url: '- (Optional) SAML POST Binding URL for the client''s single logout service.'
            logout_service_redirect_binding_url: '- (Optional) SAML Redirect Binding URL for the client''s single logout service.'
            master_saml_processing_url: '- (Optional) When specified, this URL will be used for all SAML requests.'
            name: '- (Optional) The display name of this client in the GUI.'
            name_id_format: '- (Optional) Sets the Name ID format for the subject.'
            realm_id: '- (Required) The realm this client is attached to.'
            root_url: '- (Optional) When specified, this value is prepended to all relative URLs.'
            sign_assertions: '- (Optional) When true, the SAML assertions will be signed by Keycloak using the realm''s private key, and embedded within the SAML XML Auth response. Defaults to false.'
            sign_documents: '- (Optional) When true, the SAML document will be signed by Keycloak using the realm''s private key. Defaults to true.'
            signature_algorithm: '- (Optional) The signature algorithm used to sign documents. Should be one of "RSA_SHA1", "RSA_SHA256", "RSA_SHA256_MGF1, "RSA_SHA512", "RSA_SHA512_MGF1" or "DSA_SHA1".'
            signature_key_name: '- (Optional) The value of the KeyName element within the signed SAML document. Should be one of "NONE", "KEY_ID", or "CERT_SUBJECT". Defaults to "KEY_ID".'
            signing_certificate: '- (Optional) If documents or assertions from the client are signed, this certificate will be used to verify the signature.'
            signing_certificate_sha1: '- (Computed) The sha1sum fingerprint of the signing certificate. If the signing certificate is not in correct base64 format, this will be left empty.'
            signing_private_key: '- (Optional) If documents or assertions from the client are signed, this private key will be used to verify the signature.'
            signing_private_key_sha1: '- (Computed) The sha1sum fingerprint of the signing private key. If the signing private key is not in correct base64 format, this will be left empty.'
            valid_redirect_uris: '- (Optional) When specified, Keycloak will use this list to validate given Assertion Consumer URLs specified in the authentication request.'
        importStatements: []
    keycloak_saml_client_default_scopes:
        subCategory: ""
        name: keycloak_saml_client_default_scopes
        title: keycloak_saml_client_default_scopes Resource
        examples:
            - name: client_default_scopes
              manifest: |-
                {
                  "client_id": "${keycloak_saml_client.client.id}",
                  "default_scopes": [
                    "role_list",
                    "${keycloak_saml_client_scope.client_scope.name}"
                  ],
                  "realm_id": "${keycloak_realm.realm.id}"
                }
              references:
                client_id: keycloak_saml_client.client.id
                realm_id: keycloak_realm.realm.id
              dependencies:
                keycloak_realm.realm: |-
                    {
                      "enabled": true,
                      "realm": "my-realm"
                    }
                keycloak_saml_client.saml_client: |-
                    {
                      "client_id": "saml-client",
                      "include_authn_statement": true,
                      "name": "saml-client",
                      "realm_id": "${keycloak_realm.realm.id}",
                      "sign_assertions": true,
                      "sign_documents": false,
                      "signing_certificate": "${file(\"saml-cert.pem\")}",
                      "signing_private_key": "${file(\"saml-key.pem\")}"
                    }
                keycloak_saml_client_scope.client_scope: |-
                    {
                      "name": "client-scope",
                      "realm_id": "${keycloak_realm.realm.id}"
                    }
        argumentDocs:
            client_id: '- (Required) The ID of the client to attach default scopes to. Note that this is the unique ID of the client generated by Keycloak.'
            default_scopes: '- (Required) An array of client scope names to attach to this client.'
            realm_id: '- (Required) The realm this client and scopes exists in.'
        importStatements: []
    keycloak_saml_client_scope:
        subCategory: ""
        name: keycloak_saml_client_scope
        title: keycloak_saml_client_scope Resource
        examples:
            - name: saml_client_scope
              manifest: |-
                {
                  "description": "This scope will map a user's group memberships to SAML assertion",
                  "gui_order": 1,
                  "name": "groups",
                  "realm_id": "${keycloak_realm.realm.id}"
                }
              references:
                realm_id: keycloak_realm.realm.id
              dependencies:
                keycloak_realm.realm: |-
                    {
                      "enabled": true,
                      "realm": "my-realm"
                    }
        argumentDocs:
            consent_screen_text: '- (Optional) When set, a consent screen will be displayed to users authenticating to clients with this scope attached. The consent screen will display the string value of this attribute.'
            description: '- (Optional) The description of this client scope in the GUI.'
            gui_order: '- (Optional) Specify order of the client scope in GUI (such as in Consent page) as integer.'
            name: '- (Required) The display name of this client scope in the GUI.'
            realm_id: '- (Required) The realm this client scope belongs to.'
        importStatements: []
    keycloak_saml_identity_provider:
        subCategory: ""
        name: keycloak_saml_identity_provider
        title: keycloak_saml_identity_provider Resource
        examples:
            - name: realm_saml_identity_provider
              manifest: |-
                {
                  "alias": "my-saml-idp",
                  "backchannel_supported": true,
                  "entity_id": "https://domain.com/entity_id",
                  "force_authn": true,
                  "post_binding_authn_request": true,
                  "post_binding_logout": true,
                  "post_binding_response": true,
                  "realm": "${keycloak_realm.realm.id}",
                  "single_logout_service_url": "https://domain.com/adfs/ls/?wa=wsignout1.0",
                  "single_sign_on_service_url": "https://domain.com/adfs/ls/",
                  "store_token": false,
                  "trust_email": true
                }
              references:
                realm: keycloak_realm.realm.id
              dependencies:
                keycloak_realm.realm: |-
                    {
                      "enabled": true,
                      "realm": "my-realm"
                    }
        argumentDocs:
            add_read_token_role_on_create: '- (Optional) When true, new users will be able to read stored tokens. This will automatically assign the broker.read-token role. Defaults to false.'
            alias: '- (Optional) The unique name of identity provider.'
            authenticate_by_default: '- (Optional) Authenticate users by default. Defaults to false.'
            authn_context_class_refs: '- (Optional) Ordered list of requested AuthnContext ClassRefs.'
            authn_context_comparison_type: '- (Optional) Specifies the comparison method used to evaluate the requested context classes or statements.'
            authn_context_decl_refs: '- (Optional) Ordered list of requested AuthnContext DeclRefs.'
            backchannel_supported: '- (Optional) Does the external IDP support backchannel logout?. Defaults to false.'
            display_name: '- (Optional) The display name for the realm that is shown when logging in to the admin console.'
            enabled: '- (Optional) When false, users and clients will not be able to access this realm. Defaults to true.'
            entity_id: '- (Required) The Entity ID that will be used to uniquely identify this SAML Service Provider.'
            extra_config: '- (Optional) A map of key/value pairs to add extra configuration to this identity provider. This can be used for custom oidc provider implementations, or to add configuration that is not yet supported by this Terraform provider. Use this attribute at your own risk, as custom attributes may conflict with top-level configuration attributes in future provider updates.'
            first_broker_login_flow_alias: '- (Optional) Alias of authentication flow, which is triggered after first login with this identity provider. Term ''First Login'' means that there is not yet existing Keycloak account linked with the authenticated identity provider account. Defaults to first broker login.'
            force_authn: '- (Optional) Indicates whether the identity provider must authenticate the presenter directly rather than rely on a previous security context.'
            gui_order: '- (Optional) A number defining the order of this identity provider in the GUI.'
            hide_on_login_page: '- (Optional) If hidden, then login with this provider is possible only if requested explicitly, e.g. using the ''kc_idp_hint'' parameter.'
            link_only: '- (Optional) When true, users cannot login using this provider, but their existing accounts will be linked when possible. Defaults to false.'
            name_id_policy_format: '- (Optional) Specifies the URI reference corresponding to a name identifier format. Defaults to empty.'
            post_binding_authn_request: '- (Optional) Indicates whether the AuthnRequest must be sent using HTTP-POST binding. If false, HTTP-REDIRECT binding will be used.'
            post_binding_logout: '- (Optional) Indicates whether to respond to requests using HTTP-POST binding. If false, HTTP-REDIRECT binding will be used.'
            post_binding_response: '- (Optional) Indicates whether to respond to requests using HTTP-POST binding. If false, HTTP-REDIRECT binding will be used..'
            post_broker_login_flow_alias: '- (Optional) Alias of authentication flow, which is triggered after each login with this identity provider. Useful if you want additional verification of each user authenticated with this identity provider (for example OTP). Leave this empty if you don''t want any additional authenticators to be triggered after login with this identity provider. Also note, that authenticator implementations must assume that user is already set in ClientSession as identity provider already set it. Defaults to empty.'
            principal_attribute: '- (Optional) The principal attribute.'
            principal_type: '- (Optional) The principal type. Can be one of SUBJECT, ATTRIBUTE or FRIENDLY_ATTRIBUTE.'
            provider_id: '- (Optional) The ID of the identity provider to use. Defaults to saml, which should be used unless you have extended Keycloak and provided your own implementation.'
            realm: '- (Required) The name of the realm. This is unique across Keycloak.'
            signature_algorithm: '- (Optional) Signing Algorithm. Defaults to empty.'
            signing_certificate: '- (Optional) Signing Certificate.'
            single_logout_service_url: '- (Optional) The Url that must be used to send logout requests.'
            single_sign_on_service_url: '- (Required) The Url that must be used to send authentication requests (SAML AuthnRequest).'
            store_token: '- (Optional) When true, tokens will be stored after authenticating users. Defaults to true.'
            sync_mode: '- (Optional) The default sync mode to use for all mappers attached to this identity provider. Can be one of IMPORT, FORCE, or LEGACY.'
            trust_email: '- (Optional) When true, email addresses for users in this provider will automatically be verified regardless of the realm''s email verification policy. Defaults to false.'
            validate_signature: '- (Optional) Enable/disable signature validation of SAML responses.'
            want_assertions_encrypted: '- (Optional) Indicates whether this service provider expects an encrypted Assertion.'
            want_assertions_signed: '- (Optional) Indicates whether this service provider expects a signed Assertion.'
            xml_sign_key_info_key_name_transformer: '- (Optional) The SAML signature key name. Can be one of NONE, KEY_ID, or CERT_SUBJECT.'
        importStatements: []
    keycloak_saml_script_protocol_mapper:
        subCategory: ""
        name: keycloak_saml_script_protocol_mapper
        title: keycloak_saml_script_protocol_mapper Resource
        examples:
            - name: saml_script_mapper
              manifest: |-
                {
                  "client_id": "${keycloak_saml_client.saml_client.id}",
                  "name": "script-mapper",
                  "realm_id": "${keycloak_realm.realm.id}",
                  "saml_attribute_name": "displayName",
                  "saml_attribute_name_format": "Unspecified",
                  "script": "exports = 'foo';"
                }
              references:
                client_id: keycloak_saml_client.saml_client.id
                realm_id: keycloak_realm.realm.id
              dependencies:
                keycloak_realm.realm: |-
                    {
                      "enabled": true,
                      "realm": "my-realm"
                    }
                keycloak_saml_client.saml_client: |-
                    {
                      "client_id": "saml-client",
                      "name": "saml-client",
                      "realm_id": "${keycloak_realm.realm.id}"
                    }
        argumentDocs:
            client_id: '- (Optional) The client this protocol mapper should be attached to. Conflicts with client_scope_id. One of client_id or client_scope_id must be specified.'
            client_scope_id: '- (Optional) The client scope this protocol mapper should be attached to. Conflicts with client_id. One of client_id or client_scope_id must be specified.'
            friendly_name: '- (Optional) An optional human-friendly name for this attribute.'
            name: '- (Required) The display name of this protocol mapper in the GUI.'
            realm_id: '- (Required) The realm this protocol mapper exists within.'
            saml_attribute_name: '- (Required) The name of the SAML attribute.'
            saml_attribute_name_format: '- (Required) The SAML attribute Name Format. Can be one of Unspecified, Basic, or URI Reference.'
            script: '- (Required) JavaScript code to compute the attribute value.'
            single_value_attribute: '- (Optional) When true, all values will be stored under one attribute with multiple attribute values. Defaults to true.'
        importStatements: []
    keycloak_saml_user_attribute_protocol_mapper:
        subCategory: ""
        name: keycloak_saml_user_attribute_protocol_mapper
        title: keycloak_saml_user_attribute_protocol_mapper Resource
        examples:
            - name: saml_user_attribute_mapper
              manifest: |-
                {
                  "client_id": "${keycloak_saml_client.saml_client.id}",
                  "name": "displayname-user-attribute-mapper",
                  "realm_id": "${keycloak_realm.realm.id}",
                  "saml_attribute_name": "displayName",
                  "saml_attribute_name_format": "Unspecified",
                  "user_attribute": "displayName"
                }
              references:
                client_id: keycloak_saml_client.saml_client.id
                realm_id: keycloak_realm.realm.id
              dependencies:
                keycloak_realm.realm: |-
                    {
                      "enabled": true,
                      "realm": "my-realm"
                    }
                keycloak_saml_client.saml_client: |-
                    {
                      "client_id": "saml-client",
                      "name": "saml-client",
                      "realm_id": "${keycloak_realm.realm.id}"
                    }
        argumentDocs:
            client_id: '- (Optional) The client this protocol mapper should be attached to. Conflicts with client_scope_id. One of client_id or client_scope_id must be specified.'
            client_scope_id: '- (Optional) The client scope this protocol mapper should be attached to. Conflicts with client_id. One of client_id or client_scope_id must be specified.'
            friendly_name: '- (Optional) An optional human-friendly name for this attribute.'
            name: '- (Required) The display name of this protocol mapper in the GUI.'
            realm_id: '- (Required) The realm this protocol mapper exists within.'
            saml_attribute_name: '- (Required) The name of the SAML attribute.'
            saml_attribute_name_format: '- (Required) The SAML attribute Name Format. Can be one of Unspecified, Basic, or URI Reference.'
            user_attribute: '- (Required) The custom user attribute to map.'
        importStatements: []
    keycloak_saml_user_property_protocol_mapper:
        subCategory: ""
        name: keycloak_saml_user_property_protocol_mapper
        title: keycloak_saml_user_property_protocol_mapper Resource
        examples:
            - name: saml_user_property_mapper
              manifest: |-
                {
                  "client_id": "${keycloak_saml_client.saml_client.id}",
                  "name": "email-user-property-mapper",
                  "realm_id": "${keycloak_realm.realm.id}",
                  "saml_attribute_name": "email",
                  "saml_attribute_name_format": "Unspecified",
                  "user_property": "email"
                }
              references:
                client_id: keycloak_saml_client.saml_client.id
                realm_id: keycloak_realm.realm.id
              dependencies:
                keycloak_realm.realm: |-
                    {
                      "enabled": true,
                      "realm": "my-realm"
                    }
                keycloak_saml_client.saml_client: |-
                    {
                      "client_id": "saml-client",
                      "name": "saml-client",
                      "realm_id": "${keycloak_realm.realm.id}"
                    }
        argumentDocs:
            client_id: '- (Optional) The client this protocol mapper should be attached to. Conflicts with client_scope_id. One of client_id or client_scope_id must be specified.'
            client_scope_id: '- (Optional) The client scope this protocol mapper should be attached to. Conflicts with client_id. One of client_id or client_scope_id must be specified.'
            friendly_name: '- (Optional) An optional human-friendly name for this attribute.'
            name: '- (Required) The display name of this protocol mapper in the GUI.'
            realm_id: '- (Required) The realm this protocol mapper exists within.'
            saml_attribute_name: '- (Required) The name of the SAML attribute.'
            saml_attribute_name_format: '- (Required) The SAML attribute Name Format. Can be one of Unspecified, Basic, or URI Reference.'
            user_property: '- (Required) The property of the Keycloak user model to map.'
        importStatements: []
    keycloak_user:
        subCategory: ""
        name: keycloak_user
        title: keycloak_user Resource
        examples:
            - name: user
              manifest: |-
                {
                  "email": "bob@domain.com",
                  "enabled": true,
                  "first_name": "Bob",
                  "last_name": "Bobson",
                  "realm_id": "${keycloak_realm.realm.id}",
                  "username": "bob"
                }
              references:
                realm_id: keycloak_realm.realm.id
              dependencies:
                keycloak_realm.realm: |-
                    {
                      "enabled": true,
                      "realm": "my-realm"
                    }
            - name: user_with_initial_password
              manifest: |-
                {
                  "attributes": {
                    "foo": "bar",
                    "multivalue": "value1##value2"
                  },
                  "email": "alice@domain.com",
                  "enabled": true,
                  "first_name": "Alice",
                  "initial_password": [
                    {
                      "temporary": true,
                      "value": "some password"
                    }
                  ],
                  "last_name": "Aliceberg",
                  "realm_id": "${keycloak_realm.realm.id}",
                  "username": "alice"
                }
              references:
                realm_id: keycloak_realm.realm.id
              dependencies:
                keycloak_realm.realm: |-
                    {
                      "enabled": true,
                      "realm": "my-realm"
                    }
        argumentDocs:
            attributes: '- (Optional) A map representing attributes for the user. In order to add multivalue attributes, use ## to seperate the values. Max length for each value is 255 chars'
            email: '- (Optional) The user''s email.'
            email_verified: '- (Optional) Whether the email address was validated or not. Default to false.'
            enabled: '- (Optional) When false, this user cannot log in. Defaults to true.'
            federated_identity: '- (Optional) When specified, the user will be linked to a federated identity provider. Refer to the federated user example for more details.'
            first_name: '- (Optional) The user''s first name.'
            identity_provider: '- (Required) The name of the identity provider'
            initial_password: '- (Optional) When given, the user''s initial password will be set. This attribute is only respected during initial user creation.'
            last_name: '- (Optional) The user''s last name.'
            realm_id: '- (Required) The realm this user belongs to.'
            required_actions: '- (Optional) A list of required user actions.'
            temporary: '- (Optional) If set to true, the initial password is set up for renewal on first use. Default to false.'
            user_id: '- (Required) The ID of the user defined in the identity provider'
            user_name: '- (Required) The user name of the user defined in the identity provider'
            username: '- (Required) The unique username of this user.'
            value: '- (Required) The initial password.'
        importStatements: []
    keycloak_user_groups:
        subCategory: ""
        name: keycloak_user_groups
        title: keycloak_user_groups Resource
        examples:
            - name: user_groups
              manifest: |-
                {
                  "group_ids": [
                    "${keycloak_group.group.id}"
                  ],
                  "realm_id": "${keycloak_realm.realm.id}",
                  "user_id": "${keycloak_user.user.id}"
                }
              references:
                realm_id: keycloak_realm.realm.id
                user_id: keycloak_user.user.id
              dependencies:
                keycloak_group.group: |-
                    {
                      "name": "foo",
                      "realm_id": "${keycloak_realm.realm.id}"
                    }
                keycloak_realm.realm: |-
                    {
                      "enabled": true,
                      "realm": "my-realm"
                    }
                keycloak_user.user: |-
                    {
                      "realm_id": "${keycloak_realm.realm.id}",
                      "username": "my-user"
                    }
            - name: user_groups_association_1
              manifest: |-
                {
                  "exhaustive": false,
                  "group_ids": [
                    "${keycloak_group.group_foo.id}"
                  ],
                  "realm_id": "${keycloak_realm.realm.id}",
                  "user_id": "${keycloak_user.user.id}"
                }
              references:
                realm_id: keycloak_realm.realm.id
                user_id: keycloak_user.user.id
              dependencies:
                keycloak_group.group_bar: |-
                    {
                      "name": "bar",
                      "realm_id": "${keycloak_realm.realm.id}"
                    }
                keycloak_group.group_foo: |-
                    {
                      "name": "foo",
                      "realm_id": "${keycloak_realm.realm.id}"
                    }
                keycloak_realm.realm: |-
                    {
                      "enabled": true,
                      "realm": "my-realm"
                    }
                keycloak_user.user: |-
                    {
                      "realm_id": "${keycloak_realm.realm.id}",
                      "username": "my-user"
                    }
            - name: user_groups_association_1
              manifest: |-
                {
                  "exhaustive": false,
                  "group_ids": [
                    "${keycloak_group.group_bar.id}"
                  ],
                  "realm_id": "${keycloak_realm.realm.id}",
                  "user_id": "${keycloak_user.user.id}"
                }
              references:
                realm_id: keycloak_realm.realm.id
                user_id: keycloak_user.user.id
              dependencies:
                keycloak_group.group_bar: |-
                    {
                      "name": "bar",
                      "realm_id": "${keycloak_realm.realm.id}"
                    }
                keycloak_group.group_foo: |-
                    {
                      "name": "foo",
                      "realm_id": "${keycloak_realm.realm.id}"
                    }
                keycloak_realm.realm: |-
                    {
                      "enabled": true,
                      "realm": "my-realm"
                    }
                keycloak_user.user: |-
                    {
                      "realm_id": "${keycloak_realm.realm.id}",
                      "username": "my-user"
                    }
        argumentDocs:
            exhaustive: '- (Optional) Indicates if the list of the user''s groups is exhaustive. In this case, groups that are manually added to the user will be removed. Defaults to true.'
            group_ids: '- (Required) A list of group IDs that the user is member of.'
            realm_id: '- (Required) The realm this group exists in.'
            user_id: '- (Required) The ID of the user this resource should manage groups for.'
        importStatements: []
    keycloak_user_roles:
        subCategory: ""
        name: keycloak_user_roles
        title: keycloak_user_roles Resource
        examples:
            - name: user_roles
              manifest: |-
                {
                  "realm_id": "${keycloak_realm.realm.id}",
                  "role_ids": [
                    "${keycloak_role.realm_role.id}",
                    "${keycloak_role.client_role.id}"
                  ],
                  "user_id": "${keycloak_user.user.id}"
                }
              references:
                realm_id: keycloak_realm.realm.id
                user_id: keycloak_user.user.id
              dependencies:
                keycloak_openid_client.client: |-
                    {
                      "access_type": "BEARER-ONLY",
                      "client_id": "client",
                      "enabled": true,
                      "name": "client",
                      "realm_id": "${keycloak_realm.realm.id}"
                    }
                keycloak_realm.realm: |-
                    {
                      "enabled": true,
                      "realm": "my-realm"
                    }
                keycloak_role.client_role: |-
                    {
                      "client_id": "${keycloak_client.client.id}",
                      "description": "My Client Role",
                      "name": "my-client-role",
                      "realm_id": "${keycloak_realm.realm.id}"
                    }
                keycloak_role.realm_role: |-
                    {
                      "description": "My Realm Role",
                      "name": "my-realm-role",
                      "realm_id": "${keycloak_realm.realm.id}"
                    }
                keycloak_user.user: |-
                    {
                      "email": "bob@domain.com",
                      "enabled": true,
                      "first_name": "Bob",
                      "last_name": "Bobson",
                      "realm_id": "${keycloak_realm.realm.id}",
                      "username": "bob"
                    }
        argumentDocs:
            exhaustive: '- (Optional) Indicates if the list of roles is exhaustive. In this case, roles that are manually added to the user will be removed. Defaults to true.'
            realm_id: '- (Required) The realm this user exists in.'
            role_ids: '- (Required) A list of role IDs to map to the user'
            user_id: '- (Required) The ID of the user this resource should manage roles for.'
        importStatements: []
    keycloak_user_template_importer_identity_provider_mapper:
        subCategory: ""
        name: keycloak_user_template_importer_identity_provider_mapper
        title: keycloak_user_template_importer_identity_provider_mapper Resource
        examples:
            - name: username_importer
              manifest: |-
                {
                  "extra_config": {
                    "syncMode": "INHERIT"
                  },
                  "identity_provider_alias": "${keycloak_oidc_identity_provider.oidc.alias}",
                  "name": "username-template-importer",
                  "realm": "${keycloak_realm.realm.id}",
                  "template": "${ALIAS}.${CLAIM.email}"
                }
              references:
                identity_provider_alias: keycloak_oidc_identity_provider.oidc.alias
                realm: keycloak_realm.realm.id
              dependencies:
                keycloak_oidc_identity_provider.oidc: |-
                    {
                      "alias": "oidc",
                      "authorization_url": "https://example.com/auth",
                      "client_id": "example_id",
                      "client_secret": "example_token",
                      "default_scopes": "openid random profile",
                      "realm": "${keycloak_realm.realm.id}",
                      "token_url": "https://example.com/token"
                    }
                keycloak_realm.realm: |-
                    {
                      "enabled": true,
                      "realm": "my-realm"
                    }
        argumentDocs:
            extra_config: '- (Optional) Key/value attributes to add to the identity provider mapper model that is persisted to Keycloak. This can be used to extend the base model with new Keycloak features.'
            identity_provider_alias: '- (Required) The alias of the associated identity provider.'
            name: '- (Required) The name of the mapper.'
            realm: '- (Required) The name of the realm.'
            template: '- (Required) Template to use to format the username to import. Substitutions are enclosed in ${}. For example: ''$${ALIAS}.$${CLAIM.sub}''. ALIAS is the provider alias. CLAIM.<NAME> references an ID or Access token claim.'
        importStatements: []
    keycloak_users_permissions:
        subCategory: ""
        name: keycloak_users_permissions
        title: keycloak_users_permissions Resource
        examples:
            - name: users_permissions
              manifest: |-
                {
                  "impersonate_scope": [
                    {
                      "decision_strategy": "UNANIMOUS",
                      "description": "description",
                      "policies": [
                        "${keycloak_openid_client_user_policy.test.id}"
                      ]
                    }
                  ],
                  "manage_group_membership_scope": [
                    {
                      "decision_strategy": "UNANIMOUS",
                      "description": "description",
                      "policies": [
                        "${keycloak_openid_client_user_policy.test.id}"
                      ]
                    }
                  ],
                  "manage_scope": [
                    {
                      "decision_strategy": "UNANIMOUS",
                      "description": "description",
                      "policies": [
                        "${keycloak_openid_client_user_policy.test.id}"
                      ]
                    }
                  ],
                  "map_roles_scope": [
                    {
                      "decision_strategy": "UNANIMOUS",
                      "description": "description",
                      "policies": [
                        "${keycloak_openid_client_user_policy.test.id}"
                      ]
                    }
                  ],
                  "realm_id": "${keycloak_realm.realm.id}",
                  "user_impersonated_scope": [
                    {
                      "decision_strategy": "UNANIMOUS",
                      "description": "description",
                      "policies": [
                        "${keycloak_openid_client_user_policy.test.id}"
                      ]
                    }
                  ],
                  "view_scope": [
                    {
                      "decision_strategy": "UNANIMOUS",
                      "description": "description",
                      "policies": [
                        "${keycloak_openid_client_user_policy.test.id}"
                      ]
                    }
                  ]
                }
              references:
                realm_id: keycloak_realm.realm.id
              dependencies:
                keycloak_openid_client_permissions.realm_management_permission: |-
                    {
                      "client_id": "${data.keycloak_openid_client.realm_management.id}",
                      "enabled": true,
                      "realm_id": "${keycloak_realm.realm.id}"
                    }
                keycloak_openid_client_user_policy.test: |-
                    {
                      "decision_strategy": "UNANIMOUS",
                      "depends_on": [
                        "${keycloak_openid_client_permissions.realm_management_permission}"
                      ],
                      "logic": "POSITIVE",
                      "name": "client_user_policy_test",
                      "realm_id": "${keycloak_realm.realm.id}",
                      "resource_server_id": "${data.keycloak_openid_client.realm_management.id}",
                      "users": [
                        "${keycloak_user.test.id}"
                      ]
                    }
                keycloak_realm.realm: |-
                    {
                      "realm": "my-realm"
                    }
                keycloak_user.test: |-
                    {
                      "email": "test-user@fakedomain.com",
                      "first_name": "Testy",
                      "last_name": "Tester",
                      "realm_id": "${keycloak_realm.realm.id}",
                      "username": "test-user"
                    }
        argumentDocs:
            authorization_resource_server_id: '- Resource server id representing the realm management client on which these permissions are managed.'
            decision_strategy: '- (Optional) Decision strategy of the permission.'
            description: '- (Optional) Description of the permission.'
            enabled: '- When true, this indicates that fine-grained user permissions are enabled. This will always be true.'
            impersonate_scope: '- (Optional) When specified, set the scope based impersonate permission.'
            manage_group_membership_scope: '- (Optional) When specified, set the scope based manage_group_membership permission.'
            manage_scope: '- (Optional) When specified, set the scope based manage permission.'
            map_roles_scope: '- (Optional) When specified, set the scope based map_roles permission.'
            policies: '- (Optional) Assigned policies to the permission. Each element within this list should be a policy ID.'
            realm_id: '- (Required) The realm in which to manage fine-grained user permissions.'
            user_impersonated_scope: '- (Optional) When specified, set the scope based user_impersonated permission.'
            view_scope: '- (Optional) When specified, set the scope based view permission.'
        importStatements: []
