/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ClientPermissionsInitParameters struct {

	// The id of the client that provides the role.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-keycloak/apis/openidclient/v1alpha1.Client
	// +crossplane:generate:reference:extractor=github.com/crossplane-contrib/provider-keycloak/config/common.UUIDExtractor()
	ClientID *string `json:"clientId,omitempty" tf:"client_id,omitempty"`

	// Reference to a Client in openidclient to populate clientId.
	// +kubebuilder:validation:Optional
	ClientIDRef *v1.Reference `json:"clientIdRef,omitempty" tf:"-"`

	// Selector for a Client in openidclient to populate clientId.
	// +kubebuilder:validation:Optional
	ClientIDSelector *v1.Selector `json:"clientIdSelector,omitempty" tf:"-"`

	ConfigureScope []ConfigureScopeInitParameters `json:"configureScope,omitempty" tf:"configure_scope,omitempty"`

	ManageScope []ManageScopeInitParameters `json:"manageScope,omitempty" tf:"manage_scope,omitempty"`

	MapRolesClientScopeScope []MapRolesClientScopeScopeInitParameters `json:"mapRolesClientScopeScope,omitempty" tf:"map_roles_client_scope_scope,omitempty"`

	MapRolesCompositeScope []MapRolesCompositeScopeInitParameters `json:"mapRolesCompositeScope,omitempty" tf:"map_roles_composite_scope,omitempty"`

	MapRolesScope []MapRolesScopeInitParameters `json:"mapRolesScope,omitempty" tf:"map_roles_scope,omitempty"`

	// The realm this group exists in.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-keycloak/apis/realm/v1alpha1.Realm
	RealmID *string `json:"realmId,omitempty" tf:"realm_id,omitempty"`

	// Reference to a Realm in realm to populate realmId.
	// +kubebuilder:validation:Optional
	RealmIDRef *v1.Reference `json:"realmIdRef,omitempty" tf:"-"`

	// Selector for a Realm in realm to populate realmId.
	// +kubebuilder:validation:Optional
	RealmIDSelector *v1.Selector `json:"realmIdSelector,omitempty" tf:"-"`

	TokenExchangeScope []TokenExchangeScopeInitParameters `json:"tokenExchangeScope,omitempty" tf:"token_exchange_scope,omitempty"`

	ViewScope []ViewScopeInitParameters `json:"viewScope,omitempty" tf:"view_scope,omitempty"`
}

type ClientPermissionsObservation struct {

	// Resource server id representing the realm management client on which this
	// permission is managed.
	// Resource server id representing the realm management client on which this permission is managed
	AuthorizationResourceServerID *string `json:"authorizationResourceServerId,omitempty" tf:"authorization_resource_server_id,omitempty"`

	// The id of the client that provides the role.
	ClientID *string `json:"clientId,omitempty" tf:"client_id,omitempty"`

	ConfigureScope []ConfigureScopeObservation `json:"configureScope,omitempty" tf:"configure_scope,omitempty"`

	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	ManageScope []ManageScopeObservation `json:"manageScope,omitempty" tf:"manage_scope,omitempty"`

	MapRolesClientScopeScope []MapRolesClientScopeScopeObservation `json:"mapRolesClientScopeScope,omitempty" tf:"map_roles_client_scope_scope,omitempty"`

	MapRolesCompositeScope []MapRolesCompositeScopeObservation `json:"mapRolesCompositeScope,omitempty" tf:"map_roles_composite_scope,omitempty"`

	MapRolesScope []MapRolesScopeObservation `json:"mapRolesScope,omitempty" tf:"map_roles_scope,omitempty"`

	// The realm this group exists in.
	RealmID *string `json:"realmId,omitempty" tf:"realm_id,omitempty"`

	TokenExchangeScope []TokenExchangeScopeObservation `json:"tokenExchangeScope,omitempty" tf:"token_exchange_scope,omitempty"`

	ViewScope []ViewScopeObservation `json:"viewScope,omitempty" tf:"view_scope,omitempty"`
}

type ClientPermissionsParameters struct {

	// The id of the client that provides the role.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-keycloak/apis/openidclient/v1alpha1.Client
	// +crossplane:generate:reference:extractor=github.com/crossplane-contrib/provider-keycloak/config/common.UUIDExtractor()
	// +kubebuilder:validation:Optional
	ClientID *string `json:"clientId,omitempty" tf:"client_id,omitempty"`

	// Reference to a Client in openidclient to populate clientId.
	// +kubebuilder:validation:Optional
	ClientIDRef *v1.Reference `json:"clientIdRef,omitempty" tf:"-"`

	// Selector for a Client in openidclient to populate clientId.
	// +kubebuilder:validation:Optional
	ClientIDSelector *v1.Selector `json:"clientIdSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	ConfigureScope []ConfigureScopeParameters `json:"configureScope,omitempty" tf:"configure_scope,omitempty"`

	// +kubebuilder:validation:Optional
	ManageScope []ManageScopeParameters `json:"manageScope,omitempty" tf:"manage_scope,omitempty"`

	// +kubebuilder:validation:Optional
	MapRolesClientScopeScope []MapRolesClientScopeScopeParameters `json:"mapRolesClientScopeScope,omitempty" tf:"map_roles_client_scope_scope,omitempty"`

	// +kubebuilder:validation:Optional
	MapRolesCompositeScope []MapRolesCompositeScopeParameters `json:"mapRolesCompositeScope,omitempty" tf:"map_roles_composite_scope,omitempty"`

	// +kubebuilder:validation:Optional
	MapRolesScope []MapRolesScopeParameters `json:"mapRolesScope,omitempty" tf:"map_roles_scope,omitempty"`

	// The realm this group exists in.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-keycloak/apis/realm/v1alpha1.Realm
	// +kubebuilder:validation:Optional
	RealmID *string `json:"realmId,omitempty" tf:"realm_id,omitempty"`

	// Reference to a Realm in realm to populate realmId.
	// +kubebuilder:validation:Optional
	RealmIDRef *v1.Reference `json:"realmIdRef,omitempty" tf:"-"`

	// Selector for a Realm in realm to populate realmId.
	// +kubebuilder:validation:Optional
	RealmIDSelector *v1.Selector `json:"realmIdSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	TokenExchangeScope []TokenExchangeScopeParameters `json:"tokenExchangeScope,omitempty" tf:"token_exchange_scope,omitempty"`

	// +kubebuilder:validation:Optional
	ViewScope []ViewScopeParameters `json:"viewScope,omitempty" tf:"view_scope,omitempty"`
}

type ConfigureScopeInitParameters struct {

	// The decision strategy, can be one of UNANIMOUS, AFFIRMATIVE, or CONSENSUS.
	DecisionStrategy *string `json:"decisionStrategy,omitempty" tf:"decision_strategy,omitempty"`

	// A description for the permission scope
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// A list of policy IDs
	// +listType=set
	Policies []*string `json:"policies,omitempty" tf:"policies,omitempty"`
}

type ConfigureScopeObservation struct {

	// The decision strategy, can be one of UNANIMOUS, AFFIRMATIVE, or CONSENSUS.
	DecisionStrategy *string `json:"decisionStrategy,omitempty" tf:"decision_strategy,omitempty"`

	// A description for the permission scope
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// A list of policy IDs
	// +listType=set
	Policies []*string `json:"policies,omitempty" tf:"policies,omitempty"`
}

type ConfigureScopeParameters struct {

	// The decision strategy, can be one of UNANIMOUS, AFFIRMATIVE, or CONSENSUS.
	// +kubebuilder:validation:Optional
	DecisionStrategy *string `json:"decisionStrategy,omitempty" tf:"decision_strategy,omitempty"`

	// A description for the permission scope
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// A list of policy IDs
	// +kubebuilder:validation:Optional
	// +listType=set
	Policies []*string `json:"policies,omitempty" tf:"policies,omitempty"`
}

type ManageScopeInitParameters struct {

	// The decision strategy, can be one of UNANIMOUS, AFFIRMATIVE, or CONSENSUS.
	DecisionStrategy *string `json:"decisionStrategy,omitempty" tf:"decision_strategy,omitempty"`

	// A description for the permission scope
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// A list of policy IDs
	// +listType=set
	Policies []*string `json:"policies,omitempty" tf:"policies,omitempty"`
}

type ManageScopeObservation struct {

	// The decision strategy, can be one of UNANIMOUS, AFFIRMATIVE, or CONSENSUS.
	DecisionStrategy *string `json:"decisionStrategy,omitempty" tf:"decision_strategy,omitempty"`

	// A description for the permission scope
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// A list of policy IDs
	// +listType=set
	Policies []*string `json:"policies,omitempty" tf:"policies,omitempty"`
}

type ManageScopeParameters struct {

	// The decision strategy, can be one of UNANIMOUS, AFFIRMATIVE, or CONSENSUS.
	// +kubebuilder:validation:Optional
	DecisionStrategy *string `json:"decisionStrategy,omitempty" tf:"decision_strategy,omitempty"`

	// A description for the permission scope
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// A list of policy IDs
	// +kubebuilder:validation:Optional
	// +listType=set
	Policies []*string `json:"policies,omitempty" tf:"policies,omitempty"`
}

type MapRolesClientScopeScopeInitParameters struct {

	// The decision strategy, can be one of UNANIMOUS, AFFIRMATIVE, or CONSENSUS.
	DecisionStrategy *string `json:"decisionStrategy,omitempty" tf:"decision_strategy,omitempty"`

	// A description for the permission scope
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// A list of policy IDs
	// +listType=set
	Policies []*string `json:"policies,omitempty" tf:"policies,omitempty"`
}

type MapRolesClientScopeScopeObservation struct {

	// The decision strategy, can be one of UNANIMOUS, AFFIRMATIVE, or CONSENSUS.
	DecisionStrategy *string `json:"decisionStrategy,omitempty" tf:"decision_strategy,omitempty"`

	// A description for the permission scope
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// A list of policy IDs
	// +listType=set
	Policies []*string `json:"policies,omitempty" tf:"policies,omitempty"`
}

type MapRolesClientScopeScopeParameters struct {

	// The decision strategy, can be one of UNANIMOUS, AFFIRMATIVE, or CONSENSUS.
	// +kubebuilder:validation:Optional
	DecisionStrategy *string `json:"decisionStrategy,omitempty" tf:"decision_strategy,omitempty"`

	// A description for the permission scope
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// A list of policy IDs
	// +kubebuilder:validation:Optional
	// +listType=set
	Policies []*string `json:"policies,omitempty" tf:"policies,omitempty"`
}

type MapRolesCompositeScopeInitParameters struct {

	// The decision strategy, can be one of UNANIMOUS, AFFIRMATIVE, or CONSENSUS.
	DecisionStrategy *string `json:"decisionStrategy,omitempty" tf:"decision_strategy,omitempty"`

	// A description for the permission scope
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// A list of policy IDs
	// +listType=set
	Policies []*string `json:"policies,omitempty" tf:"policies,omitempty"`
}

type MapRolesCompositeScopeObservation struct {

	// The decision strategy, can be one of UNANIMOUS, AFFIRMATIVE, or CONSENSUS.
	DecisionStrategy *string `json:"decisionStrategy,omitempty" tf:"decision_strategy,omitempty"`

	// A description for the permission scope
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// A list of policy IDs
	// +listType=set
	Policies []*string `json:"policies,omitempty" tf:"policies,omitempty"`
}

type MapRolesCompositeScopeParameters struct {

	// The decision strategy, can be one of UNANIMOUS, AFFIRMATIVE, or CONSENSUS.
	// +kubebuilder:validation:Optional
	DecisionStrategy *string `json:"decisionStrategy,omitempty" tf:"decision_strategy,omitempty"`

	// A description for the permission scope
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// A list of policy IDs
	// +kubebuilder:validation:Optional
	// +listType=set
	Policies []*string `json:"policies,omitempty" tf:"policies,omitempty"`
}

type MapRolesScopeInitParameters struct {

	// The decision strategy, can be one of UNANIMOUS, AFFIRMATIVE, or CONSENSUS.
	DecisionStrategy *string `json:"decisionStrategy,omitempty" tf:"decision_strategy,omitempty"`

	// A description for the permission scope
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// A list of policy IDs
	// +listType=set
	Policies []*string `json:"policies,omitempty" tf:"policies,omitempty"`
}

type MapRolesScopeObservation struct {

	// The decision strategy, can be one of UNANIMOUS, AFFIRMATIVE, or CONSENSUS.
	DecisionStrategy *string `json:"decisionStrategy,omitempty" tf:"decision_strategy,omitempty"`

	// A description for the permission scope
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// A list of policy IDs
	// +listType=set
	Policies []*string `json:"policies,omitempty" tf:"policies,omitempty"`
}

type MapRolesScopeParameters struct {

	// The decision strategy, can be one of UNANIMOUS, AFFIRMATIVE, or CONSENSUS.
	// +kubebuilder:validation:Optional
	DecisionStrategy *string `json:"decisionStrategy,omitempty" tf:"decision_strategy,omitempty"`

	// A description for the permission scope
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// A list of policy IDs
	// +kubebuilder:validation:Optional
	// +listType=set
	Policies []*string `json:"policies,omitempty" tf:"policies,omitempty"`
}

type TokenExchangeScopeInitParameters struct {

	// The decision strategy, can be one of UNANIMOUS, AFFIRMATIVE, or CONSENSUS.
	DecisionStrategy *string `json:"decisionStrategy,omitempty" tf:"decision_strategy,omitempty"`

	// A description for the permission scope
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// A list of policy IDs
	// +listType=set
	Policies []*string `json:"policies,omitempty" tf:"policies,omitempty"`
}

type TokenExchangeScopeObservation struct {

	// The decision strategy, can be one of UNANIMOUS, AFFIRMATIVE, or CONSENSUS.
	DecisionStrategy *string `json:"decisionStrategy,omitempty" tf:"decision_strategy,omitempty"`

	// A description for the permission scope
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// A list of policy IDs
	// +listType=set
	Policies []*string `json:"policies,omitempty" tf:"policies,omitempty"`
}

type TokenExchangeScopeParameters struct {

	// The decision strategy, can be one of UNANIMOUS, AFFIRMATIVE, or CONSENSUS.
	// +kubebuilder:validation:Optional
	DecisionStrategy *string `json:"decisionStrategy,omitempty" tf:"decision_strategy,omitempty"`

	// A description for the permission scope
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// A list of policy IDs
	// +kubebuilder:validation:Optional
	// +listType=set
	Policies []*string `json:"policies,omitempty" tf:"policies,omitempty"`
}

type ViewScopeInitParameters struct {

	// The decision strategy, can be one of UNANIMOUS, AFFIRMATIVE, or CONSENSUS.
	DecisionStrategy *string `json:"decisionStrategy,omitempty" tf:"decision_strategy,omitempty"`

	// A description for the permission scope
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// A list of policy IDs
	// +listType=set
	Policies []*string `json:"policies,omitempty" tf:"policies,omitempty"`
}

type ViewScopeObservation struct {

	// The decision strategy, can be one of UNANIMOUS, AFFIRMATIVE, or CONSENSUS.
	DecisionStrategy *string `json:"decisionStrategy,omitempty" tf:"decision_strategy,omitempty"`

	// A description for the permission scope
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// A list of policy IDs
	// +listType=set
	Policies []*string `json:"policies,omitempty" tf:"policies,omitempty"`
}

type ViewScopeParameters struct {

	// The decision strategy, can be one of UNANIMOUS, AFFIRMATIVE, or CONSENSUS.
	// +kubebuilder:validation:Optional
	DecisionStrategy *string `json:"decisionStrategy,omitempty" tf:"decision_strategy,omitempty"`

	// A description for the permission scope
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// A list of policy IDs
	// +kubebuilder:validation:Optional
	// +listType=set
	Policies []*string `json:"policies,omitempty" tf:"policies,omitempty"`
}

// ClientPermissionsSpec defines the desired state of ClientPermissions
type ClientPermissionsSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ClientPermissionsParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ClientPermissionsInitParameters `json:"initProvider,omitempty"`
}

// ClientPermissionsStatus defines the observed state of ClientPermissions.
type ClientPermissionsStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ClientPermissionsObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ClientPermissions is the Schema for the ClientPermissionss API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,keycloak}
type ClientPermissions struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ClientPermissionsSpec   `json:"spec"`
	Status            ClientPermissionsStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ClientPermissionsList contains a list of ClientPermissionss
type ClientPermissionsList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ClientPermissions `json:"items"`
}

// Repository type metadata.
var (
	ClientPermissions_Kind             = "ClientPermissions"
	ClientPermissions_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ClientPermissions_Kind}.String()
	ClientPermissions_KindAPIVersion   = ClientPermissions_Kind + "." + CRDGroupVersion.String()
	ClientPermissions_GroupVersionKind = CRDGroupVersion.WithKind(ClientPermissions_Kind)
)

func init() {
	SchemeBuilder.Register(&ClientPermissions{}, &ClientPermissionsList{})
}
