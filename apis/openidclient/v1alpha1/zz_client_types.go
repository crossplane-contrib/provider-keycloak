/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AuthenticationFlowBindingOverridesInitParameters struct {

	// Browser flow id, (flow needs to exist)
	BrowserID *string `json:"browserId,omitempty" tf:"browser_id,omitempty"`

	// Direct grant flow id (flow needs to exist)
	DirectGrantID *string `json:"directGrantId,omitempty" tf:"direct_grant_id,omitempty"`
}

type AuthenticationFlowBindingOverridesObservation struct {

	// Browser flow id, (flow needs to exist)
	BrowserID *string `json:"browserId,omitempty" tf:"browser_id,omitempty"`

	// Direct grant flow id (flow needs to exist)
	DirectGrantID *string `json:"directGrantId,omitempty" tf:"direct_grant_id,omitempty"`
}

type AuthenticationFlowBindingOverridesParameters struct {

	// Browser flow id, (flow needs to exist)
	// +kubebuilder:validation:Optional
	BrowserID *string `json:"browserId,omitempty" tf:"browser_id,omitempty"`

	// Direct grant flow id (flow needs to exist)
	// +kubebuilder:validation:Optional
	DirectGrantID *string `json:"directGrantId,omitempty" tf:"direct_grant_id,omitempty"`
}

type AuthorizationInitParameters struct {

	// When true, resources can be managed remotely by the resource server. Defaults to false.
	AllowRemoteResourceManagement *bool `json:"allowRemoteResourceManagement,omitempty" tf:"allow_remote_resource_management,omitempty"`

	// Dictates how the policies associated with a given permission are evaluated and how a final decision is obtained. Could be one of AFFIRMATIVE, CONSENSUS, or UNANIMOUS. Applies to permissions.
	DecisionStrategy *string `json:"decisionStrategy,omitempty" tf:"decision_strategy,omitempty"`

	// When true, defaults set by Keycloak will be respected. Defaults to false.
	KeepDefaults *bool `json:"keepDefaults,omitempty" tf:"keep_defaults,omitempty"`

	// Dictates how policies are enforced when evaluating authorization requests. Can be one of ENFORCING, PERMISSIVE, or DISABLED.
	PolicyEnforcementMode *string `json:"policyEnforcementMode,omitempty" tf:"policy_enforcement_mode,omitempty"`
}

type AuthorizationObservation struct {

	// When true, resources can be managed remotely by the resource server. Defaults to false.
	AllowRemoteResourceManagement *bool `json:"allowRemoteResourceManagement,omitempty" tf:"allow_remote_resource_management,omitempty"`

	// Dictates how the policies associated with a given permission are evaluated and how a final decision is obtained. Could be one of AFFIRMATIVE, CONSENSUS, or UNANIMOUS. Applies to permissions.
	DecisionStrategy *string `json:"decisionStrategy,omitempty" tf:"decision_strategy,omitempty"`

	// When true, defaults set by Keycloak will be respected. Defaults to false.
	KeepDefaults *bool `json:"keepDefaults,omitempty" tf:"keep_defaults,omitempty"`

	// Dictates how policies are enforced when evaluating authorization requests. Can be one of ENFORCING, PERMISSIVE, or DISABLED.
	PolicyEnforcementMode *string `json:"policyEnforcementMode,omitempty" tf:"policy_enforcement_mode,omitempty"`
}

type AuthorizationParameters struct {

	// When true, resources can be managed remotely by the resource server. Defaults to false.
	// +kubebuilder:validation:Optional
	AllowRemoteResourceManagement *bool `json:"allowRemoteResourceManagement,omitempty" tf:"allow_remote_resource_management,omitempty"`

	// Dictates how the policies associated with a given permission are evaluated and how a final decision is obtained. Could be one of AFFIRMATIVE, CONSENSUS, or UNANIMOUS. Applies to permissions.
	// +kubebuilder:validation:Optional
	DecisionStrategy *string `json:"decisionStrategy,omitempty" tf:"decision_strategy,omitempty"`

	// When true, defaults set by Keycloak will be respected. Defaults to false.
	// +kubebuilder:validation:Optional
	KeepDefaults *bool `json:"keepDefaults,omitempty" tf:"keep_defaults,omitempty"`

	// Dictates how policies are enforced when evaluating authorization requests. Can be one of ENFORCING, PERMISSIVE, or DISABLED.
	// +kubebuilder:validation:Optional
	PolicyEnforcementMode *string `json:"policyEnforcementMode" tf:"policy_enforcement_mode,omitempty"`
}

type ClientInitParameters struct {

	// The amount of time in seconds before an access token expires. This will override the default for the realm.
	AccessTokenLifespan *string `json:"accessTokenLifespan,omitempty" tf:"access_token_lifespan,omitempty"`

	// Specifies the type of client, which can be one of the following:
	AccessType *string `json:"accessType,omitempty" tf:"access_type,omitempty"`

	// URL to the admin interface of the client.
	AdminURL *string `json:"adminUrl,omitempty" tf:"admin_url,omitempty"`

	// Override realm authentication flow bindings
	AuthenticationFlowBindingOverrides []AuthenticationFlowBindingOverridesInitParameters `json:"authenticationFlowBindingOverrides,omitempty" tf:"authentication_flow_binding_overrides,omitempty"`

	// When this block is present, fine-grained authorization will be enabled for this client. The client's access_type must be CONFIDENTIAL, and service_accounts_enabled must be true. This block has the following arguments:
	Authorization []AuthorizationInitParameters `json:"authorization,omitempty" tf:"authorization,omitempty"`

	// Specifying whether a "revoke_offline_access" event is included in the Logout Token when the Backchannel Logout URL is used. Keycloak will revoke offline sessions when receiving a Logout Token with this event.
	BackchannelLogoutRevokeOfflineSessions *bool `json:"backchannelLogoutRevokeOfflineSessions,omitempty" tf:"backchannel_logout_revoke_offline_sessions,omitempty"`

	// When true, a sid (session ID) claim will be included in the logout token when the backchannel logout URL is used. Defaults to true.
	BackchannelLogoutSessionRequired *bool `json:"backchannelLogoutSessionRequired,omitempty" tf:"backchannel_logout_session_required,omitempty"`

	// The URL that will cause the client to log itself out when a logout request is sent to this realm. If omitted, no logout request will be sent to the client is this case.
	BackchannelLogoutURL *string `json:"backchannelLogoutUrl,omitempty" tf:"backchannel_logout_url,omitempty"`

	// Default URL to use when the auth server needs to redirect or link back to the client.
	BaseURL *string `json:"baseUrl,omitempty" tf:"base_url,omitempty"`

	// Defaults to client-secret. The authenticator type for clients with an access_type of CONFIDENTIAL or BEARER-ONLY. A default Keycloak installation will have the following available types:
	ClientAuthenticatorType *string `json:"clientAuthenticatorType,omitempty" tf:"client_authenticator_type,omitempty"`

	// The Client ID for this client, referenced in the URI during authentication and in issued tokens.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-keycloak/apis/openidclient/v1alpha1.Client
	// +crossplane:generate:reference:extractor=github.com/crossplane-contrib/provider-keycloak/config/common.UUIDExtractor()
	ClientID *string `json:"clientId,omitempty" tf:"client_id,omitempty"`

	// Reference to a Client in openidclient to populate clientId.
	// +kubebuilder:validation:Optional
	ClientIDRef *v1.Reference `json:"clientIdRef,omitempty" tf:"-"`

	// Selector for a Client in openidclient to populate clientId.
	// +kubebuilder:validation:Optional
	ClientIDSelector *v1.Selector `json:"clientIdSelector,omitempty" tf:"-"`

	// Time a client session is allowed to be idle before it expires. Tokens are invalidated when a client session is expired. If not set it uses the standard SSO Session Idle value.
	ClientOfflineSessionIdleTimeout *string `json:"clientOfflineSessionIdleTimeout,omitempty" tf:"client_offline_session_idle_timeout,omitempty"`

	// Max time before a client session is expired. Tokens are invalidated when a client session is expired. If not set, it uses the standard SSO Session Max value.
	ClientOfflineSessionMaxLifespan *string `json:"clientOfflineSessionMaxLifespan,omitempty" tf:"client_offline_session_max_lifespan,omitempty"`

	// The secret for clients with an access_type of CONFIDENTIAL or BEARER-ONLY. This value is sensitive and should be treated with the same care as a password. If omitted, this will be generated by Keycloak.
	ClientSecretSecretRef *v1.SecretKeySelector `json:"clientSecretSecretRef,omitempty" tf:"-"`

	// Time a client offline session is allowed to be idle before it expires. Offline tokens are invalidated when a client offline session is expired. If not set it uses the Offline Session Idle value.
	ClientSessionIdleTimeout *string `json:"clientSessionIdleTimeout,omitempty" tf:"client_session_idle_timeout,omitempty"`

	// Max time before a client offline session is expired. Offline tokens are invalidated when a client offline session is expired. If not set, it uses the Offline Session Max value.
	ClientSessionMaxLifespan *string `json:"clientSessionMaxLifespan,omitempty" tf:"client_session_max_lifespan,omitempty"`

	// When true, users have to consent to client access. Defaults to false.
	ConsentRequired *bool `json:"consentRequired,omitempty" tf:"consent_required,omitempty"`

	// The text to display on the consent screen about permissions specific to this client. This is applicable only when display_on_consent_screen is true.
	ConsentScreenText *string `json:"consentScreenText,omitempty" tf:"consent_screen_text,omitempty"`

	// The description of this client in the GUI.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// When true, the OAuth2 Resource Owner Password Grant will be enabled for this client. Defaults to false.
	DirectAccessGrantsEnabled *bool `json:"directAccessGrantsEnabled,omitempty" tf:"direct_access_grants_enabled,omitempty"`

	// When true, the consent screen will display information about the client itself. Defaults to false. This is applicable only when consent_required is true.
	DisplayOnConsentScreen *bool `json:"displayOnConsentScreen,omitempty" tf:"display_on_consent_screen,omitempty"`

	// When false, this client will not be able to initiate a login or obtain access tokens. Defaults to true.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// When true, the parameter session_state will not be included in OpenID Connect Authentication Response.
	ExcludeSessionStateFromAuthResponse *bool `json:"excludeSessionStateFromAuthResponse,omitempty" tf:"exclude_session_state_from_auth_response,omitempty"`

	// A map of key/value pairs to add extra configuration attributes to this client. Use this attribute at your own risk, as it may conflict with top-level configuration attributes in future provider updates. For example, the extra_config map can be used to set Authentication Context Class Reference (ACR) to Level of Authentication (LoA) mapping
	// +mapType=granular
	ExtraConfig map[string]*string `json:"extraConfig,omitempty" tf:"extra_config,omitempty"`

	// When true, frontchannel logout will be enabled for this client. Specify the url with frontchannel_logout_url. Defaults to false.
	FrontchannelLogoutEnabled *bool `json:"frontchannelLogoutEnabled,omitempty" tf:"frontchannel_logout_enabled,omitempty"`

	// The frontchannel logout url. This is applicable only when frontchannel_logout_enabled is true.
	FrontchannelLogoutURL *string `json:"frontchannelLogoutUrl,omitempty" tf:"frontchannel_logout_url,omitempty"`

	// Allow to include all roles mappings in the access token.
	FullScopeAllowed *bool `json:"fullScopeAllowed,omitempty" tf:"full_scope_allowed,omitempty"`

	// When true, the OAuth2 Implicit Grant will be enabled for this client. Defaults to false.
	ImplicitFlowEnabled *bool `json:"implicitFlowEnabled,omitempty" tf:"implicit_flow_enabled,omitempty"`

	// When true, the client with the specified client_id is assumed to already exist, and it will be imported into state instead of being created. This attribute is useful when dealing with clients that Keycloak creates automatically during realm creation, such as account and admin-cli. Note, that the client will not be removed during destruction if import is true.
	Import *bool `json:"import,omitempty" tf:"import,omitempty"`

	// The client login theme. This will override the default theme for the realm.
	LoginTheme *string `json:"loginTheme,omitempty" tf:"login_theme,omitempty"`

	// The display name of this client in the GUI.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Enables support for OAuth 2.0 Device Authorization Grant, which means that client is an application on device that has limited input capabilities or lack a suitable browser.
	Oauth2DeviceAuthorizationGrantEnabled *bool `json:"oauth2DeviceAuthorizationGrantEnabled,omitempty" tf:"oauth2_device_authorization_grant_enabled,omitempty"`

	// The maximum amount of time a client has to finish the device code flow before it expires.
	Oauth2DeviceCodeLifespan *string `json:"oauth2DeviceCodeLifespan,omitempty" tf:"oauth2_device_code_lifespan,omitempty"`

	// The minimum amount of time in seconds that the client should wait between polling requests to the token endpoint.
	Oauth2DevicePollingInterval *string `json:"oauth2DevicePollingInterval,omitempty" tf:"oauth2_device_polling_interval,omitempty"`

	// The challenge method to use for Proof Key for Code Exchange. Can be either plain or S256 or set to empty value “.
	PkceCodeChallengeMethod *string `json:"pkceCodeChallengeMethod,omitempty" tf:"pkce_code_challenge_method,omitempty"`

	// The realm this client is attached to.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-keycloak/apis/realm/v1alpha1.Realm
	RealmID *string `json:"realmId,omitempty" tf:"realm_id,omitempty"`

	// Reference to a Realm in realm to populate realmId.
	// +kubebuilder:validation:Optional
	RealmIDRef *v1.Reference `json:"realmIdRef,omitempty" tf:"-"`

	// Selector for a Realm in realm to populate realmId.
	// +kubebuilder:validation:Optional
	RealmIDSelector *v1.Selector `json:"realmIdSelector,omitempty" tf:"-"`

	// When specified, this URL is prepended to any relative URLs found within valid_redirect_uris, web_origins, and admin_url. NOTE: Due to limitations in the Keycloak API, when the root_url attribute is used, the valid_redirect_uris, web_origins, and admin_url attributes will be required.
	RootURL *string `json:"rootUrl,omitempty" tf:"root_url,omitempty"`

	// When true, the OAuth2 Client Credentials grant will be enabled for this client. Defaults to false.
	ServiceAccountsEnabled *bool `json:"serviceAccountsEnabled,omitempty" tf:"service_accounts_enabled,omitempty"`

	// When true, the OAuth2 Authorization Code Grant will be enabled for this client. Defaults to false.
	StandardFlowEnabled *bool `json:"standardFlowEnabled,omitempty" tf:"standard_flow_enabled,omitempty"`

	// If this is true, a refresh_token will be created and added to the token response. If this is false then no refresh_token will be generated.  Defaults to true.
	UseRefreshTokens *bool `json:"useRefreshTokens,omitempty" tf:"use_refresh_tokens,omitempty"`

	// If this is true, a refresh_token will be created and added to the token response if the client_credentials grant is used and a user session will be created. If this is false then no refresh_token will be generated and the associated user session will be removed, in accordance with OAuth 2.0 RFC6749 Section 4.4.3. Defaults to false.
	UseRefreshTokensClientCredentials *bool `json:"useRefreshTokensClientCredentials,omitempty" tf:"use_refresh_tokens_client_credentials,omitempty"`

	// A list of valid URIs a browser is permitted to redirect to after a successful logout.
	// +listType=set
	ValidPostLogoutRedirectUris []*string `json:"validPostLogoutRedirectUris,omitempty" tf:"valid_post_logout_redirect_uris,omitempty"`

	// A list of valid URIs a browser is permitted to redirect to after a successful login or logout. Simple
	// wildcards in the form of an asterisk can be used here. This attribute must be set if either standard_flow_enabled or implicit_flow_enabled
	// is set to true.
	// +listType=set
	ValidRedirectUris []*string `json:"validRedirectUris,omitempty" tf:"valid_redirect_uris,omitempty"`

	// A list of allowed CORS origins. To permit all valid redirect URIs, add +. Note that this will not include the * wildcard. To permit all origins, explicitly add *."
	// +listType=set
	WebOrigins []*string `json:"webOrigins,omitempty" tf:"web_origins,omitempty"`
}

type ClientObservation struct {

	// The amount of time in seconds before an access token expires. This will override the default for the realm.
	AccessTokenLifespan *string `json:"accessTokenLifespan,omitempty" tf:"access_token_lifespan,omitempty"`

	// Specifies the type of client, which can be one of the following:
	AccessType *string `json:"accessType,omitempty" tf:"access_type,omitempty"`

	// URL to the admin interface of the client.
	AdminURL *string `json:"adminUrl,omitempty" tf:"admin_url,omitempty"`

	// Override realm authentication flow bindings
	AuthenticationFlowBindingOverrides []AuthenticationFlowBindingOverridesObservation `json:"authenticationFlowBindingOverrides,omitempty" tf:"authentication_flow_binding_overrides,omitempty"`

	// When this block is present, fine-grained authorization will be enabled for this client. The client's access_type must be CONFIDENTIAL, and service_accounts_enabled must be true. This block has the following arguments:
	Authorization []AuthorizationObservation `json:"authorization,omitempty" tf:"authorization,omitempty"`

	// Specifying whether a "revoke_offline_access" event is included in the Logout Token when the Backchannel Logout URL is used. Keycloak will revoke offline sessions when receiving a Logout Token with this event.
	BackchannelLogoutRevokeOfflineSessions *bool `json:"backchannelLogoutRevokeOfflineSessions,omitempty" tf:"backchannel_logout_revoke_offline_sessions,omitempty"`

	// When true, a sid (session ID) claim will be included in the logout token when the backchannel logout URL is used. Defaults to true.
	BackchannelLogoutSessionRequired *bool `json:"backchannelLogoutSessionRequired,omitempty" tf:"backchannel_logout_session_required,omitempty"`

	// The URL that will cause the client to log itself out when a logout request is sent to this realm. If omitted, no logout request will be sent to the client is this case.
	BackchannelLogoutURL *string `json:"backchannelLogoutUrl,omitempty" tf:"backchannel_logout_url,omitempty"`

	// Default URL to use when the auth server needs to redirect or link back to the client.
	BaseURL *string `json:"baseUrl,omitempty" tf:"base_url,omitempty"`

	// Defaults to client-secret. The authenticator type for clients with an access_type of CONFIDENTIAL or BEARER-ONLY. A default Keycloak installation will have the following available types:
	ClientAuthenticatorType *string `json:"clientAuthenticatorType,omitempty" tf:"client_authenticator_type,omitempty"`

	// The Client ID for this client, referenced in the URI during authentication and in issued tokens.
	ClientID *string `json:"clientId,omitempty" tf:"client_id,omitempty"`

	// Time a client session is allowed to be idle before it expires. Tokens are invalidated when a client session is expired. If not set it uses the standard SSO Session Idle value.
	ClientOfflineSessionIdleTimeout *string `json:"clientOfflineSessionIdleTimeout,omitempty" tf:"client_offline_session_idle_timeout,omitempty"`

	// Max time before a client session is expired. Tokens are invalidated when a client session is expired. If not set, it uses the standard SSO Session Max value.
	ClientOfflineSessionMaxLifespan *string `json:"clientOfflineSessionMaxLifespan,omitempty" tf:"client_offline_session_max_lifespan,omitempty"`

	// Time a client offline session is allowed to be idle before it expires. Offline tokens are invalidated when a client offline session is expired. If not set it uses the Offline Session Idle value.
	ClientSessionIdleTimeout *string `json:"clientSessionIdleTimeout,omitempty" tf:"client_session_idle_timeout,omitempty"`

	// Max time before a client offline session is expired. Offline tokens are invalidated when a client offline session is expired. If not set, it uses the Offline Session Max value.
	ClientSessionMaxLifespan *string `json:"clientSessionMaxLifespan,omitempty" tf:"client_session_max_lifespan,omitempty"`

	// When true, users have to consent to client access. Defaults to false.
	ConsentRequired *bool `json:"consentRequired,omitempty" tf:"consent_required,omitempty"`

	// The text to display on the consent screen about permissions specific to this client. This is applicable only when display_on_consent_screen is true.
	ConsentScreenText *string `json:"consentScreenText,omitempty" tf:"consent_screen_text,omitempty"`

	// The description of this client in the GUI.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// When true, the OAuth2 Resource Owner Password Grant will be enabled for this client. Defaults to false.
	DirectAccessGrantsEnabled *bool `json:"directAccessGrantsEnabled,omitempty" tf:"direct_access_grants_enabled,omitempty"`

	// When true, the consent screen will display information about the client itself. Defaults to false. This is applicable only when consent_required is true.
	DisplayOnConsentScreen *bool `json:"displayOnConsentScreen,omitempty" tf:"display_on_consent_screen,omitempty"`

	// When false, this client will not be able to initiate a login or obtain access tokens. Defaults to true.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// When true, the parameter session_state will not be included in OpenID Connect Authentication Response.
	ExcludeSessionStateFromAuthResponse *bool `json:"excludeSessionStateFromAuthResponse,omitempty" tf:"exclude_session_state_from_auth_response,omitempty"`

	// A map of key/value pairs to add extra configuration attributes to this client. Use this attribute at your own risk, as it may conflict with top-level configuration attributes in future provider updates. For example, the extra_config map can be used to set Authentication Context Class Reference (ACR) to Level of Authentication (LoA) mapping
	// +mapType=granular
	ExtraConfig map[string]*string `json:"extraConfig,omitempty" tf:"extra_config,omitempty"`

	// When true, frontchannel logout will be enabled for this client. Specify the url with frontchannel_logout_url. Defaults to false.
	FrontchannelLogoutEnabled *bool `json:"frontchannelLogoutEnabled,omitempty" tf:"frontchannel_logout_enabled,omitempty"`

	// The frontchannel logout url. This is applicable only when frontchannel_logout_enabled is true.
	FrontchannelLogoutURL *string `json:"frontchannelLogoutUrl,omitempty" tf:"frontchannel_logout_url,omitempty"`

	// Allow to include all roles mappings in the access token.
	FullScopeAllowed *bool `json:"fullScopeAllowed,omitempty" tf:"full_scope_allowed,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// When true, the OAuth2 Implicit Grant will be enabled for this client. Defaults to false.
	ImplicitFlowEnabled *bool `json:"implicitFlowEnabled,omitempty" tf:"implicit_flow_enabled,omitempty"`

	// When true, the client with the specified client_id is assumed to already exist, and it will be imported into state instead of being created. This attribute is useful when dealing with clients that Keycloak creates automatically during realm creation, such as account and admin-cli. Note, that the client will not be removed during destruction if import is true.
	Import *bool `json:"import,omitempty" tf:"import,omitempty"`

	// The client login theme. This will override the default theme for the realm.
	LoginTheme *string `json:"loginTheme,omitempty" tf:"login_theme,omitempty"`

	// The display name of this client in the GUI.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Enables support for OAuth 2.0 Device Authorization Grant, which means that client is an application on device that has limited input capabilities or lack a suitable browser.
	Oauth2DeviceAuthorizationGrantEnabled *bool `json:"oauth2DeviceAuthorizationGrantEnabled,omitempty" tf:"oauth2_device_authorization_grant_enabled,omitempty"`

	// The maximum amount of time a client has to finish the device code flow before it expires.
	Oauth2DeviceCodeLifespan *string `json:"oauth2DeviceCodeLifespan,omitempty" tf:"oauth2_device_code_lifespan,omitempty"`

	// The minimum amount of time in seconds that the client should wait between polling requests to the token endpoint.
	Oauth2DevicePollingInterval *string `json:"oauth2DevicePollingInterval,omitempty" tf:"oauth2_device_polling_interval,omitempty"`

	// The challenge method to use for Proof Key for Code Exchange. Can be either plain or S256 or set to empty value “.
	PkceCodeChallengeMethod *string `json:"pkceCodeChallengeMethod,omitempty" tf:"pkce_code_challenge_method,omitempty"`

	// The realm this client is attached to.
	RealmID *string `json:"realmId,omitempty" tf:"realm_id,omitempty"`

	// (Computed) When authorization is enabled for this client, this attribute is the unique ID for the client (the same value as the .id attribute).
	ResourceServerID *string `json:"resourceServerId,omitempty" tf:"resource_server_id,omitempty"`

	// When specified, this URL is prepended to any relative URLs found within valid_redirect_uris, web_origins, and admin_url. NOTE: Due to limitations in the Keycloak API, when the root_url attribute is used, the valid_redirect_uris, web_origins, and admin_url attributes will be required.
	RootURL *string `json:"rootUrl,omitempty" tf:"root_url,omitempty"`

	// (Computed) When service accounts are enabled for this client, this attribute is the unique ID for the Keycloak user that represents this service account.
	ServiceAccountUserID *string `json:"serviceAccountUserId,omitempty" tf:"service_account_user_id,omitempty"`

	// When true, the OAuth2 Client Credentials grant will be enabled for this client. Defaults to false.
	ServiceAccountsEnabled *bool `json:"serviceAccountsEnabled,omitempty" tf:"service_accounts_enabled,omitempty"`

	// When true, the OAuth2 Authorization Code Grant will be enabled for this client. Defaults to false.
	StandardFlowEnabled *bool `json:"standardFlowEnabled,omitempty" tf:"standard_flow_enabled,omitempty"`

	// If this is true, a refresh_token will be created and added to the token response. If this is false then no refresh_token will be generated.  Defaults to true.
	UseRefreshTokens *bool `json:"useRefreshTokens,omitempty" tf:"use_refresh_tokens,omitempty"`

	// If this is true, a refresh_token will be created and added to the token response if the client_credentials grant is used and a user session will be created. If this is false then no refresh_token will be generated and the associated user session will be removed, in accordance with OAuth 2.0 RFC6749 Section 4.4.3. Defaults to false.
	UseRefreshTokensClientCredentials *bool `json:"useRefreshTokensClientCredentials,omitempty" tf:"use_refresh_tokens_client_credentials,omitempty"`

	// A list of valid URIs a browser is permitted to redirect to after a successful logout.
	// +listType=set
	ValidPostLogoutRedirectUris []*string `json:"validPostLogoutRedirectUris,omitempty" tf:"valid_post_logout_redirect_uris,omitempty"`

	// A list of valid URIs a browser is permitted to redirect to after a successful login or logout. Simple
	// wildcards in the form of an asterisk can be used here. This attribute must be set if either standard_flow_enabled or implicit_flow_enabled
	// is set to true.
	// +listType=set
	ValidRedirectUris []*string `json:"validRedirectUris,omitempty" tf:"valid_redirect_uris,omitempty"`

	// A list of allowed CORS origins. To permit all valid redirect URIs, add +. Note that this will not include the * wildcard. To permit all origins, explicitly add *."
	// +listType=set
	WebOrigins []*string `json:"webOrigins,omitempty" tf:"web_origins,omitempty"`
}

type ClientParameters struct {

	// The amount of time in seconds before an access token expires. This will override the default for the realm.
	// +kubebuilder:validation:Optional
	AccessTokenLifespan *string `json:"accessTokenLifespan,omitempty" tf:"access_token_lifespan,omitempty"`

	// Specifies the type of client, which can be one of the following:
	// +kubebuilder:validation:Optional
	AccessType *string `json:"accessType,omitempty" tf:"access_type,omitempty"`

	// URL to the admin interface of the client.
	// +kubebuilder:validation:Optional
	AdminURL *string `json:"adminUrl,omitempty" tf:"admin_url,omitempty"`

	// Override realm authentication flow bindings
	// +kubebuilder:validation:Optional
	AuthenticationFlowBindingOverrides []AuthenticationFlowBindingOverridesParameters `json:"authenticationFlowBindingOverrides,omitempty" tf:"authentication_flow_binding_overrides,omitempty"`

	// When this block is present, fine-grained authorization will be enabled for this client. The client's access_type must be CONFIDENTIAL, and service_accounts_enabled must be true. This block has the following arguments:
	// +kubebuilder:validation:Optional
	Authorization []AuthorizationParameters `json:"authorization,omitempty" tf:"authorization,omitempty"`

	// Specifying whether a "revoke_offline_access" event is included in the Logout Token when the Backchannel Logout URL is used. Keycloak will revoke offline sessions when receiving a Logout Token with this event.
	// +kubebuilder:validation:Optional
	BackchannelLogoutRevokeOfflineSessions *bool `json:"backchannelLogoutRevokeOfflineSessions,omitempty" tf:"backchannel_logout_revoke_offline_sessions,omitempty"`

	// When true, a sid (session ID) claim will be included in the logout token when the backchannel logout URL is used. Defaults to true.
	// +kubebuilder:validation:Optional
	BackchannelLogoutSessionRequired *bool `json:"backchannelLogoutSessionRequired,omitempty" tf:"backchannel_logout_session_required,omitempty"`

	// The URL that will cause the client to log itself out when a logout request is sent to this realm. If omitted, no logout request will be sent to the client is this case.
	// +kubebuilder:validation:Optional
	BackchannelLogoutURL *string `json:"backchannelLogoutUrl,omitempty" tf:"backchannel_logout_url,omitempty"`

	// Default URL to use when the auth server needs to redirect or link back to the client.
	// +kubebuilder:validation:Optional
	BaseURL *string `json:"baseUrl,omitempty" tf:"base_url,omitempty"`

	// Defaults to client-secret. The authenticator type for clients with an access_type of CONFIDENTIAL or BEARER-ONLY. A default Keycloak installation will have the following available types:
	// +kubebuilder:validation:Optional
	ClientAuthenticatorType *string `json:"clientAuthenticatorType,omitempty" tf:"client_authenticator_type,omitempty"`

	// The Client ID for this client, referenced in the URI during authentication and in issued tokens.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-keycloak/apis/openidclient/v1alpha1.Client
	// +crossplane:generate:reference:extractor=github.com/crossplane-contrib/provider-keycloak/config/common.UUIDExtractor()
	// +kubebuilder:validation:Optional
	ClientID *string `json:"clientId,omitempty" tf:"client_id,omitempty"`

	// Reference to a Client in openidclient to populate clientId.
	// +kubebuilder:validation:Optional
	ClientIDRef *v1.Reference `json:"clientIdRef,omitempty" tf:"-"`

	// Selector for a Client in openidclient to populate clientId.
	// +kubebuilder:validation:Optional
	ClientIDSelector *v1.Selector `json:"clientIdSelector,omitempty" tf:"-"`

	// Time a client session is allowed to be idle before it expires. Tokens are invalidated when a client session is expired. If not set it uses the standard SSO Session Idle value.
	// +kubebuilder:validation:Optional
	ClientOfflineSessionIdleTimeout *string `json:"clientOfflineSessionIdleTimeout,omitempty" tf:"client_offline_session_idle_timeout,omitempty"`

	// Max time before a client session is expired. Tokens are invalidated when a client session is expired. If not set, it uses the standard SSO Session Max value.
	// +kubebuilder:validation:Optional
	ClientOfflineSessionMaxLifespan *string `json:"clientOfflineSessionMaxLifespan,omitempty" tf:"client_offline_session_max_lifespan,omitempty"`

	// The secret for clients with an access_type of CONFIDENTIAL or BEARER-ONLY. This value is sensitive and should be treated with the same care as a password. If omitted, this will be generated by Keycloak.
	// +kubebuilder:validation:Optional
	ClientSecretSecretRef *v1.SecretKeySelector `json:"clientSecretSecretRef,omitempty" tf:"-"`

	// Time a client offline session is allowed to be idle before it expires. Offline tokens are invalidated when a client offline session is expired. If not set it uses the Offline Session Idle value.
	// +kubebuilder:validation:Optional
	ClientSessionIdleTimeout *string `json:"clientSessionIdleTimeout,omitempty" tf:"client_session_idle_timeout,omitempty"`

	// Max time before a client offline session is expired. Offline tokens are invalidated when a client offline session is expired. If not set, it uses the Offline Session Max value.
	// +kubebuilder:validation:Optional
	ClientSessionMaxLifespan *string `json:"clientSessionMaxLifespan,omitempty" tf:"client_session_max_lifespan,omitempty"`

	// When true, users have to consent to client access. Defaults to false.
	// +kubebuilder:validation:Optional
	ConsentRequired *bool `json:"consentRequired,omitempty" tf:"consent_required,omitempty"`

	// The text to display on the consent screen about permissions specific to this client. This is applicable only when display_on_consent_screen is true.
	// +kubebuilder:validation:Optional
	ConsentScreenText *string `json:"consentScreenText,omitempty" tf:"consent_screen_text,omitempty"`

	// The description of this client in the GUI.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// When true, the OAuth2 Resource Owner Password Grant will be enabled for this client. Defaults to false.
	// +kubebuilder:validation:Optional
	DirectAccessGrantsEnabled *bool `json:"directAccessGrantsEnabled,omitempty" tf:"direct_access_grants_enabled,omitempty"`

	// When true, the consent screen will display information about the client itself. Defaults to false. This is applicable only when consent_required is true.
	// +kubebuilder:validation:Optional
	DisplayOnConsentScreen *bool `json:"displayOnConsentScreen,omitempty" tf:"display_on_consent_screen,omitempty"`

	// When false, this client will not be able to initiate a login or obtain access tokens. Defaults to true.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// When true, the parameter session_state will not be included in OpenID Connect Authentication Response.
	// +kubebuilder:validation:Optional
	ExcludeSessionStateFromAuthResponse *bool `json:"excludeSessionStateFromAuthResponse,omitempty" tf:"exclude_session_state_from_auth_response,omitempty"`

	// A map of key/value pairs to add extra configuration attributes to this client. Use this attribute at your own risk, as it may conflict with top-level configuration attributes in future provider updates. For example, the extra_config map can be used to set Authentication Context Class Reference (ACR) to Level of Authentication (LoA) mapping
	// +kubebuilder:validation:Optional
	// +mapType=granular
	ExtraConfig map[string]*string `json:"extraConfig,omitempty" tf:"extra_config,omitempty"`

	// When true, frontchannel logout will be enabled for this client. Specify the url with frontchannel_logout_url. Defaults to false.
	// +kubebuilder:validation:Optional
	FrontchannelLogoutEnabled *bool `json:"frontchannelLogoutEnabled,omitempty" tf:"frontchannel_logout_enabled,omitempty"`

	// The frontchannel logout url. This is applicable only when frontchannel_logout_enabled is true.
	// +kubebuilder:validation:Optional
	FrontchannelLogoutURL *string `json:"frontchannelLogoutUrl,omitempty" tf:"frontchannel_logout_url,omitempty"`

	// Allow to include all roles mappings in the access token.
	// +kubebuilder:validation:Optional
	FullScopeAllowed *bool `json:"fullScopeAllowed,omitempty" tf:"full_scope_allowed,omitempty"`

	// When true, the OAuth2 Implicit Grant will be enabled for this client. Defaults to false.
	// +kubebuilder:validation:Optional
	ImplicitFlowEnabled *bool `json:"implicitFlowEnabled,omitempty" tf:"implicit_flow_enabled,omitempty"`

	// When true, the client with the specified client_id is assumed to already exist, and it will be imported into state instead of being created. This attribute is useful when dealing with clients that Keycloak creates automatically during realm creation, such as account and admin-cli. Note, that the client will not be removed during destruction if import is true.
	// +kubebuilder:validation:Optional
	Import *bool `json:"import,omitempty" tf:"import,omitempty"`

	// The client login theme. This will override the default theme for the realm.
	// +kubebuilder:validation:Optional
	LoginTheme *string `json:"loginTheme,omitempty" tf:"login_theme,omitempty"`

	// The display name of this client in the GUI.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Enables support for OAuth 2.0 Device Authorization Grant, which means that client is an application on device that has limited input capabilities or lack a suitable browser.
	// +kubebuilder:validation:Optional
	Oauth2DeviceAuthorizationGrantEnabled *bool `json:"oauth2DeviceAuthorizationGrantEnabled,omitempty" tf:"oauth2_device_authorization_grant_enabled,omitempty"`

	// The maximum amount of time a client has to finish the device code flow before it expires.
	// +kubebuilder:validation:Optional
	Oauth2DeviceCodeLifespan *string `json:"oauth2DeviceCodeLifespan,omitempty" tf:"oauth2_device_code_lifespan,omitempty"`

	// The minimum amount of time in seconds that the client should wait between polling requests to the token endpoint.
	// +kubebuilder:validation:Optional
	Oauth2DevicePollingInterval *string `json:"oauth2DevicePollingInterval,omitempty" tf:"oauth2_device_polling_interval,omitempty"`

	// The challenge method to use for Proof Key for Code Exchange. Can be either plain or S256 or set to empty value “.
	// +kubebuilder:validation:Optional
	PkceCodeChallengeMethod *string `json:"pkceCodeChallengeMethod,omitempty" tf:"pkce_code_challenge_method,omitempty"`

	// The realm this client is attached to.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-keycloak/apis/realm/v1alpha1.Realm
	// +kubebuilder:validation:Optional
	RealmID *string `json:"realmId,omitempty" tf:"realm_id,omitempty"`

	// Reference to a Realm in realm to populate realmId.
	// +kubebuilder:validation:Optional
	RealmIDRef *v1.Reference `json:"realmIdRef,omitempty" tf:"-"`

	// Selector for a Realm in realm to populate realmId.
	// +kubebuilder:validation:Optional
	RealmIDSelector *v1.Selector `json:"realmIdSelector,omitempty" tf:"-"`

	// When specified, this URL is prepended to any relative URLs found within valid_redirect_uris, web_origins, and admin_url. NOTE: Due to limitations in the Keycloak API, when the root_url attribute is used, the valid_redirect_uris, web_origins, and admin_url attributes will be required.
	// +kubebuilder:validation:Optional
	RootURL *string `json:"rootUrl,omitempty" tf:"root_url,omitempty"`

	// When true, the OAuth2 Client Credentials grant will be enabled for this client. Defaults to false.
	// +kubebuilder:validation:Optional
	ServiceAccountsEnabled *bool `json:"serviceAccountsEnabled,omitempty" tf:"service_accounts_enabled,omitempty"`

	// When true, the OAuth2 Authorization Code Grant will be enabled for this client. Defaults to false.
	// +kubebuilder:validation:Optional
	StandardFlowEnabled *bool `json:"standardFlowEnabled,omitempty" tf:"standard_flow_enabled,omitempty"`

	// If this is true, a refresh_token will be created and added to the token response. If this is false then no refresh_token will be generated.  Defaults to true.
	// +kubebuilder:validation:Optional
	UseRefreshTokens *bool `json:"useRefreshTokens,omitempty" tf:"use_refresh_tokens,omitempty"`

	// If this is true, a refresh_token will be created and added to the token response if the client_credentials grant is used and a user session will be created. If this is false then no refresh_token will be generated and the associated user session will be removed, in accordance with OAuth 2.0 RFC6749 Section 4.4.3. Defaults to false.
	// +kubebuilder:validation:Optional
	UseRefreshTokensClientCredentials *bool `json:"useRefreshTokensClientCredentials,omitempty" tf:"use_refresh_tokens_client_credentials,omitempty"`

	// A list of valid URIs a browser is permitted to redirect to after a successful logout.
	// +kubebuilder:validation:Optional
	// +listType=set
	ValidPostLogoutRedirectUris []*string `json:"validPostLogoutRedirectUris,omitempty" tf:"valid_post_logout_redirect_uris,omitempty"`

	// A list of valid URIs a browser is permitted to redirect to after a successful login or logout. Simple
	// wildcards in the form of an asterisk can be used here. This attribute must be set if either standard_flow_enabled or implicit_flow_enabled
	// is set to true.
	// +kubebuilder:validation:Optional
	// +listType=set
	ValidRedirectUris []*string `json:"validRedirectUris,omitempty" tf:"valid_redirect_uris,omitempty"`

	// A list of allowed CORS origins. To permit all valid redirect URIs, add +. Note that this will not include the * wildcard. To permit all origins, explicitly add *."
	// +kubebuilder:validation:Optional
	// +listType=set
	WebOrigins []*string `json:"webOrigins,omitempty" tf:"web_origins,omitempty"`
}

// ClientSpec defines the desired state of Client
type ClientSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ClientParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ClientInitParameters `json:"initProvider,omitempty"`
}

// ClientStatus defines the observed state of Client.
type ClientStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ClientObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Client is the Schema for the Clients API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,keycloak}
type Client struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.accessType) || (has(self.initProvider) && has(self.initProvider.accessType))",message="spec.forProvider.accessType is a required parameter"
	Spec   ClientSpec   `json:"spec"`
	Status ClientStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ClientList contains a list of Clients
type ClientList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Client `json:"items"`
}

// Repository type metadata.
var (
	Client_Kind             = "Client"
	Client_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Client_Kind}.String()
	Client_KindAPIVersion   = Client_Kind + "." + CRDGroupVersion.String()
	Client_GroupVersionKind = CRDGroupVersion.WithKind(Client_Kind)
)

func init() {
	SchemeBuilder.Register(&Client{}, &ClientList{})
}
