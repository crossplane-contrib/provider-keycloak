/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DomainInitParameters struct {

	// The name of the organization.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Whether domain is verified or not. Default is false.
	Verified *bool `json:"verified,omitempty" tf:"verified,omitempty"`
}

type DomainObservation struct {

	// The name of the organization.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Whether domain is verified or not. Default is false.
	Verified *bool `json:"verified,omitempty" tf:"verified,omitempty"`
}

type DomainParameters struct {

	// The name of the organization.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// Whether domain is verified or not. Default is false.
	// +kubebuilder:validation:Optional
	Verified *bool `json:"verified,omitempty" tf:"verified,omitempty"`
}

type OrganizationInitParameters struct {

	// The alias unique identifies the organization. Same as the name if not specified. The alias cannot be changed after the organization has been created.
	// The alias unique identifies the organization. Same as the name if not specified.
	Alias *string `json:"alias,omitempty" tf:"alias,omitempty"`

	// A map representing attributes for the group. In order to add multivalued attributes, use ## to separate the values. Max length for each value is 255 chars.
	// +mapType=granular
	Attributes map[string]*string `json:"attributes,omitempty" tf:"attributes,omitempty"`

	// The description of the organization.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// A list of domains. At least one domain is required.
	Domain []DomainInitParameters `json:"domain,omitempty" tf:"domain,omitempty"`

	// Enable/disable this organization.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// The name of the organization.
	// The name of the organization.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The realm this organization exists in.
	// Realm ID.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-keycloak/apis/realm/v1alpha1.Realm
	Realm *string `json:"realm,omitempty" tf:"realm,omitempty"`

	// Reference to a Realm in realm to populate realm.
	// +kubebuilder:validation:Optional
	RealmRef *v1.Reference `json:"realmRef,omitempty" tf:"-"`

	// Selector for a Realm in realm to populate realm.
	// +kubebuilder:validation:Optional
	RealmSelector *v1.Selector `json:"realmSelector,omitempty" tf:"-"`

	// The landing page after user completes registration or accepts an invitation to the organization. If left empty, the user will be redirected to the account console by default.
	// Landing page after successful login.
	RedirectURL *string `json:"redirectUrl,omitempty" tf:"redirect_url,omitempty"`
}

type OrganizationObservation struct {

	// The alias unique identifies the organization. Same as the name if not specified. The alias cannot be changed after the organization has been created.
	// The alias unique identifies the organization. Same as the name if not specified.
	Alias *string `json:"alias,omitempty" tf:"alias,omitempty"`

	// A map representing attributes for the group. In order to add multivalued attributes, use ## to separate the values. Max length for each value is 255 chars.
	// +mapType=granular
	Attributes map[string]*string `json:"attributes,omitempty" tf:"attributes,omitempty"`

	// The description of the organization.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// A list of domains. At least one domain is required.
	Domain []DomainObservation `json:"domain,omitempty" tf:"domain,omitempty"`

	// Enable/disable this organization.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The name of the organization.
	// The name of the organization.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The realm this organization exists in.
	// Realm ID.
	Realm *string `json:"realm,omitempty" tf:"realm,omitempty"`

	// The landing page after user completes registration or accepts an invitation to the organization. If left empty, the user will be redirected to the account console by default.
	// Landing page after successful login.
	RedirectURL *string `json:"redirectUrl,omitempty" tf:"redirect_url,omitempty"`
}

type OrganizationParameters struct {

	// The alias unique identifies the organization. Same as the name if not specified. The alias cannot be changed after the organization has been created.
	// The alias unique identifies the organization. Same as the name if not specified.
	// +kubebuilder:validation:Optional
	Alias *string `json:"alias,omitempty" tf:"alias,omitempty"`

	// A map representing attributes for the group. In order to add multivalued attributes, use ## to separate the values. Max length for each value is 255 chars.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Attributes map[string]*string `json:"attributes,omitempty" tf:"attributes,omitempty"`

	// The description of the organization.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// A list of domains. At least one domain is required.
	// +kubebuilder:validation:Optional
	Domain []DomainParameters `json:"domain,omitempty" tf:"domain,omitempty"`

	// Enable/disable this organization.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// The name of the organization.
	// The name of the organization.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The realm this organization exists in.
	// Realm ID.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-keycloak/apis/realm/v1alpha1.Realm
	// +kubebuilder:validation:Optional
	Realm *string `json:"realm,omitempty" tf:"realm,omitempty"`

	// Reference to a Realm in realm to populate realm.
	// +kubebuilder:validation:Optional
	RealmRef *v1.Reference `json:"realmRef,omitempty" tf:"-"`

	// Selector for a Realm in realm to populate realm.
	// +kubebuilder:validation:Optional
	RealmSelector *v1.Selector `json:"realmSelector,omitempty" tf:"-"`

	// The landing page after user completes registration or accepts an invitation to the organization. If left empty, the user will be redirected to the account console by default.
	// Landing page after successful login.
	// +kubebuilder:validation:Optional
	RedirectURL *string `json:"redirectUrl,omitempty" tf:"redirect_url,omitempty"`
}

// OrganizationSpec defines the desired state of Organization
type OrganizationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     OrganizationParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider OrganizationInitParameters `json:"initProvider,omitempty"`
}

// OrganizationStatus defines the observed state of Organization.
type OrganizationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        OrganizationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Organization is the Schema for the Organizations API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,keycloak}
type Organization struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.domain) || (has(self.initProvider) && has(self.initProvider.domain))",message="spec.forProvider.domain is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   OrganizationSpec   `json:"spec"`
	Status OrganizationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// OrganizationList contains a list of Organizations
type OrganizationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Organization `json:"items"`
}

// Repository type metadata.
var (
	Organization_Kind             = "Organization"
	Organization_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Organization_Kind}.String()
	Organization_KindAPIVersion   = Organization_Kind + "." + CRDGroupVersion.String()
	Organization_GroupVersionKind = CRDGroupVersion.WithKind(Organization_Kind)
)

func init() {
	SchemeBuilder.Register(&Organization{}, &OrganizationList{})
}
