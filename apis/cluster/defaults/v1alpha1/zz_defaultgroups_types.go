/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
)

type DefaultGroupsInitParameters struct {

	// A set of group ids that should be default groups on the realm referenced by realm_id.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-keycloak/apis/cluster/group/v1alpha1.Group
	// +listType=set
	GroupIds []*string `json:"groupIds,omitempty" tf:"group_ids,omitempty"`

	// References to Group in group to populate groupIds.
	// +kubebuilder:validation:Optional
	GroupIdsRefs []v1.Reference `json:"groupIdsRefs,omitempty" tf:"-"`

	// Selector for a list of Group in group to populate groupIds.
	// +kubebuilder:validation:Optional
	GroupIdsSelector *v1.Selector `json:"groupIdsSelector,omitempty" tf:"-"`

	// The realm this group exists in.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-keycloak/apis/cluster/realm/v1alpha1.Realm
	RealmID *string `json:"realmId,omitempty" tf:"realm_id,omitempty"`

	// Reference to a Realm in realm to populate realmId.
	// +kubebuilder:validation:Optional
	RealmIDRef *v1.Reference `json:"realmIdRef,omitempty" tf:"-"`

	// Selector for a Realm in realm to populate realmId.
	// +kubebuilder:validation:Optional
	RealmIDSelector *v1.Selector `json:"realmIdSelector,omitempty" tf:"-"`
}

type DefaultGroupsObservation struct {

	// A set of group ids that should be default groups on the realm referenced by realm_id.
	// +listType=set
	GroupIds []*string `json:"groupIds,omitempty" tf:"group_ids,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The realm this group exists in.
	RealmID *string `json:"realmId,omitempty" tf:"realm_id,omitempty"`
}

type DefaultGroupsParameters struct {

	// A set of group ids that should be default groups on the realm referenced by realm_id.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-keycloak/apis/cluster/group/v1alpha1.Group
	// +kubebuilder:validation:Optional
	// +listType=set
	GroupIds []*string `json:"groupIds,omitempty" tf:"group_ids,omitempty"`

	// References to Group in group to populate groupIds.
	// +kubebuilder:validation:Optional
	GroupIdsRefs []v1.Reference `json:"groupIdsRefs,omitempty" tf:"-"`

	// Selector for a list of Group in group to populate groupIds.
	// +kubebuilder:validation:Optional
	GroupIdsSelector *v1.Selector `json:"groupIdsSelector,omitempty" tf:"-"`

	// The realm this group exists in.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-keycloak/apis/cluster/realm/v1alpha1.Realm
	// +kubebuilder:validation:Optional
	RealmID *string `json:"realmId,omitempty" tf:"realm_id,omitempty"`

	// Reference to a Realm in realm to populate realmId.
	// +kubebuilder:validation:Optional
	RealmIDRef *v1.Reference `json:"realmIdRef,omitempty" tf:"-"`

	// Selector for a Realm in realm to populate realmId.
	// +kubebuilder:validation:Optional
	RealmIDSelector *v1.Selector `json:"realmIdSelector,omitempty" tf:"-"`
}

// DefaultGroupsSpec defines the desired state of DefaultGroups
type DefaultGroupsSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DefaultGroupsParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider DefaultGroupsInitParameters `json:"initProvider,omitempty"`
}

// DefaultGroupsStatus defines the observed state of DefaultGroups.
type DefaultGroupsStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DefaultGroupsObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// DefaultGroups is the Schema for the DefaultGroupss API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,keycloak}
type DefaultGroups struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DefaultGroupsSpec   `json:"spec"`
	Status            DefaultGroupsStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DefaultGroupsList contains a list of DefaultGroupss
type DefaultGroupsList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DefaultGroups `json:"items"`
}

// Repository type metadata.
var (
	DefaultGroups_Kind             = "DefaultGroups"
	DefaultGroups_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DefaultGroups_Kind}.String()
	DefaultGroups_KindAPIVersion   = DefaultGroups_Kind + "." + CRDGroupVersion.String()
	DefaultGroups_GroupVersionKind = CRDGroupVersion.WithKind(DefaultGroups_Kind)
)

func init() {
	SchemeBuilder.Register(&DefaultGroups{}, &DefaultGroupsList{})
}
