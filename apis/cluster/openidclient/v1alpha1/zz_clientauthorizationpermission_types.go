/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
)

type ClientAuthorizationPermissionInitParameters struct {

	// The decision strategy, can be one of UNANIMOUS, AFFIRMATIVE, or CONSENSUS. Defaults to UNANIMOUS.
	DecisionStrategy *string `json:"decisionStrategy,omitempty" tf:"decision_strategy,omitempty"`

	// A description for the authorization permission.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The name of the permission.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// A list of policy IDs that must be applied to the scopes defined by this permission.
	// +listType=set
	Policies []*string `json:"policies,omitempty" tf:"policies,omitempty"`

	// The realm this group exists in.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-keycloak/apis/cluster/realm/v1alpha1.Realm
	RealmID *string `json:"realmId,omitempty" tf:"realm_id,omitempty"`

	// Reference to a Realm in realm to populate realmId.
	// +kubebuilder:validation:Optional
	RealmIDRef *v1.Reference `json:"realmIdRef,omitempty" tf:"-"`

	// Selector for a Realm in realm to populate realmId.
	// +kubebuilder:validation:Optional
	RealmIDSelector *v1.Selector `json:"realmIdSelector,omitempty" tf:"-"`

	// The ID of the resource server.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-keycloak/apis/cluster/openidclient/v1alpha1.Client
	// +crossplane:generate:reference:extractor=github.com/crossplane-contrib/provider-keycloak/config/common.UUIDExtractor()
	ResourceServerID *string `json:"resourceServerId,omitempty" tf:"resource_server_id,omitempty"`

	// Reference to a Client in openidclient to populate resourceServerId.
	// +kubebuilder:validation:Optional
	ResourceServerIDRef *v1.Reference `json:"resourceServerIdRef,omitempty" tf:"-"`

	// Selector for a Client in openidclient to populate resourceServerId.
	// +kubebuilder:validation:Optional
	ResourceServerIDSelector *v1.Selector `json:"resourceServerIdSelector,omitempty" tf:"-"`

	// When specified, this permission will be evaluated for all instances of a given resource type. Conflicts with resources.
	ResourceType *string `json:"resourceType,omitempty" tf:"resource_type,omitempty"`

	// A list of resource IDs that this permission must be applied to. Conflicts with resource_type.
	// +listType=set
	Resources []*string `json:"resources,omitempty" tf:"resources,omitempty"`

	// A list of scope IDs that this permission must be applied to.
	// +listType=set
	Scopes []*string `json:"scopes,omitempty" tf:"scopes,omitempty"`

	// The type of permission, can be one of resource or scope.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type ClientAuthorizationPermissionObservation struct {

	// The decision strategy, can be one of UNANIMOUS, AFFIRMATIVE, or CONSENSUS. Defaults to UNANIMOUS.
	DecisionStrategy *string `json:"decisionStrategy,omitempty" tf:"decision_strategy,omitempty"`

	// A description for the authorization permission.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Permission ID representing the permission.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The name of the permission.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// A list of policy IDs that must be applied to the scopes defined by this permission.
	// +listType=set
	Policies []*string `json:"policies,omitempty" tf:"policies,omitempty"`

	// The realm this group exists in.
	RealmID *string `json:"realmId,omitempty" tf:"realm_id,omitempty"`

	// The ID of the resource server.
	ResourceServerID *string `json:"resourceServerId,omitempty" tf:"resource_server_id,omitempty"`

	// When specified, this permission will be evaluated for all instances of a given resource type. Conflicts with resources.
	ResourceType *string `json:"resourceType,omitempty" tf:"resource_type,omitempty"`

	// A list of resource IDs that this permission must be applied to. Conflicts with resource_type.
	// +listType=set
	Resources []*string `json:"resources,omitempty" tf:"resources,omitempty"`

	// A list of scope IDs that this permission must be applied to.
	// +listType=set
	Scopes []*string `json:"scopes,omitempty" tf:"scopes,omitempty"`

	// The type of permission, can be one of resource or scope.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type ClientAuthorizationPermissionParameters struct {

	// The decision strategy, can be one of UNANIMOUS, AFFIRMATIVE, or CONSENSUS. Defaults to UNANIMOUS.
	// +kubebuilder:validation:Optional
	DecisionStrategy *string `json:"decisionStrategy,omitempty" tf:"decision_strategy,omitempty"`

	// A description for the authorization permission.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The name of the permission.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// A list of policy IDs that must be applied to the scopes defined by this permission.
	// +kubebuilder:validation:Optional
	// +listType=set
	Policies []*string `json:"policies,omitempty" tf:"policies,omitempty"`

	// The realm this group exists in.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-keycloak/apis/cluster/realm/v1alpha1.Realm
	// +kubebuilder:validation:Optional
	RealmID *string `json:"realmId,omitempty" tf:"realm_id,omitempty"`

	// Reference to a Realm in realm to populate realmId.
	// +kubebuilder:validation:Optional
	RealmIDRef *v1.Reference `json:"realmIdRef,omitempty" tf:"-"`

	// Selector for a Realm in realm to populate realmId.
	// +kubebuilder:validation:Optional
	RealmIDSelector *v1.Selector `json:"realmIdSelector,omitempty" tf:"-"`

	// The ID of the resource server.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-keycloak/apis/cluster/openidclient/v1alpha1.Client
	// +crossplane:generate:reference:extractor=github.com/crossplane-contrib/provider-keycloak/config/common.UUIDExtractor()
	// +kubebuilder:validation:Optional
	ResourceServerID *string `json:"resourceServerId,omitempty" tf:"resource_server_id,omitempty"`

	// Reference to a Client in openidclient to populate resourceServerId.
	// +kubebuilder:validation:Optional
	ResourceServerIDRef *v1.Reference `json:"resourceServerIdRef,omitempty" tf:"-"`

	// Selector for a Client in openidclient to populate resourceServerId.
	// +kubebuilder:validation:Optional
	ResourceServerIDSelector *v1.Selector `json:"resourceServerIdSelector,omitempty" tf:"-"`

	// When specified, this permission will be evaluated for all instances of a given resource type. Conflicts with resources.
	// +kubebuilder:validation:Optional
	ResourceType *string `json:"resourceType,omitempty" tf:"resource_type,omitempty"`

	// A list of resource IDs that this permission must be applied to. Conflicts with resource_type.
	// +kubebuilder:validation:Optional
	// +listType=set
	Resources []*string `json:"resources,omitempty" tf:"resources,omitempty"`

	// A list of scope IDs that this permission must be applied to.
	// +kubebuilder:validation:Optional
	// +listType=set
	Scopes []*string `json:"scopes,omitempty" tf:"scopes,omitempty"`

	// The type of permission, can be one of resource or scope.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

// ClientAuthorizationPermissionSpec defines the desired state of ClientAuthorizationPermission
type ClientAuthorizationPermissionSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ClientAuthorizationPermissionParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ClientAuthorizationPermissionInitParameters `json:"initProvider,omitempty"`
}

// ClientAuthorizationPermissionStatus defines the observed state of ClientAuthorizationPermission.
type ClientAuthorizationPermissionStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ClientAuthorizationPermissionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ClientAuthorizationPermission is the Schema for the ClientAuthorizationPermissions API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,keycloak}
type ClientAuthorizationPermission struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   ClientAuthorizationPermissionSpec   `json:"spec"`
	Status ClientAuthorizationPermissionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ClientAuthorizationPermissionList contains a list of ClientAuthorizationPermissions
type ClientAuthorizationPermissionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ClientAuthorizationPermission `json:"items"`
}

// Repository type metadata.
var (
	ClientAuthorizationPermission_Kind             = "ClientAuthorizationPermission"
	ClientAuthorizationPermission_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ClientAuthorizationPermission_Kind}.String()
	ClientAuthorizationPermission_KindAPIVersion   = ClientAuthorizationPermission_Kind + "." + CRDGroupVersion.String()
	ClientAuthorizationPermission_GroupVersionKind = CRDGroupVersion.WithKind(ClientAuthorizationPermission_Kind)
)

func init() {
	SchemeBuilder.Register(&ClientAuthorizationPermission{}, &ClientAuthorizationPermissionList{})
}
