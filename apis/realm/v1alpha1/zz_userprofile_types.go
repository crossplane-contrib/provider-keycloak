/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AttributeInitParameters struct {

	// A map of annotations for the attribute. Values can be a String or a json object.
	// +mapType=granular
	Annotations map[string]*string `json:"annotations,omitempty" tf:"annotations,omitempty"`

	// The display name of the attribute.
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// A list of scopes. The attribute will only be enabled when these scopes are requested by clients.
	// +listType=set
	EnabledWhenScope []*string `json:"enabledWhenScope,omitempty" tf:"enabled_when_scope,omitempty"`

	// A list of groups.
	Group *string `json:"group,omitempty" tf:"group,omitempty"`

	// If the attribute supports multiple values. Defaults to false.
	MultiValued *bool `json:"multiValued,omitempty" tf:"multi_valued,omitempty"`

	// The name of the attribute.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The permissions configuration information.
	Permissions []PermissionsInitParameters `json:"permissions,omitempty" tf:"permissions,omitempty"`

	// A list of roles for which the attribute will be required.
	// +listType=set
	RequiredForRoles []*string `json:"requiredForRoles,omitempty" tf:"required_for_roles,omitempty"`

	// A list of scopes for which the attribute will be required.
	// +listType=set
	RequiredForScopes []*string `json:"requiredForScopes,omitempty" tf:"required_for_scopes,omitempty"`

	// A list of validators for the attribute.
	Validator []ValidatorInitParameters `json:"validator,omitempty" tf:"validator,omitempty"`
}

type AttributeObservation struct {

	// A map of annotations for the attribute. Values can be a String or a json object.
	// +mapType=granular
	Annotations map[string]*string `json:"annotations,omitempty" tf:"annotations,omitempty"`

	// The display name of the attribute.
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// A list of scopes. The attribute will only be enabled when these scopes are requested by clients.
	// +listType=set
	EnabledWhenScope []*string `json:"enabledWhenScope,omitempty" tf:"enabled_when_scope,omitempty"`

	// A list of groups.
	Group *string `json:"group,omitempty" tf:"group,omitempty"`

	// If the attribute supports multiple values. Defaults to false.
	MultiValued *bool `json:"multiValued,omitempty" tf:"multi_valued,omitempty"`

	// The name of the attribute.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The permissions configuration information.
	Permissions []PermissionsObservation `json:"permissions,omitempty" tf:"permissions,omitempty"`

	// A list of roles for which the attribute will be required.
	// +listType=set
	RequiredForRoles []*string `json:"requiredForRoles,omitempty" tf:"required_for_roles,omitempty"`

	// A list of scopes for which the attribute will be required.
	// +listType=set
	RequiredForScopes []*string `json:"requiredForScopes,omitempty" tf:"required_for_scopes,omitempty"`

	// A list of validators for the attribute.
	Validator []ValidatorObservation `json:"validator,omitempty" tf:"validator,omitempty"`
}

type AttributeParameters struct {

	// A map of annotations for the attribute. Values can be a String or a json object.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Annotations map[string]*string `json:"annotations,omitempty" tf:"annotations,omitempty"`

	// The display name of the attribute.
	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// A list of scopes. The attribute will only be enabled when these scopes are requested by clients.
	// +kubebuilder:validation:Optional
	// +listType=set
	EnabledWhenScope []*string `json:"enabledWhenScope,omitempty" tf:"enabled_when_scope,omitempty"`

	// A list of groups.
	// +kubebuilder:validation:Optional
	Group *string `json:"group,omitempty" tf:"group,omitempty"`

	// If the attribute supports multiple values. Defaults to false.
	// +kubebuilder:validation:Optional
	MultiValued *bool `json:"multiValued,omitempty" tf:"multi_valued,omitempty"`

	// The name of the attribute.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// The permissions configuration information.
	// +kubebuilder:validation:Optional
	Permissions []PermissionsParameters `json:"permissions,omitempty" tf:"permissions,omitempty"`

	// A list of roles for which the attribute will be required.
	// +kubebuilder:validation:Optional
	// +listType=set
	RequiredForRoles []*string `json:"requiredForRoles,omitempty" tf:"required_for_roles,omitempty"`

	// A list of scopes for which the attribute will be required.
	// +kubebuilder:validation:Optional
	// +listType=set
	RequiredForScopes []*string `json:"requiredForScopes,omitempty" tf:"required_for_scopes,omitempty"`

	// A list of validators for the attribute.
	// +kubebuilder:validation:Optional
	Validator []ValidatorParameters `json:"validator,omitempty" tf:"validator,omitempty"`
}

type GroupInitParameters struct {

	// A map of annotations for the attribute. Values can be a String or a json object.
	// +mapType=granular
	Annotations map[string]*string `json:"annotations,omitempty" tf:"annotations,omitempty"`

	// The display description of the group.
	DisplayDescription *string `json:"displayDescription,omitempty" tf:"display_description,omitempty"`

	// The display header of the group.
	DisplayHeader *string `json:"displayHeader,omitempty" tf:"display_header,omitempty"`

	// The name of the attribute.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type GroupObservation struct {

	// A map of annotations for the attribute. Values can be a String or a json object.
	// +mapType=granular
	Annotations map[string]*string `json:"annotations,omitempty" tf:"annotations,omitempty"`

	// The display description of the group.
	DisplayDescription *string `json:"displayDescription,omitempty" tf:"display_description,omitempty"`

	// The display header of the group.
	DisplayHeader *string `json:"displayHeader,omitempty" tf:"display_header,omitempty"`

	// The name of the attribute.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type GroupParameters struct {

	// A map of annotations for the attribute. Values can be a String or a json object.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Annotations map[string]*string `json:"annotations,omitempty" tf:"annotations,omitempty"`

	// The display description of the group.
	// +kubebuilder:validation:Optional
	DisplayDescription *string `json:"displayDescription,omitempty" tf:"display_description,omitempty"`

	// The display header of the group.
	// +kubebuilder:validation:Optional
	DisplayHeader *string `json:"displayHeader,omitempty" tf:"display_header,omitempty"`

	// The name of the attribute.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`
}

type PermissionsInitParameters struct {

	// A list of profiles that will be able to edit the attribute. One of admin, user.
	// +listType=set
	Edit []*string `json:"edit,omitempty" tf:"edit,omitempty"`

	// A list of profiles that will be able to view the attribute. One of admin, user.
	// +listType=set
	View []*string `json:"view,omitempty" tf:"view,omitempty"`
}

type PermissionsObservation struct {

	// A list of profiles that will be able to edit the attribute. One of admin, user.
	// +listType=set
	Edit []*string `json:"edit,omitempty" tf:"edit,omitempty"`

	// A list of profiles that will be able to view the attribute. One of admin, user.
	// +listType=set
	View []*string `json:"view,omitempty" tf:"view,omitempty"`
}

type PermissionsParameters struct {

	// A list of profiles that will be able to edit the attribute. One of admin, user.
	// +kubebuilder:validation:Optional
	// +listType=set
	Edit []*string `json:"edit" tf:"edit,omitempty"`

	// A list of profiles that will be able to view the attribute. One of admin, user.
	// +kubebuilder:validation:Optional
	// +listType=set
	View []*string `json:"view" tf:"view,omitempty"`
}

type UserProfileInitParameters struct {

	// An ordered list of attributes.
	Attribute []AttributeInitParameters `json:"attribute,omitempty" tf:"attribute,omitempty"`

	// A list of groups.
	Group []GroupInitParameters `json:"group,omitempty" tf:"group,omitempty"`

	// The ID of the realm the user profile applies to.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-keycloak/apis/realm/v1alpha1.Realm
	RealmID *string `json:"realmId,omitempty" tf:"realm_id,omitempty"`

	// Reference to a Realm in realm to populate realmId.
	// +kubebuilder:validation:Optional
	RealmIDRef *v1.Reference `json:"realmIdRef,omitempty" tf:"-"`

	// Selector for a Realm in realm to populate realmId.
	// +kubebuilder:validation:Optional
	RealmIDSelector *v1.Selector `json:"realmIdSelector,omitempty" tf:"-"`

	// Unmanaged attributes are user attributes not explicitly defined in the user profile configuration. By default, unmanaged attributes are not enabled. Value could be one of DISABLED, ENABLED, ADMIN_EDIT or ADMIN_VIEW. If value is not specified it means DISABLED
	UnmanagedAttributePolicy *string `json:"unmanagedAttributePolicy,omitempty" tf:"unmanaged_attribute_policy,omitempty"`
}

type UserProfileObservation struct {

	// An ordered list of attributes.
	Attribute []AttributeObservation `json:"attribute,omitempty" tf:"attribute,omitempty"`

	// A list of groups.
	Group []GroupObservation `json:"group,omitempty" tf:"group,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The ID of the realm the user profile applies to.
	RealmID *string `json:"realmId,omitempty" tf:"realm_id,omitempty"`

	// Unmanaged attributes are user attributes not explicitly defined in the user profile configuration. By default, unmanaged attributes are not enabled. Value could be one of DISABLED, ENABLED, ADMIN_EDIT or ADMIN_VIEW. If value is not specified it means DISABLED
	UnmanagedAttributePolicy *string `json:"unmanagedAttributePolicy,omitempty" tf:"unmanaged_attribute_policy,omitempty"`
}

type UserProfileParameters struct {

	// An ordered list of attributes.
	// +kubebuilder:validation:Optional
	Attribute []AttributeParameters `json:"attribute,omitempty" tf:"attribute,omitempty"`

	// A list of groups.
	// +kubebuilder:validation:Optional
	Group []GroupParameters `json:"group,omitempty" tf:"group,omitempty"`

	// The ID of the realm the user profile applies to.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-keycloak/apis/realm/v1alpha1.Realm
	// +kubebuilder:validation:Optional
	RealmID *string `json:"realmId,omitempty" tf:"realm_id,omitempty"`

	// Reference to a Realm in realm to populate realmId.
	// +kubebuilder:validation:Optional
	RealmIDRef *v1.Reference `json:"realmIdRef,omitempty" tf:"-"`

	// Selector for a Realm in realm to populate realmId.
	// +kubebuilder:validation:Optional
	RealmIDSelector *v1.Selector `json:"realmIdSelector,omitempty" tf:"-"`

	// Unmanaged attributes are user attributes not explicitly defined in the user profile configuration. By default, unmanaged attributes are not enabled. Value could be one of DISABLED, ENABLED, ADMIN_EDIT or ADMIN_VIEW. If value is not specified it means DISABLED
	// +kubebuilder:validation:Optional
	UnmanagedAttributePolicy *string `json:"unmanagedAttributePolicy,omitempty" tf:"unmanaged_attribute_policy,omitempty"`
}

type ValidatorInitParameters struct {

	// A map defining the configuration of the validator. Values can be a String or a json object.
	// +mapType=granular
	Config map[string]*string `json:"config,omitempty" tf:"config,omitempty"`

	// The name of the attribute.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type ValidatorObservation struct {

	// A map defining the configuration of the validator. Values can be a String or a json object.
	// +mapType=granular
	Config map[string]*string `json:"config,omitempty" tf:"config,omitempty"`

	// The name of the attribute.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type ValidatorParameters struct {

	// A map defining the configuration of the validator. Values can be a String or a json object.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Config map[string]*string `json:"config,omitempty" tf:"config,omitempty"`

	// The name of the attribute.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`
}

// UserProfileSpec defines the desired state of UserProfile
type UserProfileSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     UserProfileParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider UserProfileInitParameters `json:"initProvider,omitempty"`
}

// UserProfileStatus defines the observed state of UserProfile.
type UserProfileStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        UserProfileObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// UserProfile is the Schema for the UserProfiles API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,keycloak}
type UserProfile struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              UserProfileSpec   `json:"spec"`
	Status            UserProfileStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// UserProfileList contains a list of UserProfiles
type UserProfileList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []UserProfile `json:"items"`
}

// Repository type metadata.
var (
	UserProfile_Kind             = "UserProfile"
	UserProfile_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: UserProfile_Kind}.String()
	UserProfile_KindAPIVersion   = UserProfile_Kind + "." + CRDGroupVersion.String()
	UserProfile_GroupVersionKind = CRDGroupVersion.WithKind(UserProfile_Kind)
)

func init() {
	SchemeBuilder.Register(&UserProfile{}, &UserProfileList{})
}
