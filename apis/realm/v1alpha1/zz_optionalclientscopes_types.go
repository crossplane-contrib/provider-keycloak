/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type OptionalClientScopesInitParameters struct {

	// An array of optional client scope names that should be used when creating new Keycloak clients.
	// +listType=set
	OptionalScopes []*string `json:"optionalScopes,omitempty" tf:"optional_scopes,omitempty"`

	// The realm this client and scopes exists in.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-keycloak/apis/realm/v1alpha1.Realm
	RealmID *string `json:"realmId,omitempty" tf:"realm_id,omitempty"`

	// Reference to a Realm in realm to populate realmId.
	// +kubebuilder:validation:Optional
	RealmIDRef *v1.Reference `json:"realmIdRef,omitempty" tf:"-"`

	// Selector for a Realm in realm to populate realmId.
	// +kubebuilder:validation:Optional
	RealmIDSelector *v1.Selector `json:"realmIdSelector,omitempty" tf:"-"`
}

type OptionalClientScopesObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// An array of optional client scope names that should be used when creating new Keycloak clients.
	// +listType=set
	OptionalScopes []*string `json:"optionalScopes,omitempty" tf:"optional_scopes,omitempty"`

	// The realm this client and scopes exists in.
	RealmID *string `json:"realmId,omitempty" tf:"realm_id,omitempty"`
}

type OptionalClientScopesParameters struct {

	// An array of optional client scope names that should be used when creating new Keycloak clients.
	// +kubebuilder:validation:Optional
	// +listType=set
	OptionalScopes []*string `json:"optionalScopes,omitempty" tf:"optional_scopes,omitempty"`

	// The realm this client and scopes exists in.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-keycloak/apis/realm/v1alpha1.Realm
	// +kubebuilder:validation:Optional
	RealmID *string `json:"realmId,omitempty" tf:"realm_id,omitempty"`

	// Reference to a Realm in realm to populate realmId.
	// +kubebuilder:validation:Optional
	RealmIDRef *v1.Reference `json:"realmIdRef,omitempty" tf:"-"`

	// Selector for a Realm in realm to populate realmId.
	// +kubebuilder:validation:Optional
	RealmIDSelector *v1.Selector `json:"realmIdSelector,omitempty" tf:"-"`
}

// OptionalClientScopesSpec defines the desired state of OptionalClientScopes
type OptionalClientScopesSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     OptionalClientScopesParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider OptionalClientScopesInitParameters `json:"initProvider,omitempty"`
}

// OptionalClientScopesStatus defines the observed state of OptionalClientScopes.
type OptionalClientScopesStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        OptionalClientScopesObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// OptionalClientScopes is the Schema for the OptionalClientScopess API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,keycloak}
type OptionalClientScopes struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.optionalScopes) || (has(self.initProvider) && has(self.initProvider.optionalScopes))",message="spec.forProvider.optionalScopes is a required parameter"
	Spec   OptionalClientScopesSpec   `json:"spec"`
	Status OptionalClientScopesStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// OptionalClientScopesList contains a list of OptionalClientScopess
type OptionalClientScopesList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []OptionalClientScopes `json:"items"`
}

// Repository type metadata.
var (
	OptionalClientScopes_Kind             = "OptionalClientScopes"
	OptionalClientScopes_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: OptionalClientScopes_Kind}.String()
	OptionalClientScopes_KindAPIVersion   = OptionalClientScopes_Kind + "." + CRDGroupVersion.String()
	OptionalClientScopes_GroupVersionKind = CRDGroupVersion.WithKind(OptionalClientScopes_Kind)
)

func init() {
	SchemeBuilder.Register(&OptionalClientScopes{}, &OptionalClientScopesList{})
}
