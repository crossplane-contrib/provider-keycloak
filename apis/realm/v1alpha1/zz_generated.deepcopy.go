//go:build !ignore_autogenerated

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by controller-gen. DO NOT EDIT.

package v1alpha1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AuthInitParameters) DeepCopyInto(out *AuthInitParameters) {
	*out = *in
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AuthInitParameters.
func (in *AuthInitParameters) DeepCopy() *AuthInitParameters {
	if in == nil {
		return nil
	}
	out := new(AuthInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AuthObservation) DeepCopyInto(out *AuthObservation) {
	*out = *in
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AuthObservation.
func (in *AuthObservation) DeepCopy() *AuthObservation {
	if in == nil {
		return nil
	}
	out := new(AuthObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AuthParameters) DeepCopyInto(out *AuthParameters) {
	*out = *in
	out.PasswordSecretRef = in.PasswordSecretRef
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AuthParameters.
func (in *AuthParameters) DeepCopy() *AuthParameters {
	if in == nil {
		return nil
	}
	out := new(AuthParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BruteForceDetectionInitParameters) DeepCopyInto(out *BruteForceDetectionInitParameters) {
	*out = *in
	if in.FailureResetTimeSeconds != nil {
		in, out := &in.FailureResetTimeSeconds, &out.FailureResetTimeSeconds
		*out = new(float64)
		**out = **in
	}
	if in.MaxFailureWaitSeconds != nil {
		in, out := &in.MaxFailureWaitSeconds, &out.MaxFailureWaitSeconds
		*out = new(float64)
		**out = **in
	}
	if in.MaxLoginFailures != nil {
		in, out := &in.MaxLoginFailures, &out.MaxLoginFailures
		*out = new(float64)
		**out = **in
	}
	if in.MinimumQuickLoginWaitSeconds != nil {
		in, out := &in.MinimumQuickLoginWaitSeconds, &out.MinimumQuickLoginWaitSeconds
		*out = new(float64)
		**out = **in
	}
	if in.PermanentLockout != nil {
		in, out := &in.PermanentLockout, &out.PermanentLockout
		*out = new(bool)
		**out = **in
	}
	if in.QuickLoginCheckMilliSeconds != nil {
		in, out := &in.QuickLoginCheckMilliSeconds, &out.QuickLoginCheckMilliSeconds
		*out = new(float64)
		**out = **in
	}
	if in.WaitIncrementSeconds != nil {
		in, out := &in.WaitIncrementSeconds, &out.WaitIncrementSeconds
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BruteForceDetectionInitParameters.
func (in *BruteForceDetectionInitParameters) DeepCopy() *BruteForceDetectionInitParameters {
	if in == nil {
		return nil
	}
	out := new(BruteForceDetectionInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BruteForceDetectionObservation) DeepCopyInto(out *BruteForceDetectionObservation) {
	*out = *in
	if in.FailureResetTimeSeconds != nil {
		in, out := &in.FailureResetTimeSeconds, &out.FailureResetTimeSeconds
		*out = new(float64)
		**out = **in
	}
	if in.MaxFailureWaitSeconds != nil {
		in, out := &in.MaxFailureWaitSeconds, &out.MaxFailureWaitSeconds
		*out = new(float64)
		**out = **in
	}
	if in.MaxLoginFailures != nil {
		in, out := &in.MaxLoginFailures, &out.MaxLoginFailures
		*out = new(float64)
		**out = **in
	}
	if in.MinimumQuickLoginWaitSeconds != nil {
		in, out := &in.MinimumQuickLoginWaitSeconds, &out.MinimumQuickLoginWaitSeconds
		*out = new(float64)
		**out = **in
	}
	if in.PermanentLockout != nil {
		in, out := &in.PermanentLockout, &out.PermanentLockout
		*out = new(bool)
		**out = **in
	}
	if in.QuickLoginCheckMilliSeconds != nil {
		in, out := &in.QuickLoginCheckMilliSeconds, &out.QuickLoginCheckMilliSeconds
		*out = new(float64)
		**out = **in
	}
	if in.WaitIncrementSeconds != nil {
		in, out := &in.WaitIncrementSeconds, &out.WaitIncrementSeconds
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BruteForceDetectionObservation.
func (in *BruteForceDetectionObservation) DeepCopy() *BruteForceDetectionObservation {
	if in == nil {
		return nil
	}
	out := new(BruteForceDetectionObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BruteForceDetectionParameters) DeepCopyInto(out *BruteForceDetectionParameters) {
	*out = *in
	if in.FailureResetTimeSeconds != nil {
		in, out := &in.FailureResetTimeSeconds, &out.FailureResetTimeSeconds
		*out = new(float64)
		**out = **in
	}
	if in.MaxFailureWaitSeconds != nil {
		in, out := &in.MaxFailureWaitSeconds, &out.MaxFailureWaitSeconds
		*out = new(float64)
		**out = **in
	}
	if in.MaxLoginFailures != nil {
		in, out := &in.MaxLoginFailures, &out.MaxLoginFailures
		*out = new(float64)
		**out = **in
	}
	if in.MinimumQuickLoginWaitSeconds != nil {
		in, out := &in.MinimumQuickLoginWaitSeconds, &out.MinimumQuickLoginWaitSeconds
		*out = new(float64)
		**out = **in
	}
	if in.PermanentLockout != nil {
		in, out := &in.PermanentLockout, &out.PermanentLockout
		*out = new(bool)
		**out = **in
	}
	if in.QuickLoginCheckMilliSeconds != nil {
		in, out := &in.QuickLoginCheckMilliSeconds, &out.QuickLoginCheckMilliSeconds
		*out = new(float64)
		**out = **in
	}
	if in.WaitIncrementSeconds != nil {
		in, out := &in.WaitIncrementSeconds, &out.WaitIncrementSeconds
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BruteForceDetectionParameters.
func (in *BruteForceDetectionParameters) DeepCopy() *BruteForceDetectionParameters {
	if in == nil {
		return nil
	}
	out := new(BruteForceDetectionParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HeadersInitParameters) DeepCopyInto(out *HeadersInitParameters) {
	*out = *in
	if in.ContentSecurityPolicy != nil {
		in, out := &in.ContentSecurityPolicy, &out.ContentSecurityPolicy
		*out = new(string)
		**out = **in
	}
	if in.ContentSecurityPolicyReportOnly != nil {
		in, out := &in.ContentSecurityPolicyReportOnly, &out.ContentSecurityPolicyReportOnly
		*out = new(string)
		**out = **in
	}
	if in.ReferrerPolicy != nil {
		in, out := &in.ReferrerPolicy, &out.ReferrerPolicy
		*out = new(string)
		**out = **in
	}
	if in.StrictTransportSecurity != nil {
		in, out := &in.StrictTransportSecurity, &out.StrictTransportSecurity
		*out = new(string)
		**out = **in
	}
	if in.XContentTypeOptions != nil {
		in, out := &in.XContentTypeOptions, &out.XContentTypeOptions
		*out = new(string)
		**out = **in
	}
	if in.XFrameOptions != nil {
		in, out := &in.XFrameOptions, &out.XFrameOptions
		*out = new(string)
		**out = **in
	}
	if in.XRobotsTag != nil {
		in, out := &in.XRobotsTag, &out.XRobotsTag
		*out = new(string)
		**out = **in
	}
	if in.XXSSProtection != nil {
		in, out := &in.XXSSProtection, &out.XXSSProtection
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HeadersInitParameters.
func (in *HeadersInitParameters) DeepCopy() *HeadersInitParameters {
	if in == nil {
		return nil
	}
	out := new(HeadersInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HeadersObservation) DeepCopyInto(out *HeadersObservation) {
	*out = *in
	if in.ContentSecurityPolicy != nil {
		in, out := &in.ContentSecurityPolicy, &out.ContentSecurityPolicy
		*out = new(string)
		**out = **in
	}
	if in.ContentSecurityPolicyReportOnly != nil {
		in, out := &in.ContentSecurityPolicyReportOnly, &out.ContentSecurityPolicyReportOnly
		*out = new(string)
		**out = **in
	}
	if in.ReferrerPolicy != nil {
		in, out := &in.ReferrerPolicy, &out.ReferrerPolicy
		*out = new(string)
		**out = **in
	}
	if in.StrictTransportSecurity != nil {
		in, out := &in.StrictTransportSecurity, &out.StrictTransportSecurity
		*out = new(string)
		**out = **in
	}
	if in.XContentTypeOptions != nil {
		in, out := &in.XContentTypeOptions, &out.XContentTypeOptions
		*out = new(string)
		**out = **in
	}
	if in.XFrameOptions != nil {
		in, out := &in.XFrameOptions, &out.XFrameOptions
		*out = new(string)
		**out = **in
	}
	if in.XRobotsTag != nil {
		in, out := &in.XRobotsTag, &out.XRobotsTag
		*out = new(string)
		**out = **in
	}
	if in.XXSSProtection != nil {
		in, out := &in.XXSSProtection, &out.XXSSProtection
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HeadersObservation.
func (in *HeadersObservation) DeepCopy() *HeadersObservation {
	if in == nil {
		return nil
	}
	out := new(HeadersObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HeadersParameters) DeepCopyInto(out *HeadersParameters) {
	*out = *in
	if in.ContentSecurityPolicy != nil {
		in, out := &in.ContentSecurityPolicy, &out.ContentSecurityPolicy
		*out = new(string)
		**out = **in
	}
	if in.ContentSecurityPolicyReportOnly != nil {
		in, out := &in.ContentSecurityPolicyReportOnly, &out.ContentSecurityPolicyReportOnly
		*out = new(string)
		**out = **in
	}
	if in.ReferrerPolicy != nil {
		in, out := &in.ReferrerPolicy, &out.ReferrerPolicy
		*out = new(string)
		**out = **in
	}
	if in.StrictTransportSecurity != nil {
		in, out := &in.StrictTransportSecurity, &out.StrictTransportSecurity
		*out = new(string)
		**out = **in
	}
	if in.XContentTypeOptions != nil {
		in, out := &in.XContentTypeOptions, &out.XContentTypeOptions
		*out = new(string)
		**out = **in
	}
	if in.XFrameOptions != nil {
		in, out := &in.XFrameOptions, &out.XFrameOptions
		*out = new(string)
		**out = **in
	}
	if in.XRobotsTag != nil {
		in, out := &in.XRobotsTag, &out.XRobotsTag
		*out = new(string)
		**out = **in
	}
	if in.XXSSProtection != nil {
		in, out := &in.XXSSProtection, &out.XXSSProtection
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HeadersParameters.
func (in *HeadersParameters) DeepCopy() *HeadersParameters {
	if in == nil {
		return nil
	}
	out := new(HeadersParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *InternationalizationInitParameters) DeepCopyInto(out *InternationalizationInitParameters) {
	*out = *in
	if in.DefaultLocale != nil {
		in, out := &in.DefaultLocale, &out.DefaultLocale
		*out = new(string)
		**out = **in
	}
	if in.SupportedLocales != nil {
		in, out := &in.SupportedLocales, &out.SupportedLocales
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new InternationalizationInitParameters.
func (in *InternationalizationInitParameters) DeepCopy() *InternationalizationInitParameters {
	if in == nil {
		return nil
	}
	out := new(InternationalizationInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *InternationalizationObservation) DeepCopyInto(out *InternationalizationObservation) {
	*out = *in
	if in.DefaultLocale != nil {
		in, out := &in.DefaultLocale, &out.DefaultLocale
		*out = new(string)
		**out = **in
	}
	if in.SupportedLocales != nil {
		in, out := &in.SupportedLocales, &out.SupportedLocales
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new InternationalizationObservation.
func (in *InternationalizationObservation) DeepCopy() *InternationalizationObservation {
	if in == nil {
		return nil
	}
	out := new(InternationalizationObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *InternationalizationParameters) DeepCopyInto(out *InternationalizationParameters) {
	*out = *in
	if in.DefaultLocale != nil {
		in, out := &in.DefaultLocale, &out.DefaultLocale
		*out = new(string)
		**out = **in
	}
	if in.SupportedLocales != nil {
		in, out := &in.SupportedLocales, &out.SupportedLocales
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new InternationalizationParameters.
func (in *InternationalizationParameters) DeepCopy() *InternationalizationParameters {
	if in == nil {
		return nil
	}
	out := new(InternationalizationParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KeystoreRsa) DeepCopyInto(out *KeystoreRsa) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KeystoreRsa.
func (in *KeystoreRsa) DeepCopy() *KeystoreRsa {
	if in == nil {
		return nil
	}
	out := new(KeystoreRsa)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *KeystoreRsa) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KeystoreRsaInitParameters) DeepCopyInto(out *KeystoreRsaInitParameters) {
	*out = *in
	if in.Active != nil {
		in, out := &in.Active, &out.Active
		*out = new(bool)
		**out = **in
	}
	if in.Algorithm != nil {
		in, out := &in.Algorithm, &out.Algorithm
		*out = new(string)
		**out = **in
	}
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Priority != nil {
		in, out := &in.Priority, &out.Priority
		*out = new(float64)
		**out = **in
	}
	if in.ProviderID != nil {
		in, out := &in.ProviderID, &out.ProviderID
		*out = new(string)
		**out = **in
	}
	if in.RealmID != nil {
		in, out := &in.RealmID, &out.RealmID
		*out = new(string)
		**out = **in
	}
	if in.RealmIDRef != nil {
		in, out := &in.RealmIDRef, &out.RealmIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.RealmIDSelector != nil {
		in, out := &in.RealmIDSelector, &out.RealmIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KeystoreRsaInitParameters.
func (in *KeystoreRsaInitParameters) DeepCopy() *KeystoreRsaInitParameters {
	if in == nil {
		return nil
	}
	out := new(KeystoreRsaInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KeystoreRsaList) DeepCopyInto(out *KeystoreRsaList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]KeystoreRsa, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KeystoreRsaList.
func (in *KeystoreRsaList) DeepCopy() *KeystoreRsaList {
	if in == nil {
		return nil
	}
	out := new(KeystoreRsaList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *KeystoreRsaList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KeystoreRsaObservation) DeepCopyInto(out *KeystoreRsaObservation) {
	*out = *in
	if in.Active != nil {
		in, out := &in.Active, &out.Active
		*out = new(bool)
		**out = **in
	}
	if in.Algorithm != nil {
		in, out := &in.Algorithm, &out.Algorithm
		*out = new(string)
		**out = **in
	}
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Priority != nil {
		in, out := &in.Priority, &out.Priority
		*out = new(float64)
		**out = **in
	}
	if in.ProviderID != nil {
		in, out := &in.ProviderID, &out.ProviderID
		*out = new(string)
		**out = **in
	}
	if in.RealmID != nil {
		in, out := &in.RealmID, &out.RealmID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KeystoreRsaObservation.
func (in *KeystoreRsaObservation) DeepCopy() *KeystoreRsaObservation {
	if in == nil {
		return nil
	}
	out := new(KeystoreRsaObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KeystoreRsaParameters) DeepCopyInto(out *KeystoreRsaParameters) {
	*out = *in
	if in.Active != nil {
		in, out := &in.Active, &out.Active
		*out = new(bool)
		**out = **in
	}
	if in.Algorithm != nil {
		in, out := &in.Algorithm, &out.Algorithm
		*out = new(string)
		**out = **in
	}
	out.CertificateSecretRef = in.CertificateSecretRef
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Priority != nil {
		in, out := &in.Priority, &out.Priority
		*out = new(float64)
		**out = **in
	}
	out.PrivateKeySecretRef = in.PrivateKeySecretRef
	if in.ProviderID != nil {
		in, out := &in.ProviderID, &out.ProviderID
		*out = new(string)
		**out = **in
	}
	if in.RealmID != nil {
		in, out := &in.RealmID, &out.RealmID
		*out = new(string)
		**out = **in
	}
	if in.RealmIDRef != nil {
		in, out := &in.RealmIDRef, &out.RealmIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.RealmIDSelector != nil {
		in, out := &in.RealmIDSelector, &out.RealmIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KeystoreRsaParameters.
func (in *KeystoreRsaParameters) DeepCopy() *KeystoreRsaParameters {
	if in == nil {
		return nil
	}
	out := new(KeystoreRsaParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KeystoreRsaSpec) DeepCopyInto(out *KeystoreRsaSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KeystoreRsaSpec.
func (in *KeystoreRsaSpec) DeepCopy() *KeystoreRsaSpec {
	if in == nil {
		return nil
	}
	out := new(KeystoreRsaSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KeystoreRsaStatus) DeepCopyInto(out *KeystoreRsaStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KeystoreRsaStatus.
func (in *KeystoreRsaStatus) DeepCopy() *KeystoreRsaStatus {
	if in == nil {
		return nil
	}
	out := new(KeystoreRsaStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OtpPolicyInitParameters) DeepCopyInto(out *OtpPolicyInitParameters) {
	*out = *in
	if in.Algorithm != nil {
		in, out := &in.Algorithm, &out.Algorithm
		*out = new(string)
		**out = **in
	}
	if in.Digits != nil {
		in, out := &in.Digits, &out.Digits
		*out = new(float64)
		**out = **in
	}
	if in.InitialCounter != nil {
		in, out := &in.InitialCounter, &out.InitialCounter
		*out = new(float64)
		**out = **in
	}
	if in.LookAheadWindow != nil {
		in, out := &in.LookAheadWindow, &out.LookAheadWindow
		*out = new(float64)
		**out = **in
	}
	if in.Period != nil {
		in, out := &in.Period, &out.Period
		*out = new(float64)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OtpPolicyInitParameters.
func (in *OtpPolicyInitParameters) DeepCopy() *OtpPolicyInitParameters {
	if in == nil {
		return nil
	}
	out := new(OtpPolicyInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OtpPolicyObservation) DeepCopyInto(out *OtpPolicyObservation) {
	*out = *in
	if in.Algorithm != nil {
		in, out := &in.Algorithm, &out.Algorithm
		*out = new(string)
		**out = **in
	}
	if in.Digits != nil {
		in, out := &in.Digits, &out.Digits
		*out = new(float64)
		**out = **in
	}
	if in.InitialCounter != nil {
		in, out := &in.InitialCounter, &out.InitialCounter
		*out = new(float64)
		**out = **in
	}
	if in.LookAheadWindow != nil {
		in, out := &in.LookAheadWindow, &out.LookAheadWindow
		*out = new(float64)
		**out = **in
	}
	if in.Period != nil {
		in, out := &in.Period, &out.Period
		*out = new(float64)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OtpPolicyObservation.
func (in *OtpPolicyObservation) DeepCopy() *OtpPolicyObservation {
	if in == nil {
		return nil
	}
	out := new(OtpPolicyObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OtpPolicyParameters) DeepCopyInto(out *OtpPolicyParameters) {
	*out = *in
	if in.Algorithm != nil {
		in, out := &in.Algorithm, &out.Algorithm
		*out = new(string)
		**out = **in
	}
	if in.Digits != nil {
		in, out := &in.Digits, &out.Digits
		*out = new(float64)
		**out = **in
	}
	if in.InitialCounter != nil {
		in, out := &in.InitialCounter, &out.InitialCounter
		*out = new(float64)
		**out = **in
	}
	if in.LookAheadWindow != nil {
		in, out := &in.LookAheadWindow, &out.LookAheadWindow
		*out = new(float64)
		**out = **in
	}
	if in.Period != nil {
		in, out := &in.Period, &out.Period
		*out = new(float64)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OtpPolicyParameters.
func (in *OtpPolicyParameters) DeepCopy() *OtpPolicyParameters {
	if in == nil {
		return nil
	}
	out := new(OtpPolicyParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Realm) DeepCopyInto(out *Realm) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Realm.
func (in *Realm) DeepCopy() *Realm {
	if in == nil {
		return nil
	}
	out := new(Realm)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *Realm) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RealmInitParameters) DeepCopyInto(out *RealmInitParameters) {
	*out = *in
	if in.AccessCodeLifespan != nil {
		in, out := &in.AccessCodeLifespan, &out.AccessCodeLifespan
		*out = new(string)
		**out = **in
	}
	if in.AccessCodeLifespanLogin != nil {
		in, out := &in.AccessCodeLifespanLogin, &out.AccessCodeLifespanLogin
		*out = new(string)
		**out = **in
	}
	if in.AccessCodeLifespanUserAction != nil {
		in, out := &in.AccessCodeLifespanUserAction, &out.AccessCodeLifespanUserAction
		*out = new(string)
		**out = **in
	}
	if in.AccessTokenLifespan != nil {
		in, out := &in.AccessTokenLifespan, &out.AccessTokenLifespan
		*out = new(string)
		**out = **in
	}
	if in.AccessTokenLifespanForImplicitFlow != nil {
		in, out := &in.AccessTokenLifespanForImplicitFlow, &out.AccessTokenLifespanForImplicitFlow
		*out = new(string)
		**out = **in
	}
	if in.AccountTheme != nil {
		in, out := &in.AccountTheme, &out.AccountTheme
		*out = new(string)
		**out = **in
	}
	if in.ActionTokenGeneratedByAdminLifespan != nil {
		in, out := &in.ActionTokenGeneratedByAdminLifespan, &out.ActionTokenGeneratedByAdminLifespan
		*out = new(string)
		**out = **in
	}
	if in.ActionTokenGeneratedByUserLifespan != nil {
		in, out := &in.ActionTokenGeneratedByUserLifespan, &out.ActionTokenGeneratedByUserLifespan
		*out = new(string)
		**out = **in
	}
	if in.AdminTheme != nil {
		in, out := &in.AdminTheme, &out.AdminTheme
		*out = new(string)
		**out = **in
	}
	if in.Attributes != nil {
		in, out := &in.Attributes, &out.Attributes
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.BrowserFlow != nil {
		in, out := &in.BrowserFlow, &out.BrowserFlow
		*out = new(string)
		**out = **in
	}
	if in.ClientAuthenticationFlow != nil {
		in, out := &in.ClientAuthenticationFlow, &out.ClientAuthenticationFlow
		*out = new(string)
		**out = **in
	}
	if in.ClientSessionIdleTimeout != nil {
		in, out := &in.ClientSessionIdleTimeout, &out.ClientSessionIdleTimeout
		*out = new(string)
		**out = **in
	}
	if in.ClientSessionMaxLifespan != nil {
		in, out := &in.ClientSessionMaxLifespan, &out.ClientSessionMaxLifespan
		*out = new(string)
		**out = **in
	}
	if in.DefaultDefaultClientScopes != nil {
		in, out := &in.DefaultDefaultClientScopes, &out.DefaultDefaultClientScopes
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DefaultOptionalClientScopes != nil {
		in, out := &in.DefaultOptionalClientScopes, &out.DefaultOptionalClientScopes
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DefaultSignatureAlgorithm != nil {
		in, out := &in.DefaultSignatureAlgorithm, &out.DefaultSignatureAlgorithm
		*out = new(string)
		**out = **in
	}
	if in.DirectGrantFlow != nil {
		in, out := &in.DirectGrantFlow, &out.DirectGrantFlow
		*out = new(string)
		**out = **in
	}
	if in.DisplayName != nil {
		in, out := &in.DisplayName, &out.DisplayName
		*out = new(string)
		**out = **in
	}
	if in.DisplayNameHTML != nil {
		in, out := &in.DisplayNameHTML, &out.DisplayNameHTML
		*out = new(string)
		**out = **in
	}
	if in.DockerAuthenticationFlow != nil {
		in, out := &in.DockerAuthenticationFlow, &out.DockerAuthenticationFlow
		*out = new(string)
		**out = **in
	}
	if in.DuplicateEmailsAllowed != nil {
		in, out := &in.DuplicateEmailsAllowed, &out.DuplicateEmailsAllowed
		*out = new(bool)
		**out = **in
	}
	if in.EditUsernameAllowed != nil {
		in, out := &in.EditUsernameAllowed, &out.EditUsernameAllowed
		*out = new(bool)
		**out = **in
	}
	if in.EmailTheme != nil {
		in, out := &in.EmailTheme, &out.EmailTheme
		*out = new(string)
		**out = **in
	}
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.InternalID != nil {
		in, out := &in.InternalID, &out.InternalID
		*out = new(string)
		**out = **in
	}
	if in.Internationalization != nil {
		in, out := &in.Internationalization, &out.Internationalization
		*out = make([]InternationalizationInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.LoginTheme != nil {
		in, out := &in.LoginTheme, &out.LoginTheme
		*out = new(string)
		**out = **in
	}
	if in.LoginWithEmailAllowed != nil {
		in, out := &in.LoginWithEmailAllowed, &out.LoginWithEmailAllowed
		*out = new(bool)
		**out = **in
	}
	if in.Oauth2DeviceCodeLifespan != nil {
		in, out := &in.Oauth2DeviceCodeLifespan, &out.Oauth2DeviceCodeLifespan
		*out = new(string)
		**out = **in
	}
	if in.Oauth2DevicePollingInterval != nil {
		in, out := &in.Oauth2DevicePollingInterval, &out.Oauth2DevicePollingInterval
		*out = new(float64)
		**out = **in
	}
	if in.OfflineSessionIdleTimeout != nil {
		in, out := &in.OfflineSessionIdleTimeout, &out.OfflineSessionIdleTimeout
		*out = new(string)
		**out = **in
	}
	if in.OfflineSessionMaxLifespan != nil {
		in, out := &in.OfflineSessionMaxLifespan, &out.OfflineSessionMaxLifespan
		*out = new(string)
		**out = **in
	}
	if in.OfflineSessionMaxLifespanEnabled != nil {
		in, out := &in.OfflineSessionMaxLifespanEnabled, &out.OfflineSessionMaxLifespanEnabled
		*out = new(bool)
		**out = **in
	}
	if in.OtpPolicy != nil {
		in, out := &in.OtpPolicy, &out.OtpPolicy
		*out = make([]OtpPolicyInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.PasswordPolicy != nil {
		in, out := &in.PasswordPolicy, &out.PasswordPolicy
		*out = new(string)
		**out = **in
	}
	if in.Realm != nil {
		in, out := &in.Realm, &out.Realm
		*out = new(string)
		**out = **in
	}
	if in.RefreshTokenMaxReuse != nil {
		in, out := &in.RefreshTokenMaxReuse, &out.RefreshTokenMaxReuse
		*out = new(float64)
		**out = **in
	}
	if in.RegistrationAllowed != nil {
		in, out := &in.RegistrationAllowed, &out.RegistrationAllowed
		*out = new(bool)
		**out = **in
	}
	if in.RegistrationEmailAsUsername != nil {
		in, out := &in.RegistrationEmailAsUsername, &out.RegistrationEmailAsUsername
		*out = new(bool)
		**out = **in
	}
	if in.RegistrationFlow != nil {
		in, out := &in.RegistrationFlow, &out.RegistrationFlow
		*out = new(string)
		**out = **in
	}
	if in.RememberMe != nil {
		in, out := &in.RememberMe, &out.RememberMe
		*out = new(bool)
		**out = **in
	}
	if in.ResetCredentialsFlow != nil {
		in, out := &in.ResetCredentialsFlow, &out.ResetCredentialsFlow
		*out = new(string)
		**out = **in
	}
	if in.ResetPasswordAllowed != nil {
		in, out := &in.ResetPasswordAllowed, &out.ResetPasswordAllowed
		*out = new(bool)
		**out = **in
	}
	if in.RevokeRefreshToken != nil {
		in, out := &in.RevokeRefreshToken, &out.RevokeRefreshToken
		*out = new(bool)
		**out = **in
	}
	if in.SMTPServer != nil {
		in, out := &in.SMTPServer, &out.SMTPServer
		*out = make([]SMTPServerInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SSLRequired != nil {
		in, out := &in.SSLRequired, &out.SSLRequired
		*out = new(string)
		**out = **in
	}
	if in.SecurityDefenses != nil {
		in, out := &in.SecurityDefenses, &out.SecurityDefenses
		*out = make([]SecurityDefensesInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SsoSessionIdleTimeout != nil {
		in, out := &in.SsoSessionIdleTimeout, &out.SsoSessionIdleTimeout
		*out = new(string)
		**out = **in
	}
	if in.SsoSessionIdleTimeoutRememberMe != nil {
		in, out := &in.SsoSessionIdleTimeoutRememberMe, &out.SsoSessionIdleTimeoutRememberMe
		*out = new(string)
		**out = **in
	}
	if in.SsoSessionMaxLifespan != nil {
		in, out := &in.SsoSessionMaxLifespan, &out.SsoSessionMaxLifespan
		*out = new(string)
		**out = **in
	}
	if in.SsoSessionMaxLifespanRememberMe != nil {
		in, out := &in.SsoSessionMaxLifespanRememberMe, &out.SsoSessionMaxLifespanRememberMe
		*out = new(string)
		**out = **in
	}
	if in.UserManagedAccess != nil {
		in, out := &in.UserManagedAccess, &out.UserManagedAccess
		*out = new(bool)
		**out = **in
	}
	if in.VerifyEmail != nil {
		in, out := &in.VerifyEmail, &out.VerifyEmail
		*out = new(bool)
		**out = **in
	}
	if in.WebAuthnPasswordlessPolicy != nil {
		in, out := &in.WebAuthnPasswordlessPolicy, &out.WebAuthnPasswordlessPolicy
		*out = make([]WebAuthnPasswordlessPolicyInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.WebAuthnPolicy != nil {
		in, out := &in.WebAuthnPolicy, &out.WebAuthnPolicy
		*out = make([]WebAuthnPolicyInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RealmInitParameters.
func (in *RealmInitParameters) DeepCopy() *RealmInitParameters {
	if in == nil {
		return nil
	}
	out := new(RealmInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RealmList) DeepCopyInto(out *RealmList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]Realm, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RealmList.
func (in *RealmList) DeepCopy() *RealmList {
	if in == nil {
		return nil
	}
	out := new(RealmList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *RealmList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RealmObservation) DeepCopyInto(out *RealmObservation) {
	*out = *in
	if in.AccessCodeLifespan != nil {
		in, out := &in.AccessCodeLifespan, &out.AccessCodeLifespan
		*out = new(string)
		**out = **in
	}
	if in.AccessCodeLifespanLogin != nil {
		in, out := &in.AccessCodeLifespanLogin, &out.AccessCodeLifespanLogin
		*out = new(string)
		**out = **in
	}
	if in.AccessCodeLifespanUserAction != nil {
		in, out := &in.AccessCodeLifespanUserAction, &out.AccessCodeLifespanUserAction
		*out = new(string)
		**out = **in
	}
	if in.AccessTokenLifespan != nil {
		in, out := &in.AccessTokenLifespan, &out.AccessTokenLifespan
		*out = new(string)
		**out = **in
	}
	if in.AccessTokenLifespanForImplicitFlow != nil {
		in, out := &in.AccessTokenLifespanForImplicitFlow, &out.AccessTokenLifespanForImplicitFlow
		*out = new(string)
		**out = **in
	}
	if in.AccountTheme != nil {
		in, out := &in.AccountTheme, &out.AccountTheme
		*out = new(string)
		**out = **in
	}
	if in.ActionTokenGeneratedByAdminLifespan != nil {
		in, out := &in.ActionTokenGeneratedByAdminLifespan, &out.ActionTokenGeneratedByAdminLifespan
		*out = new(string)
		**out = **in
	}
	if in.ActionTokenGeneratedByUserLifespan != nil {
		in, out := &in.ActionTokenGeneratedByUserLifespan, &out.ActionTokenGeneratedByUserLifespan
		*out = new(string)
		**out = **in
	}
	if in.AdminTheme != nil {
		in, out := &in.AdminTheme, &out.AdminTheme
		*out = new(string)
		**out = **in
	}
	if in.Attributes != nil {
		in, out := &in.Attributes, &out.Attributes
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.BrowserFlow != nil {
		in, out := &in.BrowserFlow, &out.BrowserFlow
		*out = new(string)
		**out = **in
	}
	if in.ClientAuthenticationFlow != nil {
		in, out := &in.ClientAuthenticationFlow, &out.ClientAuthenticationFlow
		*out = new(string)
		**out = **in
	}
	if in.ClientSessionIdleTimeout != nil {
		in, out := &in.ClientSessionIdleTimeout, &out.ClientSessionIdleTimeout
		*out = new(string)
		**out = **in
	}
	if in.ClientSessionMaxLifespan != nil {
		in, out := &in.ClientSessionMaxLifespan, &out.ClientSessionMaxLifespan
		*out = new(string)
		**out = **in
	}
	if in.DefaultDefaultClientScopes != nil {
		in, out := &in.DefaultDefaultClientScopes, &out.DefaultDefaultClientScopes
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DefaultOptionalClientScopes != nil {
		in, out := &in.DefaultOptionalClientScopes, &out.DefaultOptionalClientScopes
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DefaultSignatureAlgorithm != nil {
		in, out := &in.DefaultSignatureAlgorithm, &out.DefaultSignatureAlgorithm
		*out = new(string)
		**out = **in
	}
	if in.DirectGrantFlow != nil {
		in, out := &in.DirectGrantFlow, &out.DirectGrantFlow
		*out = new(string)
		**out = **in
	}
	if in.DisplayName != nil {
		in, out := &in.DisplayName, &out.DisplayName
		*out = new(string)
		**out = **in
	}
	if in.DisplayNameHTML != nil {
		in, out := &in.DisplayNameHTML, &out.DisplayNameHTML
		*out = new(string)
		**out = **in
	}
	if in.DockerAuthenticationFlow != nil {
		in, out := &in.DockerAuthenticationFlow, &out.DockerAuthenticationFlow
		*out = new(string)
		**out = **in
	}
	if in.DuplicateEmailsAllowed != nil {
		in, out := &in.DuplicateEmailsAllowed, &out.DuplicateEmailsAllowed
		*out = new(bool)
		**out = **in
	}
	if in.EditUsernameAllowed != nil {
		in, out := &in.EditUsernameAllowed, &out.EditUsernameAllowed
		*out = new(bool)
		**out = **in
	}
	if in.EmailTheme != nil {
		in, out := &in.EmailTheme, &out.EmailTheme
		*out = new(string)
		**out = **in
	}
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.InternalID != nil {
		in, out := &in.InternalID, &out.InternalID
		*out = new(string)
		**out = **in
	}
	if in.Internationalization != nil {
		in, out := &in.Internationalization, &out.Internationalization
		*out = make([]InternationalizationObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.LoginTheme != nil {
		in, out := &in.LoginTheme, &out.LoginTheme
		*out = new(string)
		**out = **in
	}
	if in.LoginWithEmailAllowed != nil {
		in, out := &in.LoginWithEmailAllowed, &out.LoginWithEmailAllowed
		*out = new(bool)
		**out = **in
	}
	if in.Oauth2DeviceCodeLifespan != nil {
		in, out := &in.Oauth2DeviceCodeLifespan, &out.Oauth2DeviceCodeLifespan
		*out = new(string)
		**out = **in
	}
	if in.Oauth2DevicePollingInterval != nil {
		in, out := &in.Oauth2DevicePollingInterval, &out.Oauth2DevicePollingInterval
		*out = new(float64)
		**out = **in
	}
	if in.OfflineSessionIdleTimeout != nil {
		in, out := &in.OfflineSessionIdleTimeout, &out.OfflineSessionIdleTimeout
		*out = new(string)
		**out = **in
	}
	if in.OfflineSessionMaxLifespan != nil {
		in, out := &in.OfflineSessionMaxLifespan, &out.OfflineSessionMaxLifespan
		*out = new(string)
		**out = **in
	}
	if in.OfflineSessionMaxLifespanEnabled != nil {
		in, out := &in.OfflineSessionMaxLifespanEnabled, &out.OfflineSessionMaxLifespanEnabled
		*out = new(bool)
		**out = **in
	}
	if in.OtpPolicy != nil {
		in, out := &in.OtpPolicy, &out.OtpPolicy
		*out = make([]OtpPolicyObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.PasswordPolicy != nil {
		in, out := &in.PasswordPolicy, &out.PasswordPolicy
		*out = new(string)
		**out = **in
	}
	if in.Realm != nil {
		in, out := &in.Realm, &out.Realm
		*out = new(string)
		**out = **in
	}
	if in.RefreshTokenMaxReuse != nil {
		in, out := &in.RefreshTokenMaxReuse, &out.RefreshTokenMaxReuse
		*out = new(float64)
		**out = **in
	}
	if in.RegistrationAllowed != nil {
		in, out := &in.RegistrationAllowed, &out.RegistrationAllowed
		*out = new(bool)
		**out = **in
	}
	if in.RegistrationEmailAsUsername != nil {
		in, out := &in.RegistrationEmailAsUsername, &out.RegistrationEmailAsUsername
		*out = new(bool)
		**out = **in
	}
	if in.RegistrationFlow != nil {
		in, out := &in.RegistrationFlow, &out.RegistrationFlow
		*out = new(string)
		**out = **in
	}
	if in.RememberMe != nil {
		in, out := &in.RememberMe, &out.RememberMe
		*out = new(bool)
		**out = **in
	}
	if in.ResetCredentialsFlow != nil {
		in, out := &in.ResetCredentialsFlow, &out.ResetCredentialsFlow
		*out = new(string)
		**out = **in
	}
	if in.ResetPasswordAllowed != nil {
		in, out := &in.ResetPasswordAllowed, &out.ResetPasswordAllowed
		*out = new(bool)
		**out = **in
	}
	if in.RevokeRefreshToken != nil {
		in, out := &in.RevokeRefreshToken, &out.RevokeRefreshToken
		*out = new(bool)
		**out = **in
	}
	if in.SMTPServer != nil {
		in, out := &in.SMTPServer, &out.SMTPServer
		*out = make([]SMTPServerObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SSLRequired != nil {
		in, out := &in.SSLRequired, &out.SSLRequired
		*out = new(string)
		**out = **in
	}
	if in.SecurityDefenses != nil {
		in, out := &in.SecurityDefenses, &out.SecurityDefenses
		*out = make([]SecurityDefensesObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SsoSessionIdleTimeout != nil {
		in, out := &in.SsoSessionIdleTimeout, &out.SsoSessionIdleTimeout
		*out = new(string)
		**out = **in
	}
	if in.SsoSessionIdleTimeoutRememberMe != nil {
		in, out := &in.SsoSessionIdleTimeoutRememberMe, &out.SsoSessionIdleTimeoutRememberMe
		*out = new(string)
		**out = **in
	}
	if in.SsoSessionMaxLifespan != nil {
		in, out := &in.SsoSessionMaxLifespan, &out.SsoSessionMaxLifespan
		*out = new(string)
		**out = **in
	}
	if in.SsoSessionMaxLifespanRememberMe != nil {
		in, out := &in.SsoSessionMaxLifespanRememberMe, &out.SsoSessionMaxLifespanRememberMe
		*out = new(string)
		**out = **in
	}
	if in.UserManagedAccess != nil {
		in, out := &in.UserManagedAccess, &out.UserManagedAccess
		*out = new(bool)
		**out = **in
	}
	if in.VerifyEmail != nil {
		in, out := &in.VerifyEmail, &out.VerifyEmail
		*out = new(bool)
		**out = **in
	}
	if in.WebAuthnPasswordlessPolicy != nil {
		in, out := &in.WebAuthnPasswordlessPolicy, &out.WebAuthnPasswordlessPolicy
		*out = make([]WebAuthnPasswordlessPolicyObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.WebAuthnPolicy != nil {
		in, out := &in.WebAuthnPolicy, &out.WebAuthnPolicy
		*out = make([]WebAuthnPolicyObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RealmObservation.
func (in *RealmObservation) DeepCopy() *RealmObservation {
	if in == nil {
		return nil
	}
	out := new(RealmObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RealmParameters) DeepCopyInto(out *RealmParameters) {
	*out = *in
	if in.AccessCodeLifespan != nil {
		in, out := &in.AccessCodeLifespan, &out.AccessCodeLifespan
		*out = new(string)
		**out = **in
	}
	if in.AccessCodeLifespanLogin != nil {
		in, out := &in.AccessCodeLifespanLogin, &out.AccessCodeLifespanLogin
		*out = new(string)
		**out = **in
	}
	if in.AccessCodeLifespanUserAction != nil {
		in, out := &in.AccessCodeLifespanUserAction, &out.AccessCodeLifespanUserAction
		*out = new(string)
		**out = **in
	}
	if in.AccessTokenLifespan != nil {
		in, out := &in.AccessTokenLifespan, &out.AccessTokenLifespan
		*out = new(string)
		**out = **in
	}
	if in.AccessTokenLifespanForImplicitFlow != nil {
		in, out := &in.AccessTokenLifespanForImplicitFlow, &out.AccessTokenLifespanForImplicitFlow
		*out = new(string)
		**out = **in
	}
	if in.AccountTheme != nil {
		in, out := &in.AccountTheme, &out.AccountTheme
		*out = new(string)
		**out = **in
	}
	if in.ActionTokenGeneratedByAdminLifespan != nil {
		in, out := &in.ActionTokenGeneratedByAdminLifespan, &out.ActionTokenGeneratedByAdminLifespan
		*out = new(string)
		**out = **in
	}
	if in.ActionTokenGeneratedByUserLifespan != nil {
		in, out := &in.ActionTokenGeneratedByUserLifespan, &out.ActionTokenGeneratedByUserLifespan
		*out = new(string)
		**out = **in
	}
	if in.AdminTheme != nil {
		in, out := &in.AdminTheme, &out.AdminTheme
		*out = new(string)
		**out = **in
	}
	if in.Attributes != nil {
		in, out := &in.Attributes, &out.Attributes
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.BrowserFlow != nil {
		in, out := &in.BrowserFlow, &out.BrowserFlow
		*out = new(string)
		**out = **in
	}
	if in.ClientAuthenticationFlow != nil {
		in, out := &in.ClientAuthenticationFlow, &out.ClientAuthenticationFlow
		*out = new(string)
		**out = **in
	}
	if in.ClientSessionIdleTimeout != nil {
		in, out := &in.ClientSessionIdleTimeout, &out.ClientSessionIdleTimeout
		*out = new(string)
		**out = **in
	}
	if in.ClientSessionMaxLifespan != nil {
		in, out := &in.ClientSessionMaxLifespan, &out.ClientSessionMaxLifespan
		*out = new(string)
		**out = **in
	}
	if in.DefaultDefaultClientScopes != nil {
		in, out := &in.DefaultDefaultClientScopes, &out.DefaultDefaultClientScopes
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DefaultOptionalClientScopes != nil {
		in, out := &in.DefaultOptionalClientScopes, &out.DefaultOptionalClientScopes
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DefaultSignatureAlgorithm != nil {
		in, out := &in.DefaultSignatureAlgorithm, &out.DefaultSignatureAlgorithm
		*out = new(string)
		**out = **in
	}
	if in.DirectGrantFlow != nil {
		in, out := &in.DirectGrantFlow, &out.DirectGrantFlow
		*out = new(string)
		**out = **in
	}
	if in.DisplayName != nil {
		in, out := &in.DisplayName, &out.DisplayName
		*out = new(string)
		**out = **in
	}
	if in.DisplayNameHTML != nil {
		in, out := &in.DisplayNameHTML, &out.DisplayNameHTML
		*out = new(string)
		**out = **in
	}
	if in.DockerAuthenticationFlow != nil {
		in, out := &in.DockerAuthenticationFlow, &out.DockerAuthenticationFlow
		*out = new(string)
		**out = **in
	}
	if in.DuplicateEmailsAllowed != nil {
		in, out := &in.DuplicateEmailsAllowed, &out.DuplicateEmailsAllowed
		*out = new(bool)
		**out = **in
	}
	if in.EditUsernameAllowed != nil {
		in, out := &in.EditUsernameAllowed, &out.EditUsernameAllowed
		*out = new(bool)
		**out = **in
	}
	if in.EmailTheme != nil {
		in, out := &in.EmailTheme, &out.EmailTheme
		*out = new(string)
		**out = **in
	}
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.InternalID != nil {
		in, out := &in.InternalID, &out.InternalID
		*out = new(string)
		**out = **in
	}
	if in.Internationalization != nil {
		in, out := &in.Internationalization, &out.Internationalization
		*out = make([]InternationalizationParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.LoginTheme != nil {
		in, out := &in.LoginTheme, &out.LoginTheme
		*out = new(string)
		**out = **in
	}
	if in.LoginWithEmailAllowed != nil {
		in, out := &in.LoginWithEmailAllowed, &out.LoginWithEmailAllowed
		*out = new(bool)
		**out = **in
	}
	if in.Oauth2DeviceCodeLifespan != nil {
		in, out := &in.Oauth2DeviceCodeLifespan, &out.Oauth2DeviceCodeLifespan
		*out = new(string)
		**out = **in
	}
	if in.Oauth2DevicePollingInterval != nil {
		in, out := &in.Oauth2DevicePollingInterval, &out.Oauth2DevicePollingInterval
		*out = new(float64)
		**out = **in
	}
	if in.OfflineSessionIdleTimeout != nil {
		in, out := &in.OfflineSessionIdleTimeout, &out.OfflineSessionIdleTimeout
		*out = new(string)
		**out = **in
	}
	if in.OfflineSessionMaxLifespan != nil {
		in, out := &in.OfflineSessionMaxLifespan, &out.OfflineSessionMaxLifespan
		*out = new(string)
		**out = **in
	}
	if in.OfflineSessionMaxLifespanEnabled != nil {
		in, out := &in.OfflineSessionMaxLifespanEnabled, &out.OfflineSessionMaxLifespanEnabled
		*out = new(bool)
		**out = **in
	}
	if in.OtpPolicy != nil {
		in, out := &in.OtpPolicy, &out.OtpPolicy
		*out = make([]OtpPolicyParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.PasswordPolicy != nil {
		in, out := &in.PasswordPolicy, &out.PasswordPolicy
		*out = new(string)
		**out = **in
	}
	if in.Realm != nil {
		in, out := &in.Realm, &out.Realm
		*out = new(string)
		**out = **in
	}
	if in.RefreshTokenMaxReuse != nil {
		in, out := &in.RefreshTokenMaxReuse, &out.RefreshTokenMaxReuse
		*out = new(float64)
		**out = **in
	}
	if in.RegistrationAllowed != nil {
		in, out := &in.RegistrationAllowed, &out.RegistrationAllowed
		*out = new(bool)
		**out = **in
	}
	if in.RegistrationEmailAsUsername != nil {
		in, out := &in.RegistrationEmailAsUsername, &out.RegistrationEmailAsUsername
		*out = new(bool)
		**out = **in
	}
	if in.RegistrationFlow != nil {
		in, out := &in.RegistrationFlow, &out.RegistrationFlow
		*out = new(string)
		**out = **in
	}
	if in.RememberMe != nil {
		in, out := &in.RememberMe, &out.RememberMe
		*out = new(bool)
		**out = **in
	}
	if in.ResetCredentialsFlow != nil {
		in, out := &in.ResetCredentialsFlow, &out.ResetCredentialsFlow
		*out = new(string)
		**out = **in
	}
	if in.ResetPasswordAllowed != nil {
		in, out := &in.ResetPasswordAllowed, &out.ResetPasswordAllowed
		*out = new(bool)
		**out = **in
	}
	if in.RevokeRefreshToken != nil {
		in, out := &in.RevokeRefreshToken, &out.RevokeRefreshToken
		*out = new(bool)
		**out = **in
	}
	if in.SMTPServer != nil {
		in, out := &in.SMTPServer, &out.SMTPServer
		*out = make([]SMTPServerParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SSLRequired != nil {
		in, out := &in.SSLRequired, &out.SSLRequired
		*out = new(string)
		**out = **in
	}
	if in.SecurityDefenses != nil {
		in, out := &in.SecurityDefenses, &out.SecurityDefenses
		*out = make([]SecurityDefensesParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SsoSessionIdleTimeout != nil {
		in, out := &in.SsoSessionIdleTimeout, &out.SsoSessionIdleTimeout
		*out = new(string)
		**out = **in
	}
	if in.SsoSessionIdleTimeoutRememberMe != nil {
		in, out := &in.SsoSessionIdleTimeoutRememberMe, &out.SsoSessionIdleTimeoutRememberMe
		*out = new(string)
		**out = **in
	}
	if in.SsoSessionMaxLifespan != nil {
		in, out := &in.SsoSessionMaxLifespan, &out.SsoSessionMaxLifespan
		*out = new(string)
		**out = **in
	}
	if in.SsoSessionMaxLifespanRememberMe != nil {
		in, out := &in.SsoSessionMaxLifespanRememberMe, &out.SsoSessionMaxLifespanRememberMe
		*out = new(string)
		**out = **in
	}
	if in.UserManagedAccess != nil {
		in, out := &in.UserManagedAccess, &out.UserManagedAccess
		*out = new(bool)
		**out = **in
	}
	if in.VerifyEmail != nil {
		in, out := &in.VerifyEmail, &out.VerifyEmail
		*out = new(bool)
		**out = **in
	}
	if in.WebAuthnPasswordlessPolicy != nil {
		in, out := &in.WebAuthnPasswordlessPolicy, &out.WebAuthnPasswordlessPolicy
		*out = make([]WebAuthnPasswordlessPolicyParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.WebAuthnPolicy != nil {
		in, out := &in.WebAuthnPolicy, &out.WebAuthnPolicy
		*out = make([]WebAuthnPolicyParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RealmParameters.
func (in *RealmParameters) DeepCopy() *RealmParameters {
	if in == nil {
		return nil
	}
	out := new(RealmParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RealmSpec) DeepCopyInto(out *RealmSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RealmSpec.
func (in *RealmSpec) DeepCopy() *RealmSpec {
	if in == nil {
		return nil
	}
	out := new(RealmSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RealmStatus) DeepCopyInto(out *RealmStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RealmStatus.
func (in *RealmStatus) DeepCopy() *RealmStatus {
	if in == nil {
		return nil
	}
	out := new(RealmStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RequiredAction) DeepCopyInto(out *RequiredAction) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RequiredAction.
func (in *RequiredAction) DeepCopy() *RequiredAction {
	if in == nil {
		return nil
	}
	out := new(RequiredAction)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *RequiredAction) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RequiredActionInitParameters) DeepCopyInto(out *RequiredActionInitParameters) {
	*out = *in
	if in.Alias != nil {
		in, out := &in.Alias, &out.Alias
		*out = new(string)
		**out = **in
	}
	if in.DefaultAction != nil {
		in, out := &in.DefaultAction, &out.DefaultAction
		*out = new(bool)
		**out = **in
	}
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Priority != nil {
		in, out := &in.Priority, &out.Priority
		*out = new(float64)
		**out = **in
	}
	if in.RealmID != nil {
		in, out := &in.RealmID, &out.RealmID
		*out = new(string)
		**out = **in
	}
	if in.RealmIDRef != nil {
		in, out := &in.RealmIDRef, &out.RealmIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.RealmIDSelector != nil {
		in, out := &in.RealmIDSelector, &out.RealmIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RequiredActionInitParameters.
func (in *RequiredActionInitParameters) DeepCopy() *RequiredActionInitParameters {
	if in == nil {
		return nil
	}
	out := new(RequiredActionInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RequiredActionList) DeepCopyInto(out *RequiredActionList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]RequiredAction, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RequiredActionList.
func (in *RequiredActionList) DeepCopy() *RequiredActionList {
	if in == nil {
		return nil
	}
	out := new(RequiredActionList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *RequiredActionList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RequiredActionObservation) DeepCopyInto(out *RequiredActionObservation) {
	*out = *in
	if in.Alias != nil {
		in, out := &in.Alias, &out.Alias
		*out = new(string)
		**out = **in
	}
	if in.DefaultAction != nil {
		in, out := &in.DefaultAction, &out.DefaultAction
		*out = new(bool)
		**out = **in
	}
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Priority != nil {
		in, out := &in.Priority, &out.Priority
		*out = new(float64)
		**out = **in
	}
	if in.RealmID != nil {
		in, out := &in.RealmID, &out.RealmID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RequiredActionObservation.
func (in *RequiredActionObservation) DeepCopy() *RequiredActionObservation {
	if in == nil {
		return nil
	}
	out := new(RequiredActionObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RequiredActionParameters) DeepCopyInto(out *RequiredActionParameters) {
	*out = *in
	if in.Alias != nil {
		in, out := &in.Alias, &out.Alias
		*out = new(string)
		**out = **in
	}
	if in.DefaultAction != nil {
		in, out := &in.DefaultAction, &out.DefaultAction
		*out = new(bool)
		**out = **in
	}
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Priority != nil {
		in, out := &in.Priority, &out.Priority
		*out = new(float64)
		**out = **in
	}
	if in.RealmID != nil {
		in, out := &in.RealmID, &out.RealmID
		*out = new(string)
		**out = **in
	}
	if in.RealmIDRef != nil {
		in, out := &in.RealmIDRef, &out.RealmIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.RealmIDSelector != nil {
		in, out := &in.RealmIDSelector, &out.RealmIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RequiredActionParameters.
func (in *RequiredActionParameters) DeepCopy() *RequiredActionParameters {
	if in == nil {
		return nil
	}
	out := new(RequiredActionParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RequiredActionSpec) DeepCopyInto(out *RequiredActionSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RequiredActionSpec.
func (in *RequiredActionSpec) DeepCopy() *RequiredActionSpec {
	if in == nil {
		return nil
	}
	out := new(RequiredActionSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RequiredActionStatus) DeepCopyInto(out *RequiredActionStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RequiredActionStatus.
func (in *RequiredActionStatus) DeepCopy() *RequiredActionStatus {
	if in == nil {
		return nil
	}
	out := new(RequiredActionStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SMTPServerInitParameters) DeepCopyInto(out *SMTPServerInitParameters) {
	*out = *in
	if in.Auth != nil {
		in, out := &in.Auth, &out.Auth
		*out = make([]AuthInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.EnvelopeFrom != nil {
		in, out := &in.EnvelopeFrom, &out.EnvelopeFrom
		*out = new(string)
		**out = **in
	}
	if in.From != nil {
		in, out := &in.From, &out.From
		*out = new(string)
		**out = **in
	}
	if in.FromDisplayName != nil {
		in, out := &in.FromDisplayName, &out.FromDisplayName
		*out = new(string)
		**out = **in
	}
	if in.Host != nil {
		in, out := &in.Host, &out.Host
		*out = new(string)
		**out = **in
	}
	if in.Port != nil {
		in, out := &in.Port, &out.Port
		*out = new(string)
		**out = **in
	}
	if in.ReplyTo != nil {
		in, out := &in.ReplyTo, &out.ReplyTo
		*out = new(string)
		**out = **in
	}
	if in.ReplyToDisplayName != nil {
		in, out := &in.ReplyToDisplayName, &out.ReplyToDisplayName
		*out = new(string)
		**out = **in
	}
	if in.SSL != nil {
		in, out := &in.SSL, &out.SSL
		*out = new(bool)
		**out = **in
	}
	if in.Starttls != nil {
		in, out := &in.Starttls, &out.Starttls
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SMTPServerInitParameters.
func (in *SMTPServerInitParameters) DeepCopy() *SMTPServerInitParameters {
	if in == nil {
		return nil
	}
	out := new(SMTPServerInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SMTPServerObservation) DeepCopyInto(out *SMTPServerObservation) {
	*out = *in
	if in.Auth != nil {
		in, out := &in.Auth, &out.Auth
		*out = make([]AuthObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.EnvelopeFrom != nil {
		in, out := &in.EnvelopeFrom, &out.EnvelopeFrom
		*out = new(string)
		**out = **in
	}
	if in.From != nil {
		in, out := &in.From, &out.From
		*out = new(string)
		**out = **in
	}
	if in.FromDisplayName != nil {
		in, out := &in.FromDisplayName, &out.FromDisplayName
		*out = new(string)
		**out = **in
	}
	if in.Host != nil {
		in, out := &in.Host, &out.Host
		*out = new(string)
		**out = **in
	}
	if in.Port != nil {
		in, out := &in.Port, &out.Port
		*out = new(string)
		**out = **in
	}
	if in.ReplyTo != nil {
		in, out := &in.ReplyTo, &out.ReplyTo
		*out = new(string)
		**out = **in
	}
	if in.ReplyToDisplayName != nil {
		in, out := &in.ReplyToDisplayName, &out.ReplyToDisplayName
		*out = new(string)
		**out = **in
	}
	if in.SSL != nil {
		in, out := &in.SSL, &out.SSL
		*out = new(bool)
		**out = **in
	}
	if in.Starttls != nil {
		in, out := &in.Starttls, &out.Starttls
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SMTPServerObservation.
func (in *SMTPServerObservation) DeepCopy() *SMTPServerObservation {
	if in == nil {
		return nil
	}
	out := new(SMTPServerObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SMTPServerParameters) DeepCopyInto(out *SMTPServerParameters) {
	*out = *in
	if in.Auth != nil {
		in, out := &in.Auth, &out.Auth
		*out = make([]AuthParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.EnvelopeFrom != nil {
		in, out := &in.EnvelopeFrom, &out.EnvelopeFrom
		*out = new(string)
		**out = **in
	}
	if in.From != nil {
		in, out := &in.From, &out.From
		*out = new(string)
		**out = **in
	}
	if in.FromDisplayName != nil {
		in, out := &in.FromDisplayName, &out.FromDisplayName
		*out = new(string)
		**out = **in
	}
	if in.Host != nil {
		in, out := &in.Host, &out.Host
		*out = new(string)
		**out = **in
	}
	if in.Port != nil {
		in, out := &in.Port, &out.Port
		*out = new(string)
		**out = **in
	}
	if in.ReplyTo != nil {
		in, out := &in.ReplyTo, &out.ReplyTo
		*out = new(string)
		**out = **in
	}
	if in.ReplyToDisplayName != nil {
		in, out := &in.ReplyToDisplayName, &out.ReplyToDisplayName
		*out = new(string)
		**out = **in
	}
	if in.SSL != nil {
		in, out := &in.SSL, &out.SSL
		*out = new(bool)
		**out = **in
	}
	if in.Starttls != nil {
		in, out := &in.Starttls, &out.Starttls
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SMTPServerParameters.
func (in *SMTPServerParameters) DeepCopy() *SMTPServerParameters {
	if in == nil {
		return nil
	}
	out := new(SMTPServerParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecurityDefensesInitParameters) DeepCopyInto(out *SecurityDefensesInitParameters) {
	*out = *in
	if in.BruteForceDetection != nil {
		in, out := &in.BruteForceDetection, &out.BruteForceDetection
		*out = make([]BruteForceDetectionInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Headers != nil {
		in, out := &in.Headers, &out.Headers
		*out = make([]HeadersInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecurityDefensesInitParameters.
func (in *SecurityDefensesInitParameters) DeepCopy() *SecurityDefensesInitParameters {
	if in == nil {
		return nil
	}
	out := new(SecurityDefensesInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecurityDefensesObservation) DeepCopyInto(out *SecurityDefensesObservation) {
	*out = *in
	if in.BruteForceDetection != nil {
		in, out := &in.BruteForceDetection, &out.BruteForceDetection
		*out = make([]BruteForceDetectionObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Headers != nil {
		in, out := &in.Headers, &out.Headers
		*out = make([]HeadersObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecurityDefensesObservation.
func (in *SecurityDefensesObservation) DeepCopy() *SecurityDefensesObservation {
	if in == nil {
		return nil
	}
	out := new(SecurityDefensesObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecurityDefensesParameters) DeepCopyInto(out *SecurityDefensesParameters) {
	*out = *in
	if in.BruteForceDetection != nil {
		in, out := &in.BruteForceDetection, &out.BruteForceDetection
		*out = make([]BruteForceDetectionParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Headers != nil {
		in, out := &in.Headers, &out.Headers
		*out = make([]HeadersParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecurityDefensesParameters.
func (in *SecurityDefensesParameters) DeepCopy() *SecurityDefensesParameters {
	if in == nil {
		return nil
	}
	out := new(SecurityDefensesParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WebAuthnPasswordlessPolicyInitParameters) DeepCopyInto(out *WebAuthnPasswordlessPolicyInitParameters) {
	*out = *in
	if in.AcceptableAaguids != nil {
		in, out := &in.AcceptableAaguids, &out.AcceptableAaguids
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.AttestationConveyancePreference != nil {
		in, out := &in.AttestationConveyancePreference, &out.AttestationConveyancePreference
		*out = new(string)
		**out = **in
	}
	if in.AuthenticatorAttachment != nil {
		in, out := &in.AuthenticatorAttachment, &out.AuthenticatorAttachment
		*out = new(string)
		**out = **in
	}
	if in.AvoidSameAuthenticatorRegister != nil {
		in, out := &in.AvoidSameAuthenticatorRegister, &out.AvoidSameAuthenticatorRegister
		*out = new(bool)
		**out = **in
	}
	if in.CreateTimeout != nil {
		in, out := &in.CreateTimeout, &out.CreateTimeout
		*out = new(float64)
		**out = **in
	}
	if in.RelyingPartyEntityName != nil {
		in, out := &in.RelyingPartyEntityName, &out.RelyingPartyEntityName
		*out = new(string)
		**out = **in
	}
	if in.RelyingPartyID != nil {
		in, out := &in.RelyingPartyID, &out.RelyingPartyID
		*out = new(string)
		**out = **in
	}
	if in.RequireResidentKey != nil {
		in, out := &in.RequireResidentKey, &out.RequireResidentKey
		*out = new(string)
		**out = **in
	}
	if in.SignatureAlgorithms != nil {
		in, out := &in.SignatureAlgorithms, &out.SignatureAlgorithms
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.UserVerificationRequirement != nil {
		in, out := &in.UserVerificationRequirement, &out.UserVerificationRequirement
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WebAuthnPasswordlessPolicyInitParameters.
func (in *WebAuthnPasswordlessPolicyInitParameters) DeepCopy() *WebAuthnPasswordlessPolicyInitParameters {
	if in == nil {
		return nil
	}
	out := new(WebAuthnPasswordlessPolicyInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WebAuthnPasswordlessPolicyObservation) DeepCopyInto(out *WebAuthnPasswordlessPolicyObservation) {
	*out = *in
	if in.AcceptableAaguids != nil {
		in, out := &in.AcceptableAaguids, &out.AcceptableAaguids
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.AttestationConveyancePreference != nil {
		in, out := &in.AttestationConveyancePreference, &out.AttestationConveyancePreference
		*out = new(string)
		**out = **in
	}
	if in.AuthenticatorAttachment != nil {
		in, out := &in.AuthenticatorAttachment, &out.AuthenticatorAttachment
		*out = new(string)
		**out = **in
	}
	if in.AvoidSameAuthenticatorRegister != nil {
		in, out := &in.AvoidSameAuthenticatorRegister, &out.AvoidSameAuthenticatorRegister
		*out = new(bool)
		**out = **in
	}
	if in.CreateTimeout != nil {
		in, out := &in.CreateTimeout, &out.CreateTimeout
		*out = new(float64)
		**out = **in
	}
	if in.RelyingPartyEntityName != nil {
		in, out := &in.RelyingPartyEntityName, &out.RelyingPartyEntityName
		*out = new(string)
		**out = **in
	}
	if in.RelyingPartyID != nil {
		in, out := &in.RelyingPartyID, &out.RelyingPartyID
		*out = new(string)
		**out = **in
	}
	if in.RequireResidentKey != nil {
		in, out := &in.RequireResidentKey, &out.RequireResidentKey
		*out = new(string)
		**out = **in
	}
	if in.SignatureAlgorithms != nil {
		in, out := &in.SignatureAlgorithms, &out.SignatureAlgorithms
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.UserVerificationRequirement != nil {
		in, out := &in.UserVerificationRequirement, &out.UserVerificationRequirement
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WebAuthnPasswordlessPolicyObservation.
func (in *WebAuthnPasswordlessPolicyObservation) DeepCopy() *WebAuthnPasswordlessPolicyObservation {
	if in == nil {
		return nil
	}
	out := new(WebAuthnPasswordlessPolicyObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WebAuthnPasswordlessPolicyParameters) DeepCopyInto(out *WebAuthnPasswordlessPolicyParameters) {
	*out = *in
	if in.AcceptableAaguids != nil {
		in, out := &in.AcceptableAaguids, &out.AcceptableAaguids
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.AttestationConveyancePreference != nil {
		in, out := &in.AttestationConveyancePreference, &out.AttestationConveyancePreference
		*out = new(string)
		**out = **in
	}
	if in.AuthenticatorAttachment != nil {
		in, out := &in.AuthenticatorAttachment, &out.AuthenticatorAttachment
		*out = new(string)
		**out = **in
	}
	if in.AvoidSameAuthenticatorRegister != nil {
		in, out := &in.AvoidSameAuthenticatorRegister, &out.AvoidSameAuthenticatorRegister
		*out = new(bool)
		**out = **in
	}
	if in.CreateTimeout != nil {
		in, out := &in.CreateTimeout, &out.CreateTimeout
		*out = new(float64)
		**out = **in
	}
	if in.RelyingPartyEntityName != nil {
		in, out := &in.RelyingPartyEntityName, &out.RelyingPartyEntityName
		*out = new(string)
		**out = **in
	}
	if in.RelyingPartyID != nil {
		in, out := &in.RelyingPartyID, &out.RelyingPartyID
		*out = new(string)
		**out = **in
	}
	if in.RequireResidentKey != nil {
		in, out := &in.RequireResidentKey, &out.RequireResidentKey
		*out = new(string)
		**out = **in
	}
	if in.SignatureAlgorithms != nil {
		in, out := &in.SignatureAlgorithms, &out.SignatureAlgorithms
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.UserVerificationRequirement != nil {
		in, out := &in.UserVerificationRequirement, &out.UserVerificationRequirement
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WebAuthnPasswordlessPolicyParameters.
func (in *WebAuthnPasswordlessPolicyParameters) DeepCopy() *WebAuthnPasswordlessPolicyParameters {
	if in == nil {
		return nil
	}
	out := new(WebAuthnPasswordlessPolicyParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WebAuthnPolicyInitParameters) DeepCopyInto(out *WebAuthnPolicyInitParameters) {
	*out = *in
	if in.AcceptableAaguids != nil {
		in, out := &in.AcceptableAaguids, &out.AcceptableAaguids
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.AttestationConveyancePreference != nil {
		in, out := &in.AttestationConveyancePreference, &out.AttestationConveyancePreference
		*out = new(string)
		**out = **in
	}
	if in.AuthenticatorAttachment != nil {
		in, out := &in.AuthenticatorAttachment, &out.AuthenticatorAttachment
		*out = new(string)
		**out = **in
	}
	if in.AvoidSameAuthenticatorRegister != nil {
		in, out := &in.AvoidSameAuthenticatorRegister, &out.AvoidSameAuthenticatorRegister
		*out = new(bool)
		**out = **in
	}
	if in.CreateTimeout != nil {
		in, out := &in.CreateTimeout, &out.CreateTimeout
		*out = new(float64)
		**out = **in
	}
	if in.RelyingPartyEntityName != nil {
		in, out := &in.RelyingPartyEntityName, &out.RelyingPartyEntityName
		*out = new(string)
		**out = **in
	}
	if in.RelyingPartyID != nil {
		in, out := &in.RelyingPartyID, &out.RelyingPartyID
		*out = new(string)
		**out = **in
	}
	if in.RequireResidentKey != nil {
		in, out := &in.RequireResidentKey, &out.RequireResidentKey
		*out = new(string)
		**out = **in
	}
	if in.SignatureAlgorithms != nil {
		in, out := &in.SignatureAlgorithms, &out.SignatureAlgorithms
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.UserVerificationRequirement != nil {
		in, out := &in.UserVerificationRequirement, &out.UserVerificationRequirement
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WebAuthnPolicyInitParameters.
func (in *WebAuthnPolicyInitParameters) DeepCopy() *WebAuthnPolicyInitParameters {
	if in == nil {
		return nil
	}
	out := new(WebAuthnPolicyInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WebAuthnPolicyObservation) DeepCopyInto(out *WebAuthnPolicyObservation) {
	*out = *in
	if in.AcceptableAaguids != nil {
		in, out := &in.AcceptableAaguids, &out.AcceptableAaguids
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.AttestationConveyancePreference != nil {
		in, out := &in.AttestationConveyancePreference, &out.AttestationConveyancePreference
		*out = new(string)
		**out = **in
	}
	if in.AuthenticatorAttachment != nil {
		in, out := &in.AuthenticatorAttachment, &out.AuthenticatorAttachment
		*out = new(string)
		**out = **in
	}
	if in.AvoidSameAuthenticatorRegister != nil {
		in, out := &in.AvoidSameAuthenticatorRegister, &out.AvoidSameAuthenticatorRegister
		*out = new(bool)
		**out = **in
	}
	if in.CreateTimeout != nil {
		in, out := &in.CreateTimeout, &out.CreateTimeout
		*out = new(float64)
		**out = **in
	}
	if in.RelyingPartyEntityName != nil {
		in, out := &in.RelyingPartyEntityName, &out.RelyingPartyEntityName
		*out = new(string)
		**out = **in
	}
	if in.RelyingPartyID != nil {
		in, out := &in.RelyingPartyID, &out.RelyingPartyID
		*out = new(string)
		**out = **in
	}
	if in.RequireResidentKey != nil {
		in, out := &in.RequireResidentKey, &out.RequireResidentKey
		*out = new(string)
		**out = **in
	}
	if in.SignatureAlgorithms != nil {
		in, out := &in.SignatureAlgorithms, &out.SignatureAlgorithms
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.UserVerificationRequirement != nil {
		in, out := &in.UserVerificationRequirement, &out.UserVerificationRequirement
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WebAuthnPolicyObservation.
func (in *WebAuthnPolicyObservation) DeepCopy() *WebAuthnPolicyObservation {
	if in == nil {
		return nil
	}
	out := new(WebAuthnPolicyObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WebAuthnPolicyParameters) DeepCopyInto(out *WebAuthnPolicyParameters) {
	*out = *in
	if in.AcceptableAaguids != nil {
		in, out := &in.AcceptableAaguids, &out.AcceptableAaguids
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.AttestationConveyancePreference != nil {
		in, out := &in.AttestationConveyancePreference, &out.AttestationConveyancePreference
		*out = new(string)
		**out = **in
	}
	if in.AuthenticatorAttachment != nil {
		in, out := &in.AuthenticatorAttachment, &out.AuthenticatorAttachment
		*out = new(string)
		**out = **in
	}
	if in.AvoidSameAuthenticatorRegister != nil {
		in, out := &in.AvoidSameAuthenticatorRegister, &out.AvoidSameAuthenticatorRegister
		*out = new(bool)
		**out = **in
	}
	if in.CreateTimeout != nil {
		in, out := &in.CreateTimeout, &out.CreateTimeout
		*out = new(float64)
		**out = **in
	}
	if in.RelyingPartyEntityName != nil {
		in, out := &in.RelyingPartyEntityName, &out.RelyingPartyEntityName
		*out = new(string)
		**out = **in
	}
	if in.RelyingPartyID != nil {
		in, out := &in.RelyingPartyID, &out.RelyingPartyID
		*out = new(string)
		**out = **in
	}
	if in.RequireResidentKey != nil {
		in, out := &in.RequireResidentKey, &out.RequireResidentKey
		*out = new(string)
		**out = **in
	}
	if in.SignatureAlgorithms != nil {
		in, out := &in.SignatureAlgorithms, &out.SignatureAlgorithms
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.UserVerificationRequirement != nil {
		in, out := &in.UserVerificationRequirement, &out.UserVerificationRequirement
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WebAuthnPolicyParameters.
func (in *WebAuthnPolicyParameters) DeepCopy() *WebAuthnPolicyParameters {
	if in == nil {
		return nil
	}
	out := new(WebAuthnPolicyParameters)
	in.DeepCopyInto(out)
	return out
}
