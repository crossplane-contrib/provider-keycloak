/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
	v2 "github.com/crossplane/crossplane-runtime/v2/apis/common/v2"
)

type ClientAuthorizationResourceInitParameters struct {

	// +mapType=granular
	Attributes map[string]*string `json:"attributes,omitempty" tf:"attributes,omitempty"`

	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	IconURI *string `json:"iconUri,omitempty" tf:"icon_uri,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	OwnerManagedAccess *bool `json:"ownerManagedAccess,omitempty" tf:"owner_managed_access,omitempty"`

	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-keycloak/apis/namespaced/realm/v1alpha1.Realm
	RealmID *string `json:"realmId,omitempty" tf:"realm_id,omitempty"`

	// Reference to a Realm in realm to populate realmId.
	// +kubebuilder:validation:Optional
	RealmIDRef *v1.NamespacedReference `json:"realmIdRef,omitempty" tf:"-"`

	// Selector for a Realm in realm to populate realmId.
	// +kubebuilder:validation:Optional
	RealmIDSelector *v1.NamespacedSelector `json:"realmIdSelector,omitempty" tf:"-"`

	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-keycloak/apis/namespaced/openidclient/v1alpha1.Client
	// +crossplane:generate:reference:extractor=github.com/crossplane-contrib/provider-keycloak/config/common.UUIDExtractor()
	ResourceServerID *string `json:"resourceServerId,omitempty" tf:"resource_server_id,omitempty"`

	// Reference to a Client in openidclient to populate resourceServerId.
	// +kubebuilder:validation:Optional
	ResourceServerIDRef *v1.NamespacedReference `json:"resourceServerIdRef,omitempty" tf:"-"`

	// Selector for a Client in openidclient to populate resourceServerId.
	// +kubebuilder:validation:Optional
	ResourceServerIDSelector *v1.NamespacedSelector `json:"resourceServerIdSelector,omitempty" tf:"-"`

	// +listType=set
	Scopes []*string `json:"scopes,omitempty" tf:"scopes,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// +listType=set
	Uris []*string `json:"uris,omitempty" tf:"uris,omitempty"`
}

type ClientAuthorizationResourceObservation struct {

	// +mapType=granular
	Attributes map[string]*string `json:"attributes,omitempty" tf:"attributes,omitempty"`

	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	IconURI *string `json:"iconUri,omitempty" tf:"icon_uri,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	OwnerManagedAccess *bool `json:"ownerManagedAccess,omitempty" tf:"owner_managed_access,omitempty"`

	RealmID *string `json:"realmId,omitempty" tf:"realm_id,omitempty"`

	ResourceServerID *string `json:"resourceServerId,omitempty" tf:"resource_server_id,omitempty"`

	// +listType=set
	Scopes []*string `json:"scopes,omitempty" tf:"scopes,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// +listType=set
	Uris []*string `json:"uris,omitempty" tf:"uris,omitempty"`
}

type ClientAuthorizationResourceParameters struct {

	// +kubebuilder:validation:Optional
	// +mapType=granular
	Attributes map[string]*string `json:"attributes,omitempty" tf:"attributes,omitempty"`

	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// +kubebuilder:validation:Optional
	IconURI *string `json:"iconUri,omitempty" tf:"icon_uri,omitempty"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	OwnerManagedAccess *bool `json:"ownerManagedAccess,omitempty" tf:"owner_managed_access,omitempty"`

	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-keycloak/apis/namespaced/realm/v1alpha1.Realm
	// +kubebuilder:validation:Optional
	RealmID *string `json:"realmId,omitempty" tf:"realm_id,omitempty"`

	// Reference to a Realm in realm to populate realmId.
	// +kubebuilder:validation:Optional
	RealmIDRef *v1.NamespacedReference `json:"realmIdRef,omitempty" tf:"-"`

	// Selector for a Realm in realm to populate realmId.
	// +kubebuilder:validation:Optional
	RealmIDSelector *v1.NamespacedSelector `json:"realmIdSelector,omitempty" tf:"-"`

	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-keycloak/apis/namespaced/openidclient/v1alpha1.Client
	// +crossplane:generate:reference:extractor=github.com/crossplane-contrib/provider-keycloak/config/common.UUIDExtractor()
	// +kubebuilder:validation:Optional
	ResourceServerID *string `json:"resourceServerId,omitempty" tf:"resource_server_id,omitempty"`

	// Reference to a Client in openidclient to populate resourceServerId.
	// +kubebuilder:validation:Optional
	ResourceServerIDRef *v1.NamespacedReference `json:"resourceServerIdRef,omitempty" tf:"-"`

	// Selector for a Client in openidclient to populate resourceServerId.
	// +kubebuilder:validation:Optional
	ResourceServerIDSelector *v1.NamespacedSelector `json:"resourceServerIdSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	// +listType=set
	Scopes []*string `json:"scopes,omitempty" tf:"scopes,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// +kubebuilder:validation:Optional
	// +listType=set
	Uris []*string `json:"uris,omitempty" tf:"uris,omitempty"`
}

// ClientAuthorizationResourceSpec defines the desired state of ClientAuthorizationResource
type ClientAuthorizationResourceSpec struct {
	v2.ManagedResourceSpec `json:",inline"`
	ForProvider            ClientAuthorizationResourceParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ClientAuthorizationResourceInitParameters `json:"initProvider,omitempty"`
}

// ClientAuthorizationResourceStatus defines the observed state of ClientAuthorizationResource.
type ClientAuthorizationResourceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ClientAuthorizationResourceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ClientAuthorizationResource is the Schema for the ClientAuthorizationResources API. <no value>
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Namespaced,categories={crossplane,managed,keycloak}
type ClientAuthorizationResource struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   ClientAuthorizationResourceSpec   `json:"spec"`
	Status ClientAuthorizationResourceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ClientAuthorizationResourceList contains a list of ClientAuthorizationResources
type ClientAuthorizationResourceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ClientAuthorizationResource `json:"items"`
}

// Repository type metadata.
var (
	ClientAuthorizationResource_Kind             = "ClientAuthorizationResource"
	ClientAuthorizationResource_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ClientAuthorizationResource_Kind}.String()
	ClientAuthorizationResource_KindAPIVersion   = ClientAuthorizationResource_Kind + "." + CRDGroupVersion.String()
	ClientAuthorizationResource_GroupVersionKind = CRDGroupVersion.WithKind(ClientAuthorizationResource_Kind)
)

func init() {
	SchemeBuilder.Register(&ClientAuthorizationResource{}, &ClientAuthorizationResourceList{})
}
