/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
	v2 "github.com/crossplane/crossplane-runtime/v2/apis/common/v2"
)

type UserFederationInitParameters struct {

	// Can be one of DEFAULT, EVICT_DAILY, EVICT_WEEKLY, MAX_LIFESPAN, or NO_CACHE. Defaults to DEFAULT.
	CachePolicy *string `json:"cachePolicy,omitempty" tf:"cache_policy,omitempty"`

	// How frequently Keycloak should sync changed users, in seconds. Omit this property to disable periodic changed users sync.
	// How frequently Keycloak should sync changed users, in seconds. Omit this property to disable periodic changed users sync.
	ChangedSyncPeriod *float64 `json:"changedSyncPeriod,omitempty" tf:"changed_sync_period,omitempty"`

	// The provider configuration handed over to your custom user federation provider. In order to add multivalued settings, use ## to separate the values.
	// +mapType=granular
	Config map[string]*string `json:"config,omitempty" tf:"config,omitempty"`

	// When false, this provider will not be used when performing queries for users. Defaults to true.
	// When false, this provider will not be used when performing queries for users.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// How frequently Keycloak should sync all users, in seconds. Omit this property to disable periodic full sync.
	// How frequently Keycloak should sync all users, in seconds. Omit this property to disable periodic full sync.
	FullSyncPeriod *float64 `json:"fullSyncPeriod,omitempty" tf:"full_sync_period,omitempty"`

	// Display name of the provider when displayed in the console.
	// Display name of the provider when displayed in the console.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Must be set to the realms' internal_id  when it differs from the realm. This can happen when existing resources are imported into the state.
	// The parent_id of the generated component. will use realm_id if not specified.
	ParentID *string `json:"parentId,omitempty" tf:"parent_id,omitempty"`

	// Priority of this provider when looking up users. Lower values are first. Defaults to 0.
	// Priority of this provider when looking up users. Lower values are first.
	Priority *float64 `json:"priority,omitempty" tf:"priority,omitempty"`

	// The unique ID of the custom provider, specified in the getId implementation for the UserStorageProviderFactory interface.
	// The unique ID of the custom provider, specified in the `getId` implementation for the UserStorageProviderFactory interface
	ProviderID *string `json:"providerId,omitempty" tf:"provider_id,omitempty"`

	// The realm that this provider will provide user federation for.
	// The realm (name) this provider will provide user federation for.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-keycloak/apis/namespaced/realm/v1alpha1.Realm
	RealmID *string `json:"realmId,omitempty" tf:"realm_id,omitempty"`

	// Reference to a Realm in realm to populate realmId.
	// +kubebuilder:validation:Optional
	RealmIDRef *v1.NamespacedReference `json:"realmIdRef,omitempty" tf:"-"`

	// Selector for a Realm in realm to populate realmId.
	// +kubebuilder:validation:Optional
	RealmIDSelector *v1.NamespacedSelector `json:"realmIdSelector,omitempty" tf:"-"`
}

type UserFederationObservation struct {

	// Can be one of DEFAULT, EVICT_DAILY, EVICT_WEEKLY, MAX_LIFESPAN, or NO_CACHE. Defaults to DEFAULT.
	CachePolicy *string `json:"cachePolicy,omitempty" tf:"cache_policy,omitempty"`

	// How frequently Keycloak should sync changed users, in seconds. Omit this property to disable periodic changed users sync.
	// How frequently Keycloak should sync changed users, in seconds. Omit this property to disable periodic changed users sync.
	ChangedSyncPeriod *float64 `json:"changedSyncPeriod,omitempty" tf:"changed_sync_period,omitempty"`

	// The provider configuration handed over to your custom user federation provider. In order to add multivalued settings, use ## to separate the values.
	// +mapType=granular
	Config map[string]*string `json:"config,omitempty" tf:"config,omitempty"`

	// When false, this provider will not be used when performing queries for users. Defaults to true.
	// When false, this provider will not be used when performing queries for users.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// How frequently Keycloak should sync all users, in seconds. Omit this property to disable periodic full sync.
	// How frequently Keycloak should sync all users, in seconds. Omit this property to disable periodic full sync.
	FullSyncPeriod *float64 `json:"fullSyncPeriod,omitempty" tf:"full_sync_period,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Display name of the provider when displayed in the console.
	// Display name of the provider when displayed in the console.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Must be set to the realms' internal_id  when it differs from the realm. This can happen when existing resources are imported into the state.
	// The parent_id of the generated component. will use realm_id if not specified.
	ParentID *string `json:"parentId,omitempty" tf:"parent_id,omitempty"`

	// Priority of this provider when looking up users. Lower values are first. Defaults to 0.
	// Priority of this provider when looking up users. Lower values are first.
	Priority *float64 `json:"priority,omitempty" tf:"priority,omitempty"`

	// The unique ID of the custom provider, specified in the getId implementation for the UserStorageProviderFactory interface.
	// The unique ID of the custom provider, specified in the `getId` implementation for the UserStorageProviderFactory interface
	ProviderID *string `json:"providerId,omitempty" tf:"provider_id,omitempty"`

	// The realm that this provider will provide user federation for.
	// The realm (name) this provider will provide user federation for.
	RealmID *string `json:"realmId,omitempty" tf:"realm_id,omitempty"`
}

type UserFederationParameters struct {

	// Can be one of DEFAULT, EVICT_DAILY, EVICT_WEEKLY, MAX_LIFESPAN, or NO_CACHE. Defaults to DEFAULT.
	// +kubebuilder:validation:Optional
	CachePolicy *string `json:"cachePolicy,omitempty" tf:"cache_policy,omitempty"`

	// How frequently Keycloak should sync changed users, in seconds. Omit this property to disable periodic changed users sync.
	// How frequently Keycloak should sync changed users, in seconds. Omit this property to disable periodic changed users sync.
	// +kubebuilder:validation:Optional
	ChangedSyncPeriod *float64 `json:"changedSyncPeriod,omitempty" tf:"changed_sync_period,omitempty"`

	// The provider configuration handed over to your custom user federation provider. In order to add multivalued settings, use ## to separate the values.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Config map[string]*string `json:"config,omitempty" tf:"config,omitempty"`

	// When false, this provider will not be used when performing queries for users. Defaults to true.
	// When false, this provider will not be used when performing queries for users.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// How frequently Keycloak should sync all users, in seconds. Omit this property to disable periodic full sync.
	// How frequently Keycloak should sync all users, in seconds. Omit this property to disable periodic full sync.
	// +kubebuilder:validation:Optional
	FullSyncPeriod *float64 `json:"fullSyncPeriod,omitempty" tf:"full_sync_period,omitempty"`

	// Display name of the provider when displayed in the console.
	// Display name of the provider when displayed in the console.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Must be set to the realms' internal_id  when it differs from the realm. This can happen when existing resources are imported into the state.
	// The parent_id of the generated component. will use realm_id if not specified.
	// +kubebuilder:validation:Optional
	ParentID *string `json:"parentId,omitempty" tf:"parent_id,omitempty"`

	// Priority of this provider when looking up users. Lower values are first. Defaults to 0.
	// Priority of this provider when looking up users. Lower values are first.
	// +kubebuilder:validation:Optional
	Priority *float64 `json:"priority,omitempty" tf:"priority,omitempty"`

	// The unique ID of the custom provider, specified in the getId implementation for the UserStorageProviderFactory interface.
	// The unique ID of the custom provider, specified in the `getId` implementation for the UserStorageProviderFactory interface
	// +kubebuilder:validation:Optional
	ProviderID *string `json:"providerId,omitempty" tf:"provider_id,omitempty"`

	// The realm that this provider will provide user federation for.
	// The realm (name) this provider will provide user federation for.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-keycloak/apis/namespaced/realm/v1alpha1.Realm
	// +kubebuilder:validation:Optional
	RealmID *string `json:"realmId,omitempty" tf:"realm_id,omitempty"`

	// Reference to a Realm in realm to populate realmId.
	// +kubebuilder:validation:Optional
	RealmIDRef *v1.NamespacedReference `json:"realmIdRef,omitempty" tf:"-"`

	// Selector for a Realm in realm to populate realmId.
	// +kubebuilder:validation:Optional
	RealmIDSelector *v1.NamespacedSelector `json:"realmIdSelector,omitempty" tf:"-"`
}

// UserFederationSpec defines the desired state of UserFederation
type UserFederationSpec struct {
	v2.ManagedResourceSpec `json:",inline"`
	ForProvider            UserFederationParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider UserFederationInitParameters `json:"initProvider,omitempty"`
}

// UserFederationStatus defines the observed state of UserFederation.
type UserFederationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        UserFederationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// UserFederation is the Schema for the UserFederations API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Namespaced,categories={crossplane,managed,keycloak}
type UserFederation struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.providerId) || (has(self.initProvider) && has(self.initProvider.providerId))",message="spec.forProvider.providerId is a required parameter"
	Spec   UserFederationSpec   `json:"spec"`
	Status UserFederationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// UserFederationList contains a list of UserFederations
type UserFederationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []UserFederation `json:"items"`
}

// Repository type metadata.
var (
	UserFederation_Kind             = "UserFederation"
	UserFederation_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: UserFederation_Kind}.String()
	UserFederation_KindAPIVersion   = UserFederation_Kind + "." + CRDGroupVersion.String()
	UserFederation_GroupVersionKind = CRDGroupVersion.WithKind(UserFederation_Kind)
)

func init() {
	SchemeBuilder.Register(&UserFederation{}, &UserFederationList{})
}
