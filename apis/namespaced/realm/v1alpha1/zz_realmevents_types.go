/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
	v2 "github.com/crossplane/crossplane-runtime/v2/apis/common/v2"
)

type RealmEventsInitParameters struct {

	// When true, saved admin events will included detailed information for create/update requests. Defaults to false.
	AdminEventsDetailsEnabled *bool `json:"adminEventsDetailsEnabled,omitempty" tf:"admin_events_details_enabled,omitempty"`

	// When true, admin events are saved to the database, making them available through the admin console. Defaults to false.
	AdminEventsEnabled *bool `json:"adminEventsEnabled,omitempty" tf:"admin_events_enabled,omitempty"`

	// The event types that will be saved to the database. Omitting this field enables all event types. Defaults to [] or all event types.
	// +listType=set
	EnabledEventTypes []*string `json:"enabledEventTypes,omitempty" tf:"enabled_event_types,omitempty"`

	// When true, events from enabled_event_types are saved to the database, making them available through the admin console. Defaults to false.
	EventsEnabled *bool `json:"eventsEnabled,omitempty" tf:"events_enabled,omitempty"`

	// The amount of time in seconds events will be saved in the database. Defaults to 0 or never.
	EventsExpiration *float64 `json:"eventsExpiration,omitempty" tf:"events_expiration,omitempty"`

	// The event listeners that events should be sent to. Defaults to [] or none. Note that new realms enable the jboss-logging listener by default, and this resource will remove that unless it is specified.
	// +listType=set
	EventsListeners []*string `json:"eventsListeners,omitempty" tf:"events_listeners,omitempty"`

	// The name of the realm the event settings apply to.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-keycloak/apis/namespaced/realm/v1alpha1.Realm
	RealmID *string `json:"realmId,omitempty" tf:"realm_id,omitempty"`

	// Reference to a Realm in realm to populate realmId.
	// +kubebuilder:validation:Optional
	RealmIDRef *v1.NamespacedReference `json:"realmIdRef,omitempty" tf:"-"`

	// Selector for a Realm in realm to populate realmId.
	// +kubebuilder:validation:Optional
	RealmIDSelector *v1.NamespacedSelector `json:"realmIdSelector,omitempty" tf:"-"`
}

type RealmEventsObservation struct {

	// When true, saved admin events will included detailed information for create/update requests. Defaults to false.
	AdminEventsDetailsEnabled *bool `json:"adminEventsDetailsEnabled,omitempty" tf:"admin_events_details_enabled,omitempty"`

	// When true, admin events are saved to the database, making them available through the admin console. Defaults to false.
	AdminEventsEnabled *bool `json:"adminEventsEnabled,omitempty" tf:"admin_events_enabled,omitempty"`

	// The event types that will be saved to the database. Omitting this field enables all event types. Defaults to [] or all event types.
	// +listType=set
	EnabledEventTypes []*string `json:"enabledEventTypes,omitempty" tf:"enabled_event_types,omitempty"`

	// When true, events from enabled_event_types are saved to the database, making them available through the admin console. Defaults to false.
	EventsEnabled *bool `json:"eventsEnabled,omitempty" tf:"events_enabled,omitempty"`

	// The amount of time in seconds events will be saved in the database. Defaults to 0 or never.
	EventsExpiration *float64 `json:"eventsExpiration,omitempty" tf:"events_expiration,omitempty"`

	// The event listeners that events should be sent to. Defaults to [] or none. Note that new realms enable the jboss-logging listener by default, and this resource will remove that unless it is specified.
	// +listType=set
	EventsListeners []*string `json:"eventsListeners,omitempty" tf:"events_listeners,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The name of the realm the event settings apply to.
	RealmID *string `json:"realmId,omitempty" tf:"realm_id,omitempty"`
}

type RealmEventsParameters struct {

	// When true, saved admin events will included detailed information for create/update requests. Defaults to false.
	// +kubebuilder:validation:Optional
	AdminEventsDetailsEnabled *bool `json:"adminEventsDetailsEnabled,omitempty" tf:"admin_events_details_enabled,omitempty"`

	// When true, admin events are saved to the database, making them available through the admin console. Defaults to false.
	// +kubebuilder:validation:Optional
	AdminEventsEnabled *bool `json:"adminEventsEnabled,omitempty" tf:"admin_events_enabled,omitempty"`

	// The event types that will be saved to the database. Omitting this field enables all event types. Defaults to [] or all event types.
	// +kubebuilder:validation:Optional
	// +listType=set
	EnabledEventTypes []*string `json:"enabledEventTypes,omitempty" tf:"enabled_event_types,omitempty"`

	// When true, events from enabled_event_types are saved to the database, making them available through the admin console. Defaults to false.
	// +kubebuilder:validation:Optional
	EventsEnabled *bool `json:"eventsEnabled,omitempty" tf:"events_enabled,omitempty"`

	// The amount of time in seconds events will be saved in the database. Defaults to 0 or never.
	// +kubebuilder:validation:Optional
	EventsExpiration *float64 `json:"eventsExpiration,omitempty" tf:"events_expiration,omitempty"`

	// The event listeners that events should be sent to. Defaults to [] or none. Note that new realms enable the jboss-logging listener by default, and this resource will remove that unless it is specified.
	// +kubebuilder:validation:Optional
	// +listType=set
	EventsListeners []*string `json:"eventsListeners,omitempty" tf:"events_listeners,omitempty"`

	// The name of the realm the event settings apply to.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-keycloak/apis/namespaced/realm/v1alpha1.Realm
	// +kubebuilder:validation:Optional
	RealmID *string `json:"realmId,omitempty" tf:"realm_id,omitempty"`

	// Reference to a Realm in realm to populate realmId.
	// +kubebuilder:validation:Optional
	RealmIDRef *v1.NamespacedReference `json:"realmIdRef,omitempty" tf:"-"`

	// Selector for a Realm in realm to populate realmId.
	// +kubebuilder:validation:Optional
	RealmIDSelector *v1.NamespacedSelector `json:"realmIdSelector,omitempty" tf:"-"`
}

// RealmEventsSpec defines the desired state of RealmEvents
type RealmEventsSpec struct {
	v2.ManagedResourceSpec `json:",inline"`
	ForProvider            RealmEventsParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider RealmEventsInitParameters `json:"initProvider,omitempty"`
}

// RealmEventsStatus defines the observed state of RealmEvents.
type RealmEventsStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RealmEventsObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// RealmEvents is the Schema for the RealmEventss API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Namespaced,categories={crossplane,managed,keycloak}
type RealmEvents struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              RealmEventsSpec   `json:"spec"`
	Status            RealmEventsStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RealmEventsList contains a list of RealmEventss
type RealmEventsList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RealmEvents `json:"items"`
}

// Repository type metadata.
var (
	RealmEvents_Kind             = "RealmEvents"
	RealmEvents_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: RealmEvents_Kind}.String()
	RealmEvents_KindAPIVersion   = RealmEvents_Kind + "." + CRDGroupVersion.String()
	RealmEvents_GroupVersionKind = CRDGroupVersion.WithKind(RealmEvents_Kind)
)

func init() {
	SchemeBuilder.Register(&RealmEvents{}, &RealmEventsList{})
}
