/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
	v2 "github.com/crossplane/crossplane-runtime/v2/apis/common/v2"
)

type HardcodedGroupMapperInitParameters struct {

	// The name of the group which should be assigned to the users.
	// Group to grant to user.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-keycloak/apis/namespaced/group/v1alpha1.Group
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractParamPath("name", false)
	Group *string `json:"group,omitempty" tf:"group,omitempty"`

	// Reference to a Group in group to populate group.
	// +kubebuilder:validation:Optional
	GroupRef *v1.NamespacedReference `json:"groupRef,omitempty" tf:"-"`

	// Selector for a Group in group to populate group.
	// +kubebuilder:validation:Optional
	GroupSelector *v1.NamespacedSelector `json:"groupSelector,omitempty" tf:"-"`

	// The ID of the LDAP user federation provider to attach this mapper to.
	// The ldap user federation provider to attach this mapper to.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-keycloak/apis/namespaced/ldap/v1alpha1.UserFederation
	LdapUserFederationID *string `json:"ldapUserFederationId,omitempty" tf:"ldap_user_federation_id,omitempty"`

	// Reference to a UserFederation in ldap to populate ldapUserFederationId.
	// +kubebuilder:validation:Optional
	LdapUserFederationIDRef *v1.NamespacedReference `json:"ldapUserFederationIdRef,omitempty" tf:"-"`

	// Selector for a UserFederation in ldap to populate ldapUserFederationId.
	// +kubebuilder:validation:Optional
	LdapUserFederationIDSelector *v1.NamespacedSelector `json:"ldapUserFederationIdSelector,omitempty" tf:"-"`

	// Display name of this mapper when displayed in the console.
	// Display name of the mapper when displayed in the console.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The realm that this LDAP mapper will exist in.
	// The realm in which the ldap user federation provider exists.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-keycloak/apis/namespaced/realm/v1alpha1.Realm
	RealmID *string `json:"realmId,omitempty" tf:"realm_id,omitempty"`

	// Reference to a Realm in realm to populate realmId.
	// +kubebuilder:validation:Optional
	RealmIDRef *v1.NamespacedReference `json:"realmIdRef,omitempty" tf:"-"`

	// Selector for a Realm in realm to populate realmId.
	// +kubebuilder:validation:Optional
	RealmIDSelector *v1.NamespacedSelector `json:"realmIdSelector,omitempty" tf:"-"`
}

type HardcodedGroupMapperObservation struct {

	// The name of the group which should be assigned to the users.
	// Group to grant to user.
	Group *string `json:"group,omitempty" tf:"group,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The ID of the LDAP user federation provider to attach this mapper to.
	// The ldap user federation provider to attach this mapper to.
	LdapUserFederationID *string `json:"ldapUserFederationId,omitempty" tf:"ldap_user_federation_id,omitempty"`

	// Display name of this mapper when displayed in the console.
	// Display name of the mapper when displayed in the console.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The realm that this LDAP mapper will exist in.
	// The realm in which the ldap user federation provider exists.
	RealmID *string `json:"realmId,omitempty" tf:"realm_id,omitempty"`
}

type HardcodedGroupMapperParameters struct {

	// The name of the group which should be assigned to the users.
	// Group to grant to user.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-keycloak/apis/namespaced/group/v1alpha1.Group
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/v2/pkg/resource.ExtractParamPath("name", false)
	// +kubebuilder:validation:Optional
	Group *string `json:"group,omitempty" tf:"group,omitempty"`

	// Reference to a Group in group to populate group.
	// +kubebuilder:validation:Optional
	GroupRef *v1.NamespacedReference `json:"groupRef,omitempty" tf:"-"`

	// Selector for a Group in group to populate group.
	// +kubebuilder:validation:Optional
	GroupSelector *v1.NamespacedSelector `json:"groupSelector,omitempty" tf:"-"`

	// The ID of the LDAP user federation provider to attach this mapper to.
	// The ldap user federation provider to attach this mapper to.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-keycloak/apis/namespaced/ldap/v1alpha1.UserFederation
	// +kubebuilder:validation:Optional
	LdapUserFederationID *string `json:"ldapUserFederationId,omitempty" tf:"ldap_user_federation_id,omitempty"`

	// Reference to a UserFederation in ldap to populate ldapUserFederationId.
	// +kubebuilder:validation:Optional
	LdapUserFederationIDRef *v1.NamespacedReference `json:"ldapUserFederationIdRef,omitempty" tf:"-"`

	// Selector for a UserFederation in ldap to populate ldapUserFederationId.
	// +kubebuilder:validation:Optional
	LdapUserFederationIDSelector *v1.NamespacedSelector `json:"ldapUserFederationIdSelector,omitempty" tf:"-"`

	// Display name of this mapper when displayed in the console.
	// Display name of the mapper when displayed in the console.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The realm that this LDAP mapper will exist in.
	// The realm in which the ldap user federation provider exists.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-keycloak/apis/namespaced/realm/v1alpha1.Realm
	// +kubebuilder:validation:Optional
	RealmID *string `json:"realmId,omitempty" tf:"realm_id,omitempty"`

	// Reference to a Realm in realm to populate realmId.
	// +kubebuilder:validation:Optional
	RealmIDRef *v1.NamespacedReference `json:"realmIdRef,omitempty" tf:"-"`

	// Selector for a Realm in realm to populate realmId.
	// +kubebuilder:validation:Optional
	RealmIDSelector *v1.NamespacedSelector `json:"realmIdSelector,omitempty" tf:"-"`
}

// HardcodedGroupMapperSpec defines the desired state of HardcodedGroupMapper
type HardcodedGroupMapperSpec struct {
	v2.ManagedResourceSpec `json:",inline"`
	ForProvider            HardcodedGroupMapperParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider HardcodedGroupMapperInitParameters `json:"initProvider,omitempty"`
}

// HardcodedGroupMapperStatus defines the observed state of HardcodedGroupMapper.
type HardcodedGroupMapperStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        HardcodedGroupMapperObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// HardcodedGroupMapper is the Schema for the HardcodedGroupMappers API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Namespaced,categories={crossplane,managed,keycloak}
type HardcodedGroupMapper struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   HardcodedGroupMapperSpec   `json:"spec"`
	Status HardcodedGroupMapperStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// HardcodedGroupMapperList contains a list of HardcodedGroupMappers
type HardcodedGroupMapperList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []HardcodedGroupMapper `json:"items"`
}

// Repository type metadata.
var (
	HardcodedGroupMapper_Kind             = "HardcodedGroupMapper"
	HardcodedGroupMapper_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: HardcodedGroupMapper_Kind}.String()
	HardcodedGroupMapper_KindAPIVersion   = HardcodedGroupMapper_Kind + "." + CRDGroupVersion.String()
	HardcodedGroupMapper_GroupVersionKind = CRDGroupVersion.WithKind(HardcodedGroupMapper_Kind)
)

func init() {
	SchemeBuilder.Register(&HardcodedGroupMapper{}, &HardcodedGroupMapperList{})
}
