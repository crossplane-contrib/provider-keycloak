/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
	v2 "github.com/crossplane/crossplane-runtime/v2/apis/common/v2"
)

type GoogleIdentityProviderInitParameters struct {

	// When true, unauthenticated requests with prompt=none will be forwarded to Google instead of returning an error. Defaults to false.
	// This is just used together with Identity Provider Authenticator or when kc_idp_hint points to this identity provider. In case that client sends a request with prompt=none and user is not yet authenticated, the error will not be directly returned to client, but the request with prompt=none will be forwarded to this identity provider.
	AcceptsPromptNoneForwardFromClient *bool `json:"acceptsPromptNoneForwardFromClient,omitempty" tf:"accepts_prompt_none_forward_from_client,omitempty"`

	// When true, new users will be able to read stored tokens. This will automatically assign the broker.read-token role. Defaults to false.
	// Enable/disable if new users can read any stored tokens. This assigns the broker.read-token role.
	AddReadTokenRoleOnCreate *bool `json:"addReadTokenRoleOnCreate,omitempty" tf:"add_read_token_role_on_create,omitempty"`

	// The alias for the Google identity provider.
	// The alias uniquely identifies an identity provider and it is also used to build the redirect uri. In case of google this is computed and always google
	Alias *string `json:"alias,omitempty" tf:"alias,omitempty"`

	// Enable/disable authenticate users by default.
	AuthenticateByDefault *bool `json:"authenticateByDefault,omitempty" tf:"authenticate_by_default,omitempty"`

	// The client or client identifier registered within the identity provider.
	// Client ID.
	ClientIDSecretRef v1.LocalSecretKeySelector `json:"clientIdSecretRef" tf:"-"`

	// The client or client secret registered within the identity provider. This field is able to obtain its value from vault, use $${vault.ID} format.
	// Client Secret.
	ClientSecretSecretRef v1.LocalSecretKeySelector `json:"clientSecretSecretRef" tf:"-"`

	// The scopes to be sent when asking for authorization. It can be a space-separated list of scopes. Defaults to openid profile email.
	// The scopes to be sent when asking for authorization. See the documentation for possible values, separator and default value'. Default: 'openid profile email'
	DefaultScopes *string `json:"defaultScopes,omitempty" tf:"default_scopes,omitempty"`

	// When true, disables the usage of the user info service to obtain additional user information. Defaults to false.
	// Disable usage of User Info service to obtain additional user information?  Default is to use this OIDC service.
	DisableUserInfo *bool `json:"disableUserInfo,omitempty" tf:"disable_user_info,omitempty"`

	// Display name for the Google identity provider in the GUI.
	// The human-friendly name of the identity provider, used in the log in form.
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// When true, users will be able to log in to this realm using this identity provider. Defaults to true.
	// Enable/disable this identity provider.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// A map of key/value pairs to add extra configuration to this identity provider. Use this attribute at your own risk, as custom attributes may conflict with top-level configuration attributes in future provider updates.
	// +mapType=granular
	ExtraConfig map[string]*string `json:"extraConfig,omitempty" tf:"extra_config,omitempty"`

	// The authentication flow to use when users log in for the first time through this identity provider. Defaults to first broker login.
	// Alias of authentication flow, which is triggered after first login with this identity provider. Term 'First Login' means that there is not yet existing Keycloak account linked with the authenticated identity provider account.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-keycloak/apis/namespaced/authenticationflow/v1alpha1.Flow
	// +crossplane:generate:reference:extractor=github.com/crossplane-contrib/provider-keycloak/config/common.AuthenticationFlowAliasExtractor()
	FirstBrokerLoginFlowAlias *string `json:"firstBrokerLoginFlowAlias,omitempty" tf:"first_broker_login_flow_alias,omitempty"`

	// Reference to a Flow in authenticationflow to populate firstBrokerLoginFlowAlias.
	// +kubebuilder:validation:Optional
	FirstBrokerLoginFlowAliasRef *v1.NamespacedReference `json:"firstBrokerLoginFlowAliasRef,omitempty" tf:"-"`

	// Selector for a Flow in authenticationflow to populate firstBrokerLoginFlowAlias.
	// +kubebuilder:validation:Optional
	FirstBrokerLoginFlowAliasSelector *v1.NamespacedSelector `json:"firstBrokerLoginFlowAliasSelector,omitempty" tf:"-"`

	// A number defining the order of this identity provider in the GUI.
	// GUI Order
	GuiOrder *string `json:"guiOrder,omitempty" tf:"gui_order,omitempty"`

	// When true, this identity provider will be hidden on the login page. Defaults to false.
	// Hide On Login Page.
	HideOnLoginPage *bool `json:"hideOnLoginPage,omitempty" tf:"hide_on_login_page,omitempty"`

	// Sets the "hd" query parameter when logging in with Google. Google will only list accounts for this domain. Keycloak will validate that the returned identity token has a claim for this domain. When * is entered, an account from any domain can be used.
	// Set 'hd' query parameter when logging in with Google. Google will list accounts only for this domain. Keycloak validates that the returned identity token has a claim for this domain. When '*' is entered, any hosted account can be used.
	HostedDomain *string `json:"hostedDomain,omitempty" tf:"hosted_domain,omitempty"`

	// When true, users cannot sign-in using this provider, but their existing accounts will be linked when possible. Defaults to false.
	// If true, users cannot log in through this provider.  They can only link to this provider.  This is useful if you don't want to allow login from the provider, but want to integrate with a provider
	LinkOnly *bool `json:"linkOnly,omitempty" tf:"link_only,omitempty"`

	OrgDomain *string `json:"orgDomain,omitempty" tf:"org_domain,omitempty"`

	OrgRedirectModeEmailMatches *bool `json:"orgRedirectModeEmailMatches,omitempty" tf:"org_redirect_mode_email_matches,omitempty"`

	// ID of organization with which this identity is linked.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-keycloak/apis/namespaced/organization/v1alpha1.Organization
	OrganizationID *string `json:"organizationId,omitempty" tf:"organization_id,omitempty"`

	// Reference to a Organization in organization to populate organizationId.
	// +kubebuilder:validation:Optional
	OrganizationIDRef *v1.NamespacedReference `json:"organizationIdRef,omitempty" tf:"-"`

	// Selector for a Organization in organization to populate organizationId.
	// +kubebuilder:validation:Optional
	OrganizationIDSelector *v1.NamespacedSelector `json:"organizationIdSelector,omitempty" tf:"-"`

	// The authentication flow to use after users have successfully logged in, which can be used to perform additional user verification (such as OTP checking). Defaults to an empty string, which means no post login flow will be used.
	// Alias of authentication flow, which is triggered after each login with this identity provider. Useful if you want additional verification of each user authenticated with this identity provider (for example OTP). Leave this empty if you don't want any additional authenticators to be triggered after login with this identity provider. Also note, that authenticator implementations must assume that user is already set in ClientSession as identity provider already set it.
	PostBrokerLoginFlowAlias *string `json:"postBrokerLoginFlowAlias,omitempty" tf:"post_broker_login_flow_alias,omitempty"`

	// The ID of the identity provider to use. Defaults to google, which should be used unless you have extended Keycloak and provided your own implementation.
	// provider id, is always google, unless you have a extended custom implementation
	ProviderID *string `json:"providerId,omitempty" tf:"provider_id,omitempty"`

	// The name of the realm. This is unique across Keycloak.
	// Realm Name
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-keycloak/apis/namespaced/realm/v1alpha1.Realm
	Realm *string `json:"realm,omitempty" tf:"realm,omitempty"`

	// Reference to a Realm in realm to populate realm.
	// +kubebuilder:validation:Optional
	RealmRef *v1.NamespacedReference `json:"realmRef,omitempty" tf:"-"`

	// Selector for a Realm in realm to populate realm.
	// +kubebuilder:validation:Optional
	RealmSelector *v1.NamespacedSelector `json:"realmSelector,omitempty" tf:"-"`

	// Sets the "access_type" query parameter to "offline" when redirecting to google authorization endpoint,to get a refresh token back. This is useful for using Token Exchange to retrieve a Google token to access Google APIs when the user is offline.
	// Set 'access_type' query parameter to 'offline' when redirecting to google authorization endpoint, to get a refresh token back. Useful if planning to use Token Exchange to retrieve Google token to access Google APIs when the user is not at the browser.
	RequestRefreshToken *bool `json:"requestRefreshToken,omitempty" tf:"request_refresh_token,omitempty"`

	// When true, tokens will be stored after authenticating users. Defaults to true.
	// Enable/disable if tokens must be stored after authenticating users.
	StoreToken *bool `json:"storeToken,omitempty" tf:"store_token,omitempty"`

	// The default sync mode to use for all mappers attached to this identity provider. Can be once of IMPORT, FORCE, or LEGACY.
	// Sync Mode
	SyncMode *string `json:"syncMode,omitempty" tf:"sync_mode,omitempty"`

	// When true, email addresses for users in this provider will automatically be verified regardless of the realm's email verification policy. Defaults to false.
	// If enabled then email provided by this provider is not verified even if verification is enabled for the realm.
	TrustEmail *bool `json:"trustEmail,omitempty" tf:"trust_email,omitempty"`

	// Sets the "userIp" query parameter when querying Google's User Info service. This will use the user's IP address. This is useful if Google is throttling Keycloak's access to the User Info service.
	// Set 'userIp' query parameter when invoking on Google's User Info service.  This will use the user's ip address.  Useful if Google is throttling access to the User Info service.
	UseUserIPParam *bool `json:"useUserIpParam,omitempty" tf:"use_user_ip_param,omitempty"`
}

type GoogleIdentityProviderObservation struct {

	// When true, unauthenticated requests with prompt=none will be forwarded to Google instead of returning an error. Defaults to false.
	// This is just used together with Identity Provider Authenticator or when kc_idp_hint points to this identity provider. In case that client sends a request with prompt=none and user is not yet authenticated, the error will not be directly returned to client, but the request with prompt=none will be forwarded to this identity provider.
	AcceptsPromptNoneForwardFromClient *bool `json:"acceptsPromptNoneForwardFromClient,omitempty" tf:"accepts_prompt_none_forward_from_client,omitempty"`

	// When true, new users will be able to read stored tokens. This will automatically assign the broker.read-token role. Defaults to false.
	// Enable/disable if new users can read any stored tokens. This assigns the broker.read-token role.
	AddReadTokenRoleOnCreate *bool `json:"addReadTokenRoleOnCreate,omitempty" tf:"add_read_token_role_on_create,omitempty"`

	// The alias for the Google identity provider.
	// The alias uniquely identifies an identity provider and it is also used to build the redirect uri. In case of google this is computed and always google
	Alias *string `json:"alias,omitempty" tf:"alias,omitempty"`

	// Enable/disable authenticate users by default.
	AuthenticateByDefault *bool `json:"authenticateByDefault,omitempty" tf:"authenticate_by_default,omitempty"`

	// The scopes to be sent when asking for authorization. It can be a space-separated list of scopes. Defaults to openid profile email.
	// The scopes to be sent when asking for authorization. See the documentation for possible values, separator and default value'. Default: 'openid profile email'
	DefaultScopes *string `json:"defaultScopes,omitempty" tf:"default_scopes,omitempty"`

	// When true, disables the usage of the user info service to obtain additional user information. Defaults to false.
	// Disable usage of User Info service to obtain additional user information?  Default is to use this OIDC service.
	DisableUserInfo *bool `json:"disableUserInfo,omitempty" tf:"disable_user_info,omitempty"`

	// Display name for the Google identity provider in the GUI.
	// The human-friendly name of the identity provider, used in the log in form.
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// When true, users will be able to log in to this realm using this identity provider. Defaults to true.
	// Enable/disable this identity provider.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// A map of key/value pairs to add extra configuration to this identity provider. Use this attribute at your own risk, as custom attributes may conflict with top-level configuration attributes in future provider updates.
	// +mapType=granular
	ExtraConfig map[string]*string `json:"extraConfig,omitempty" tf:"extra_config,omitempty"`

	// The authentication flow to use when users log in for the first time through this identity provider. Defaults to first broker login.
	// Alias of authentication flow, which is triggered after first login with this identity provider. Term 'First Login' means that there is not yet existing Keycloak account linked with the authenticated identity provider account.
	FirstBrokerLoginFlowAlias *string `json:"firstBrokerLoginFlowAlias,omitempty" tf:"first_broker_login_flow_alias,omitempty"`

	// A number defining the order of this identity provider in the GUI.
	// GUI Order
	GuiOrder *string `json:"guiOrder,omitempty" tf:"gui_order,omitempty"`

	// When true, this identity provider will be hidden on the login page. Defaults to false.
	// Hide On Login Page.
	HideOnLoginPage *bool `json:"hideOnLoginPage,omitempty" tf:"hide_on_login_page,omitempty"`

	// Sets the "hd" query parameter when logging in with Google. Google will only list accounts for this domain. Keycloak will validate that the returned identity token has a claim for this domain. When * is entered, an account from any domain can be used.
	// Set 'hd' query parameter when logging in with Google. Google will list accounts only for this domain. Keycloak validates that the returned identity token has a claim for this domain. When '*' is entered, any hosted account can be used.
	HostedDomain *string `json:"hostedDomain,omitempty" tf:"hosted_domain,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Computed) The unique ID that Keycloak assigns to the identity provider upon creation.
	// Internal Identity Provider Id
	InternalID *string `json:"internalId,omitempty" tf:"internal_id,omitempty"`

	// When true, users cannot sign-in using this provider, but their existing accounts will be linked when possible. Defaults to false.
	// If true, users cannot log in through this provider.  They can only link to this provider.  This is useful if you don't want to allow login from the provider, but want to integrate with a provider
	LinkOnly *bool `json:"linkOnly,omitempty" tf:"link_only,omitempty"`

	OrgDomain *string `json:"orgDomain,omitempty" tf:"org_domain,omitempty"`

	OrgRedirectModeEmailMatches *bool `json:"orgRedirectModeEmailMatches,omitempty" tf:"org_redirect_mode_email_matches,omitempty"`

	// ID of organization with which this identity is linked.
	OrganizationID *string `json:"organizationId,omitempty" tf:"organization_id,omitempty"`

	// The authentication flow to use after users have successfully logged in, which can be used to perform additional user verification (such as OTP checking). Defaults to an empty string, which means no post login flow will be used.
	// Alias of authentication flow, which is triggered after each login with this identity provider. Useful if you want additional verification of each user authenticated with this identity provider (for example OTP). Leave this empty if you don't want any additional authenticators to be triggered after login with this identity provider. Also note, that authenticator implementations must assume that user is already set in ClientSession as identity provider already set it.
	PostBrokerLoginFlowAlias *string `json:"postBrokerLoginFlowAlias,omitempty" tf:"post_broker_login_flow_alias,omitempty"`

	// The ID of the identity provider to use. Defaults to google, which should be used unless you have extended Keycloak and provided your own implementation.
	// provider id, is always google, unless you have a extended custom implementation
	ProviderID *string `json:"providerId,omitempty" tf:"provider_id,omitempty"`

	// The name of the realm. This is unique across Keycloak.
	// Realm Name
	Realm *string `json:"realm,omitempty" tf:"realm,omitempty"`

	// Sets the "access_type" query parameter to "offline" when redirecting to google authorization endpoint,to get a refresh token back. This is useful for using Token Exchange to retrieve a Google token to access Google APIs when the user is offline.
	// Set 'access_type' query parameter to 'offline' when redirecting to google authorization endpoint, to get a refresh token back. Useful if planning to use Token Exchange to retrieve Google token to access Google APIs when the user is not at the browser.
	RequestRefreshToken *bool `json:"requestRefreshToken,omitempty" tf:"request_refresh_token,omitempty"`

	// When true, tokens will be stored after authenticating users. Defaults to true.
	// Enable/disable if tokens must be stored after authenticating users.
	StoreToken *bool `json:"storeToken,omitempty" tf:"store_token,omitempty"`

	// The default sync mode to use for all mappers attached to this identity provider. Can be once of IMPORT, FORCE, or LEGACY.
	// Sync Mode
	SyncMode *string `json:"syncMode,omitempty" tf:"sync_mode,omitempty"`

	// When true, email addresses for users in this provider will automatically be verified regardless of the realm's email verification policy. Defaults to false.
	// If enabled then email provided by this provider is not verified even if verification is enabled for the realm.
	TrustEmail *bool `json:"trustEmail,omitempty" tf:"trust_email,omitempty"`

	// Sets the "userIp" query parameter when querying Google's User Info service. This will use the user's IP address. This is useful if Google is throttling Keycloak's access to the User Info service.
	// Set 'userIp' query parameter when invoking on Google's User Info service.  This will use the user's ip address.  Useful if Google is throttling access to the User Info service.
	UseUserIPParam *bool `json:"useUserIpParam,omitempty" tf:"use_user_ip_param,omitempty"`
}

type GoogleIdentityProviderParameters struct {

	// When true, unauthenticated requests with prompt=none will be forwarded to Google instead of returning an error. Defaults to false.
	// This is just used together with Identity Provider Authenticator or when kc_idp_hint points to this identity provider. In case that client sends a request with prompt=none and user is not yet authenticated, the error will not be directly returned to client, but the request with prompt=none will be forwarded to this identity provider.
	// +kubebuilder:validation:Optional
	AcceptsPromptNoneForwardFromClient *bool `json:"acceptsPromptNoneForwardFromClient,omitempty" tf:"accepts_prompt_none_forward_from_client,omitempty"`

	// When true, new users will be able to read stored tokens. This will automatically assign the broker.read-token role. Defaults to false.
	// Enable/disable if new users can read any stored tokens. This assigns the broker.read-token role.
	// +kubebuilder:validation:Optional
	AddReadTokenRoleOnCreate *bool `json:"addReadTokenRoleOnCreate,omitempty" tf:"add_read_token_role_on_create,omitempty"`

	// The alias for the Google identity provider.
	// The alias uniquely identifies an identity provider and it is also used to build the redirect uri. In case of google this is computed and always google
	// +kubebuilder:validation:Optional
	Alias *string `json:"alias,omitempty" tf:"alias,omitempty"`

	// Enable/disable authenticate users by default.
	// +kubebuilder:validation:Optional
	AuthenticateByDefault *bool `json:"authenticateByDefault,omitempty" tf:"authenticate_by_default,omitempty"`

	// The client or client identifier registered within the identity provider.
	// Client ID.
	// +kubebuilder:validation:Optional
	ClientIDSecretRef v1.LocalSecretKeySelector `json:"clientIdSecretRef" tf:"-"`

	// The client or client secret registered within the identity provider. This field is able to obtain its value from vault, use $${vault.ID} format.
	// Client Secret.
	// +kubebuilder:validation:Optional
	ClientSecretSecretRef v1.LocalSecretKeySelector `json:"clientSecretSecretRef" tf:"-"`

	// The scopes to be sent when asking for authorization. It can be a space-separated list of scopes. Defaults to openid profile email.
	// The scopes to be sent when asking for authorization. See the documentation for possible values, separator and default value'. Default: 'openid profile email'
	// +kubebuilder:validation:Optional
	DefaultScopes *string `json:"defaultScopes,omitempty" tf:"default_scopes,omitempty"`

	// When true, disables the usage of the user info service to obtain additional user information. Defaults to false.
	// Disable usage of User Info service to obtain additional user information?  Default is to use this OIDC service.
	// +kubebuilder:validation:Optional
	DisableUserInfo *bool `json:"disableUserInfo,omitempty" tf:"disable_user_info,omitempty"`

	// Display name for the Google identity provider in the GUI.
	// The human-friendly name of the identity provider, used in the log in form.
	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// When true, users will be able to log in to this realm using this identity provider. Defaults to true.
	// Enable/disable this identity provider.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// A map of key/value pairs to add extra configuration to this identity provider. Use this attribute at your own risk, as custom attributes may conflict with top-level configuration attributes in future provider updates.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	ExtraConfig map[string]*string `json:"extraConfig,omitempty" tf:"extra_config,omitempty"`

	// The authentication flow to use when users log in for the first time through this identity provider. Defaults to first broker login.
	// Alias of authentication flow, which is triggered after first login with this identity provider. Term 'First Login' means that there is not yet existing Keycloak account linked with the authenticated identity provider account.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-keycloak/apis/namespaced/authenticationflow/v1alpha1.Flow
	// +crossplane:generate:reference:extractor=github.com/crossplane-contrib/provider-keycloak/config/common.AuthenticationFlowAliasExtractor()
	// +kubebuilder:validation:Optional
	FirstBrokerLoginFlowAlias *string `json:"firstBrokerLoginFlowAlias,omitempty" tf:"first_broker_login_flow_alias,omitempty"`

	// Reference to a Flow in authenticationflow to populate firstBrokerLoginFlowAlias.
	// +kubebuilder:validation:Optional
	FirstBrokerLoginFlowAliasRef *v1.NamespacedReference `json:"firstBrokerLoginFlowAliasRef,omitempty" tf:"-"`

	// Selector for a Flow in authenticationflow to populate firstBrokerLoginFlowAlias.
	// +kubebuilder:validation:Optional
	FirstBrokerLoginFlowAliasSelector *v1.NamespacedSelector `json:"firstBrokerLoginFlowAliasSelector,omitempty" tf:"-"`

	// A number defining the order of this identity provider in the GUI.
	// GUI Order
	// +kubebuilder:validation:Optional
	GuiOrder *string `json:"guiOrder,omitempty" tf:"gui_order,omitempty"`

	// When true, this identity provider will be hidden on the login page. Defaults to false.
	// Hide On Login Page.
	// +kubebuilder:validation:Optional
	HideOnLoginPage *bool `json:"hideOnLoginPage,omitempty" tf:"hide_on_login_page,omitempty"`

	// Sets the "hd" query parameter when logging in with Google. Google will only list accounts for this domain. Keycloak will validate that the returned identity token has a claim for this domain. When * is entered, an account from any domain can be used.
	// Set 'hd' query parameter when logging in with Google. Google will list accounts only for this domain. Keycloak validates that the returned identity token has a claim for this domain. When '*' is entered, any hosted account can be used.
	// +kubebuilder:validation:Optional
	HostedDomain *string `json:"hostedDomain,omitempty" tf:"hosted_domain,omitempty"`

	// When true, users cannot sign-in using this provider, but their existing accounts will be linked when possible. Defaults to false.
	// If true, users cannot log in through this provider.  They can only link to this provider.  This is useful if you don't want to allow login from the provider, but want to integrate with a provider
	// +kubebuilder:validation:Optional
	LinkOnly *bool `json:"linkOnly,omitempty" tf:"link_only,omitempty"`

	// +kubebuilder:validation:Optional
	OrgDomain *string `json:"orgDomain,omitempty" tf:"org_domain,omitempty"`

	// +kubebuilder:validation:Optional
	OrgRedirectModeEmailMatches *bool `json:"orgRedirectModeEmailMatches,omitempty" tf:"org_redirect_mode_email_matches,omitempty"`

	// ID of organization with which this identity is linked.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-keycloak/apis/namespaced/organization/v1alpha1.Organization
	// +kubebuilder:validation:Optional
	OrganizationID *string `json:"organizationId,omitempty" tf:"organization_id,omitempty"`

	// Reference to a Organization in organization to populate organizationId.
	// +kubebuilder:validation:Optional
	OrganizationIDRef *v1.NamespacedReference `json:"organizationIdRef,omitempty" tf:"-"`

	// Selector for a Organization in organization to populate organizationId.
	// +kubebuilder:validation:Optional
	OrganizationIDSelector *v1.NamespacedSelector `json:"organizationIdSelector,omitempty" tf:"-"`

	// The authentication flow to use after users have successfully logged in, which can be used to perform additional user verification (such as OTP checking). Defaults to an empty string, which means no post login flow will be used.
	// Alias of authentication flow, which is triggered after each login with this identity provider. Useful if you want additional verification of each user authenticated with this identity provider (for example OTP). Leave this empty if you don't want any additional authenticators to be triggered after login with this identity provider. Also note, that authenticator implementations must assume that user is already set in ClientSession as identity provider already set it.
	// +kubebuilder:validation:Optional
	PostBrokerLoginFlowAlias *string `json:"postBrokerLoginFlowAlias,omitempty" tf:"post_broker_login_flow_alias,omitempty"`

	// The ID of the identity provider to use. Defaults to google, which should be used unless you have extended Keycloak and provided your own implementation.
	// provider id, is always google, unless you have a extended custom implementation
	// +kubebuilder:validation:Optional
	ProviderID *string `json:"providerId,omitempty" tf:"provider_id,omitempty"`

	// The name of the realm. This is unique across Keycloak.
	// Realm Name
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-keycloak/apis/namespaced/realm/v1alpha1.Realm
	// +kubebuilder:validation:Optional
	Realm *string `json:"realm,omitempty" tf:"realm,omitempty"`

	// Reference to a Realm in realm to populate realm.
	// +kubebuilder:validation:Optional
	RealmRef *v1.NamespacedReference `json:"realmRef,omitempty" tf:"-"`

	// Selector for a Realm in realm to populate realm.
	// +kubebuilder:validation:Optional
	RealmSelector *v1.NamespacedSelector `json:"realmSelector,omitempty" tf:"-"`

	// Sets the "access_type" query parameter to "offline" when redirecting to google authorization endpoint,to get a refresh token back. This is useful for using Token Exchange to retrieve a Google token to access Google APIs when the user is offline.
	// Set 'access_type' query parameter to 'offline' when redirecting to google authorization endpoint, to get a refresh token back. Useful if planning to use Token Exchange to retrieve Google token to access Google APIs when the user is not at the browser.
	// +kubebuilder:validation:Optional
	RequestRefreshToken *bool `json:"requestRefreshToken,omitempty" tf:"request_refresh_token,omitempty"`

	// When true, tokens will be stored after authenticating users. Defaults to true.
	// Enable/disable if tokens must be stored after authenticating users.
	// +kubebuilder:validation:Optional
	StoreToken *bool `json:"storeToken,omitempty" tf:"store_token,omitempty"`

	// The default sync mode to use for all mappers attached to this identity provider. Can be once of IMPORT, FORCE, or LEGACY.
	// Sync Mode
	// +kubebuilder:validation:Optional
	SyncMode *string `json:"syncMode,omitempty" tf:"sync_mode,omitempty"`

	// When true, email addresses for users in this provider will automatically be verified regardless of the realm's email verification policy. Defaults to false.
	// If enabled then email provided by this provider is not verified even if verification is enabled for the realm.
	// +kubebuilder:validation:Optional
	TrustEmail *bool `json:"trustEmail,omitempty" tf:"trust_email,omitempty"`

	// Sets the "userIp" query parameter when querying Google's User Info service. This will use the user's IP address. This is useful if Google is throttling Keycloak's access to the User Info service.
	// Set 'userIp' query parameter when invoking on Google's User Info service.  This will use the user's ip address.  Useful if Google is throttling access to the User Info service.
	// +kubebuilder:validation:Optional
	UseUserIPParam *bool `json:"useUserIpParam,omitempty" tf:"use_user_ip_param,omitempty"`
}

// GoogleIdentityProviderSpec defines the desired state of GoogleIdentityProvider
type GoogleIdentityProviderSpec struct {
	v2.ManagedResourceSpec `json:",inline"`
	ForProvider            GoogleIdentityProviderParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider GoogleIdentityProviderInitParameters `json:"initProvider,omitempty"`
}

// GoogleIdentityProviderStatus defines the observed state of GoogleIdentityProvider.
type GoogleIdentityProviderStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        GoogleIdentityProviderObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// GoogleIdentityProvider is the Schema for the GoogleIdentityProviders API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Namespaced,categories={crossplane,managed,keycloak}
type GoogleIdentityProvider struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.clientIdSecretRef)",message="spec.forProvider.clientIdSecretRef is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.clientSecretSecretRef)",message="spec.forProvider.clientSecretSecretRef is a required parameter"
	Spec   GoogleIdentityProviderSpec   `json:"spec"`
	Status GoogleIdentityProviderStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// GoogleIdentityProviderList contains a list of GoogleIdentityProviders
type GoogleIdentityProviderList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []GoogleIdentityProvider `json:"items"`
}

// Repository type metadata.
var (
	GoogleIdentityProvider_Kind             = "GoogleIdentityProvider"
	GoogleIdentityProvider_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: GoogleIdentityProvider_Kind}.String()
	GoogleIdentityProvider_KindAPIVersion   = GoogleIdentityProvider_Kind + "." + CRDGroupVersion.String()
	GoogleIdentityProvider_GroupVersionKind = CRDGroupVersion.WithKind(GoogleIdentityProvider_Kind)
)

func init() {
	SchemeBuilder.Register(&GoogleIdentityProvider{}, &GoogleIdentityProviderList{})
}
