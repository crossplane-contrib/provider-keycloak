/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type GroupMapperInitParameters struct {

	// When true, groups that no longer exist within LDAP will be dropped in Keycloak during sync. Defaults to false.
	DropNonExistingGroupsDuringSync *bool `json:"dropNonExistingGroupsDuringSync,omitempty" tf:"drop_non_existing_groups_during_sync,omitempty"`

	// The name of the LDAP attribute that is used in group objects for the name and RDN of the group. Typically cn.
	GroupNameLdapAttribute *string `json:"groupNameLdapAttribute,omitempty" tf:"group_name_ldap_attribute,omitempty"`

	// List of strings representing the object classes for the group. Must contain at least one.
	GroupObjectClasses []*string `json:"groupObjectClasses,omitempty" tf:"group_object_classes,omitempty"`

	// When specified, adds a custom filter to be used when querying for groups. Must start with ( and end with ).
	GroupsLdapFilter *string `json:"groupsLdapFilter,omitempty" tf:"groups_ldap_filter,omitempty"`

	// Keycloak group path the LDAP groups are added to. For example if value /Applications/App1 is used, then LDAP groups will be available in Keycloak under group App1, which is the child of top level group Applications. The configured group path must already exist in Keycloak when creating this mapper.
	GroupsPath *string `json:"groupsPath,omitempty" tf:"groups_path,omitempty"`

	// When true, missing groups in the hierarchy will be ignored.
	IgnoreMissingGroups *bool `json:"ignoreMissingGroups,omitempty" tf:"ignore_missing_groups,omitempty"`

	// The LDAP DN where groups can be found.
	LdapGroupsDn *string `json:"ldapGroupsDn,omitempty" tf:"ldap_groups_dn,omitempty"`

	// The ID of the LDAP user federation provider to attach this mapper to.
	// The ldap user federation provider to attach this mapper to.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-keycloak/apis/ldap/v1alpha1.UserFederation
	LdapUserFederationID *string `json:"ldapUserFederationId,omitempty" tf:"ldap_user_federation_id,omitempty"`

	// Reference to a UserFederation in ldap to populate ldapUserFederationId.
	// +kubebuilder:validation:Optional
	LdapUserFederationIDRef *v1.Reference `json:"ldapUserFederationIdRef,omitempty" tf:"-"`

	// Selector for a UserFederation in ldap to populate ldapUserFederationId.
	// +kubebuilder:validation:Optional
	LdapUserFederationIDSelector *v1.Selector `json:"ldapUserFederationIdSelector,omitempty" tf:"-"`

	// Array of strings representing attributes on the LDAP group which will be mapped to attributes on the Keycloak group.
	MappedGroupAttributes []*string `json:"mappedGroupAttributes,omitempty" tf:"mapped_group_attributes,omitempty"`

	// Specifies the name of the LDAP attribute on the LDAP user that contains the groups the user is a member of. Defaults to memberOf.
	MemberofLdapAttribute *string `json:"memberofLdapAttribute,omitempty" tf:"memberof_ldap_attribute,omitempty"`

	// Can be one of DN or UID. Defaults to DN.
	MembershipAttributeType *string `json:"membershipAttributeType,omitempty" tf:"membership_attribute_type,omitempty"`

	// The name of the LDAP attribute that is used for membership mappings.
	MembershipLdapAttribute *string `json:"membershipLdapAttribute,omitempty" tf:"membership_ldap_attribute,omitempty"`

	// The name of the LDAP attribute on a user that is used for membership mappings.
	MembershipUserLdapAttribute *string `json:"membershipUserLdapAttribute,omitempty" tf:"membership_user_ldap_attribute,omitempty"`

	// Can be one of READ_ONLY, LDAP_ONLY or IMPORT. Defaults to READ_ONLY.
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`

	// Display name of this mapper when displayed in the console.
	// Display name of the mapper when displayed in the console.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// When true, group inheritance will be propagated from LDAP to Keycloak. When false, all LDAP groups will be propagated as top level groups within Keycloak.
	PreserveGroupInheritance *bool `json:"preserveGroupInheritance,omitempty" tf:"preserve_group_inheritance,omitempty"`

	// The realm that this LDAP mapper will exist in.
	// The realm in which the ldap user federation provider exists.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-keycloak/apis/realm/v1alpha1.Realm
	RealmID *string `json:"realmId,omitempty" tf:"realm_id,omitempty"`

	// Reference to a Realm in realm to populate realmId.
	// +kubebuilder:validation:Optional
	RealmIDRef *v1.Reference `json:"realmIdRef,omitempty" tf:"-"`

	// Selector for a Realm in realm to populate realmId.
	// +kubebuilder:validation:Optional
	RealmIDSelector *v1.Selector `json:"realmIdSelector,omitempty" tf:"-"`

	// Can be one of LOAD_GROUPS_BY_MEMBER_ATTRIBUTE, GET_GROUPS_FROM_USER_MEMBEROF_ATTRIBUTE, or LOAD_GROUPS_BY_MEMBER_ATTRIBUTE_RECURSIVELY. Defaults to LOAD_GROUPS_BY_MEMBER_ATTRIBUTE.
	UserRolesRetrieveStrategy *string `json:"userRolesRetrieveStrategy,omitempty" tf:"user_roles_retrieve_strategy,omitempty"`
}

type GroupMapperObservation struct {

	// When true, groups that no longer exist within LDAP will be dropped in Keycloak during sync. Defaults to false.
	DropNonExistingGroupsDuringSync *bool `json:"dropNonExistingGroupsDuringSync,omitempty" tf:"drop_non_existing_groups_during_sync,omitempty"`

	// The name of the LDAP attribute that is used in group objects for the name and RDN of the group. Typically cn.
	GroupNameLdapAttribute *string `json:"groupNameLdapAttribute,omitempty" tf:"group_name_ldap_attribute,omitempty"`

	// List of strings representing the object classes for the group. Must contain at least one.
	GroupObjectClasses []*string `json:"groupObjectClasses,omitempty" tf:"group_object_classes,omitempty"`

	// When specified, adds a custom filter to be used when querying for groups. Must start with ( and end with ).
	GroupsLdapFilter *string `json:"groupsLdapFilter,omitempty" tf:"groups_ldap_filter,omitempty"`

	// Keycloak group path the LDAP groups are added to. For example if value /Applications/App1 is used, then LDAP groups will be available in Keycloak under group App1, which is the child of top level group Applications. The configured group path must already exist in Keycloak when creating this mapper.
	GroupsPath *string `json:"groupsPath,omitempty" tf:"groups_path,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// When true, missing groups in the hierarchy will be ignored.
	IgnoreMissingGroups *bool `json:"ignoreMissingGroups,omitempty" tf:"ignore_missing_groups,omitempty"`

	// The LDAP DN where groups can be found.
	LdapGroupsDn *string `json:"ldapGroupsDn,omitempty" tf:"ldap_groups_dn,omitempty"`

	// The ID of the LDAP user federation provider to attach this mapper to.
	// The ldap user federation provider to attach this mapper to.
	LdapUserFederationID *string `json:"ldapUserFederationId,omitempty" tf:"ldap_user_federation_id,omitempty"`

	// Array of strings representing attributes on the LDAP group which will be mapped to attributes on the Keycloak group.
	MappedGroupAttributes []*string `json:"mappedGroupAttributes,omitempty" tf:"mapped_group_attributes,omitempty"`

	// Specifies the name of the LDAP attribute on the LDAP user that contains the groups the user is a member of. Defaults to memberOf.
	MemberofLdapAttribute *string `json:"memberofLdapAttribute,omitempty" tf:"memberof_ldap_attribute,omitempty"`

	// Can be one of DN or UID. Defaults to DN.
	MembershipAttributeType *string `json:"membershipAttributeType,omitempty" tf:"membership_attribute_type,omitempty"`

	// The name of the LDAP attribute that is used for membership mappings.
	MembershipLdapAttribute *string `json:"membershipLdapAttribute,omitempty" tf:"membership_ldap_attribute,omitempty"`

	// The name of the LDAP attribute on a user that is used for membership mappings.
	MembershipUserLdapAttribute *string `json:"membershipUserLdapAttribute,omitempty" tf:"membership_user_ldap_attribute,omitempty"`

	// Can be one of READ_ONLY, LDAP_ONLY or IMPORT. Defaults to READ_ONLY.
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`

	// Display name of this mapper when displayed in the console.
	// Display name of the mapper when displayed in the console.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// When true, group inheritance will be propagated from LDAP to Keycloak. When false, all LDAP groups will be propagated as top level groups within Keycloak.
	PreserveGroupInheritance *bool `json:"preserveGroupInheritance,omitempty" tf:"preserve_group_inheritance,omitempty"`

	// The realm that this LDAP mapper will exist in.
	// The realm in which the ldap user federation provider exists.
	RealmID *string `json:"realmId,omitempty" tf:"realm_id,omitempty"`

	// Can be one of LOAD_GROUPS_BY_MEMBER_ATTRIBUTE, GET_GROUPS_FROM_USER_MEMBEROF_ATTRIBUTE, or LOAD_GROUPS_BY_MEMBER_ATTRIBUTE_RECURSIVELY. Defaults to LOAD_GROUPS_BY_MEMBER_ATTRIBUTE.
	UserRolesRetrieveStrategy *string `json:"userRolesRetrieveStrategy,omitempty" tf:"user_roles_retrieve_strategy,omitempty"`
}

type GroupMapperParameters struct {

	// When true, groups that no longer exist within LDAP will be dropped in Keycloak during sync. Defaults to false.
	// +kubebuilder:validation:Optional
	DropNonExistingGroupsDuringSync *bool `json:"dropNonExistingGroupsDuringSync,omitempty" tf:"drop_non_existing_groups_during_sync,omitempty"`

	// The name of the LDAP attribute that is used in group objects for the name and RDN of the group. Typically cn.
	// +kubebuilder:validation:Optional
	GroupNameLdapAttribute *string `json:"groupNameLdapAttribute,omitempty" tf:"group_name_ldap_attribute,omitempty"`

	// List of strings representing the object classes for the group. Must contain at least one.
	// +kubebuilder:validation:Optional
	GroupObjectClasses []*string `json:"groupObjectClasses,omitempty" tf:"group_object_classes,omitempty"`

	// When specified, adds a custom filter to be used when querying for groups. Must start with ( and end with ).
	// +kubebuilder:validation:Optional
	GroupsLdapFilter *string `json:"groupsLdapFilter,omitempty" tf:"groups_ldap_filter,omitempty"`

	// Keycloak group path the LDAP groups are added to. For example if value /Applications/App1 is used, then LDAP groups will be available in Keycloak under group App1, which is the child of top level group Applications. The configured group path must already exist in Keycloak when creating this mapper.
	// +kubebuilder:validation:Optional
	GroupsPath *string `json:"groupsPath,omitempty" tf:"groups_path,omitempty"`

	// When true, missing groups in the hierarchy will be ignored.
	// +kubebuilder:validation:Optional
	IgnoreMissingGroups *bool `json:"ignoreMissingGroups,omitempty" tf:"ignore_missing_groups,omitempty"`

	// The LDAP DN where groups can be found.
	// +kubebuilder:validation:Optional
	LdapGroupsDn *string `json:"ldapGroupsDn,omitempty" tf:"ldap_groups_dn,omitempty"`

	// The ID of the LDAP user federation provider to attach this mapper to.
	// The ldap user federation provider to attach this mapper to.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-keycloak/apis/ldap/v1alpha1.UserFederation
	// +kubebuilder:validation:Optional
	LdapUserFederationID *string `json:"ldapUserFederationId,omitempty" tf:"ldap_user_federation_id,omitempty"`

	// Reference to a UserFederation in ldap to populate ldapUserFederationId.
	// +kubebuilder:validation:Optional
	LdapUserFederationIDRef *v1.Reference `json:"ldapUserFederationIdRef,omitempty" tf:"-"`

	// Selector for a UserFederation in ldap to populate ldapUserFederationId.
	// +kubebuilder:validation:Optional
	LdapUserFederationIDSelector *v1.Selector `json:"ldapUserFederationIdSelector,omitempty" tf:"-"`

	// Array of strings representing attributes on the LDAP group which will be mapped to attributes on the Keycloak group.
	// +kubebuilder:validation:Optional
	MappedGroupAttributes []*string `json:"mappedGroupAttributes,omitempty" tf:"mapped_group_attributes,omitempty"`

	// Specifies the name of the LDAP attribute on the LDAP user that contains the groups the user is a member of. Defaults to memberOf.
	// +kubebuilder:validation:Optional
	MemberofLdapAttribute *string `json:"memberofLdapAttribute,omitempty" tf:"memberof_ldap_attribute,omitempty"`

	// Can be one of DN or UID. Defaults to DN.
	// +kubebuilder:validation:Optional
	MembershipAttributeType *string `json:"membershipAttributeType,omitempty" tf:"membership_attribute_type,omitempty"`

	// The name of the LDAP attribute that is used for membership mappings.
	// +kubebuilder:validation:Optional
	MembershipLdapAttribute *string `json:"membershipLdapAttribute,omitempty" tf:"membership_ldap_attribute,omitempty"`

	// The name of the LDAP attribute on a user that is used for membership mappings.
	// +kubebuilder:validation:Optional
	MembershipUserLdapAttribute *string `json:"membershipUserLdapAttribute,omitempty" tf:"membership_user_ldap_attribute,omitempty"`

	// Can be one of READ_ONLY, LDAP_ONLY or IMPORT. Defaults to READ_ONLY.
	// +kubebuilder:validation:Optional
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`

	// Display name of this mapper when displayed in the console.
	// Display name of the mapper when displayed in the console.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// When true, group inheritance will be propagated from LDAP to Keycloak. When false, all LDAP groups will be propagated as top level groups within Keycloak.
	// +kubebuilder:validation:Optional
	PreserveGroupInheritance *bool `json:"preserveGroupInheritance,omitempty" tf:"preserve_group_inheritance,omitempty"`

	// The realm that this LDAP mapper will exist in.
	// The realm in which the ldap user federation provider exists.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-keycloak/apis/realm/v1alpha1.Realm
	// +kubebuilder:validation:Optional
	RealmID *string `json:"realmId,omitempty" tf:"realm_id,omitempty"`

	// Reference to a Realm in realm to populate realmId.
	// +kubebuilder:validation:Optional
	RealmIDRef *v1.Reference `json:"realmIdRef,omitempty" tf:"-"`

	// Selector for a Realm in realm to populate realmId.
	// +kubebuilder:validation:Optional
	RealmIDSelector *v1.Selector `json:"realmIdSelector,omitempty" tf:"-"`

	// Can be one of LOAD_GROUPS_BY_MEMBER_ATTRIBUTE, GET_GROUPS_FROM_USER_MEMBEROF_ATTRIBUTE, or LOAD_GROUPS_BY_MEMBER_ATTRIBUTE_RECURSIVELY. Defaults to LOAD_GROUPS_BY_MEMBER_ATTRIBUTE.
	// +kubebuilder:validation:Optional
	UserRolesRetrieveStrategy *string `json:"userRolesRetrieveStrategy,omitempty" tf:"user_roles_retrieve_strategy,omitempty"`
}

// GroupMapperSpec defines the desired state of GroupMapper
type GroupMapperSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     GroupMapperParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider GroupMapperInitParameters `json:"initProvider,omitempty"`
}

// GroupMapperStatus defines the observed state of GroupMapper.
type GroupMapperStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        GroupMapperObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// GroupMapper is the Schema for the GroupMappers API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,keycloak}
type GroupMapper struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.groupNameLdapAttribute) || (has(self.initProvider) && has(self.initProvider.groupNameLdapAttribute))",message="spec.forProvider.groupNameLdapAttribute is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.groupObjectClasses) || (has(self.initProvider) && has(self.initProvider.groupObjectClasses))",message="spec.forProvider.groupObjectClasses is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.ldapGroupsDn) || (has(self.initProvider) && has(self.initProvider.ldapGroupsDn))",message="spec.forProvider.ldapGroupsDn is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.membershipLdapAttribute) || (has(self.initProvider) && has(self.initProvider.membershipLdapAttribute))",message="spec.forProvider.membershipLdapAttribute is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.membershipUserLdapAttribute) || (has(self.initProvider) && has(self.initProvider.membershipUserLdapAttribute))",message="spec.forProvider.membershipUserLdapAttribute is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   GroupMapperSpec   `json:"spec"`
	Status GroupMapperStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// GroupMapperList contains a list of GroupMappers
type GroupMapperList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []GroupMapper `json:"items"`
}

// Repository type metadata.
var (
	GroupMapper_Kind             = "GroupMapper"
	GroupMapper_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: GroupMapper_Kind}.String()
	GroupMapper_KindAPIVersion   = GroupMapper_Kind + "." + CRDGroupVersion.String()
	GroupMapper_GroupVersionKind = CRDGroupVersion.WithKind(GroupMapper_Kind)
)

func init() {
	SchemeBuilder.Register(&GroupMapper{}, &GroupMapperList{})
}
