/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type RoleMapperInitParameters struct {

	// When specified, LDAP role mappings will be mapped to client role mappings tied to this client ID. Can only be set if use_realm_roles_mapping is false.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-keycloak/apis/openidclient/v1alpha1.Client
	// +crossplane:generate:reference:extractor=github.com/crossplane-contrib/provider-keycloak/config/common.UUIDExtractor()
	ClientID *string `json:"clientId,omitempty" tf:"client_id,omitempty"`

	// Reference to a Client in openidclient to populate clientId.
	// +kubebuilder:validation:Optional
	ClientIDRef *v1.Reference `json:"clientIdRef,omitempty" tf:"-"`

	// Selector for a Client in openidclient to populate clientId.
	// +kubebuilder:validation:Optional
	ClientIDSelector *v1.Selector `json:"clientIdSelector,omitempty" tf:"-"`

	// The LDAP DN where roles can be found.
	LdapRolesDn *string `json:"ldapRolesDn,omitempty" tf:"ldap_roles_dn,omitempty"`

	// The ID of the LDAP user federation provider to attach this mapper to.
	// The ldap user federation provider to attach this mapper to.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-keycloak/apis/ldap/v1alpha1.UserFederation
	LdapUserFederationID *string `json:"ldapUserFederationId,omitempty" tf:"ldap_user_federation_id,omitempty"`

	// Reference to a UserFederation in ldap to populate ldapUserFederationId.
	// +kubebuilder:validation:Optional
	LdapUserFederationIDRef *v1.Reference `json:"ldapUserFederationIdRef,omitempty" tf:"-"`

	// Selector for a UserFederation in ldap to populate ldapUserFederationId.
	// +kubebuilder:validation:Optional
	LdapUserFederationIDSelector *v1.Selector `json:"ldapUserFederationIdSelector,omitempty" tf:"-"`

	// Specifies the name of the LDAP attribute on the LDAP user that contains the roles the user has. Defaults to memberOf. This is only used when
	MemberofLdapAttribute *string `json:"memberofLdapAttribute,omitempty" tf:"memberof_ldap_attribute,omitempty"`

	// Can be one of DN or UID. Defaults to DN.
	MembershipAttributeType *string `json:"membershipAttributeType,omitempty" tf:"membership_attribute_type,omitempty"`

	// The name of the LDAP attribute that is used for membership mappings.
	MembershipLdapAttribute *string `json:"membershipLdapAttribute,omitempty" tf:"membership_ldap_attribute,omitempty"`

	// The name of the LDAP attribute on a user that is used for membership mappings.
	MembershipUserLdapAttribute *string `json:"membershipUserLdapAttribute,omitempty" tf:"membership_user_ldap_attribute,omitempty"`

	// Can be one of READ_ONLY, LDAP_ONLY or IMPORT. Defaults to READ_ONLY.
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`

	// Display name of this mapper when displayed in the console.
	// Display name of the mapper when displayed in the console.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The realm that this LDAP mapper will exist in.
	// The realm in which the ldap user federation provider exists.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-keycloak/apis/realm/v1alpha1.Realm
	RealmID *string `json:"realmId,omitempty" tf:"realm_id,omitempty"`

	// Reference to a Realm in realm to populate realmId.
	// +kubebuilder:validation:Optional
	RealmIDRef *v1.Reference `json:"realmIdRef,omitempty" tf:"-"`

	// Selector for a Realm in realm to populate realmId.
	// +kubebuilder:validation:Optional
	RealmIDSelector *v1.Selector `json:"realmIdSelector,omitempty" tf:"-"`

	// The name of the LDAP attribute that is used in role objects for the name and RDN of the role. Typically cn.
	RoleNameLdapAttribute *string `json:"roleNameLdapAttribute,omitempty" tf:"role_name_ldap_attribute,omitempty"`

	// List of strings representing the object classes for the role. Must contain at least one.
	RoleObjectClasses []*string `json:"roleObjectClasses,omitempty" tf:"role_object_classes,omitempty"`

	// When specified, adds an additional custom filter to be used when querying for roles. Must start with ( and end with ).
	RolesLdapFilter *string `json:"rolesLdapFilter,omitempty" tf:"roles_ldap_filter,omitempty"`

	// When true, LDAP role mappings will be mapped to realm roles within Keycloak. Defaults to true.
	UseRealmRolesMapping *bool `json:"useRealmRolesMapping,omitempty" tf:"use_realm_roles_mapping,omitempty"`

	// Can be one of LOAD_ROLES_BY_MEMBER_ATTRIBUTE, GET_ROLES_FROM_USER_MEMBEROF_ATTRIBUTE, or LOAD_ROLES_BY_MEMBER_ATTRIBUTE_RECURSIVELY. Defaults to LOAD_ROLES_BY_MEMBER_ATTRIBUTE.
	UserRolesRetrieveStrategy *string `json:"userRolesRetrieveStrategy,omitempty" tf:"user_roles_retrieve_strategy,omitempty"`
}

type RoleMapperObservation struct {

	// When specified, LDAP role mappings will be mapped to client role mappings tied to this client ID. Can only be set if use_realm_roles_mapping is false.
	ClientID *string `json:"clientId,omitempty" tf:"client_id,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The LDAP DN where roles can be found.
	LdapRolesDn *string `json:"ldapRolesDn,omitempty" tf:"ldap_roles_dn,omitempty"`

	// The ID of the LDAP user federation provider to attach this mapper to.
	// The ldap user federation provider to attach this mapper to.
	LdapUserFederationID *string `json:"ldapUserFederationId,omitempty" tf:"ldap_user_federation_id,omitempty"`

	// Specifies the name of the LDAP attribute on the LDAP user that contains the roles the user has. Defaults to memberOf. This is only used when
	MemberofLdapAttribute *string `json:"memberofLdapAttribute,omitempty" tf:"memberof_ldap_attribute,omitempty"`

	// Can be one of DN or UID. Defaults to DN.
	MembershipAttributeType *string `json:"membershipAttributeType,omitempty" tf:"membership_attribute_type,omitempty"`

	// The name of the LDAP attribute that is used for membership mappings.
	MembershipLdapAttribute *string `json:"membershipLdapAttribute,omitempty" tf:"membership_ldap_attribute,omitempty"`

	// The name of the LDAP attribute on a user that is used for membership mappings.
	MembershipUserLdapAttribute *string `json:"membershipUserLdapAttribute,omitempty" tf:"membership_user_ldap_attribute,omitempty"`

	// Can be one of READ_ONLY, LDAP_ONLY or IMPORT. Defaults to READ_ONLY.
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`

	// Display name of this mapper when displayed in the console.
	// Display name of the mapper when displayed in the console.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The realm that this LDAP mapper will exist in.
	// The realm in which the ldap user federation provider exists.
	RealmID *string `json:"realmId,omitempty" tf:"realm_id,omitempty"`

	// The name of the LDAP attribute that is used in role objects for the name and RDN of the role. Typically cn.
	RoleNameLdapAttribute *string `json:"roleNameLdapAttribute,omitempty" tf:"role_name_ldap_attribute,omitempty"`

	// List of strings representing the object classes for the role. Must contain at least one.
	RoleObjectClasses []*string `json:"roleObjectClasses,omitempty" tf:"role_object_classes,omitempty"`

	// When specified, adds an additional custom filter to be used when querying for roles. Must start with ( and end with ).
	RolesLdapFilter *string `json:"rolesLdapFilter,omitempty" tf:"roles_ldap_filter,omitempty"`

	// When true, LDAP role mappings will be mapped to realm roles within Keycloak. Defaults to true.
	UseRealmRolesMapping *bool `json:"useRealmRolesMapping,omitempty" tf:"use_realm_roles_mapping,omitempty"`

	// Can be one of LOAD_ROLES_BY_MEMBER_ATTRIBUTE, GET_ROLES_FROM_USER_MEMBEROF_ATTRIBUTE, or LOAD_ROLES_BY_MEMBER_ATTRIBUTE_RECURSIVELY. Defaults to LOAD_ROLES_BY_MEMBER_ATTRIBUTE.
	UserRolesRetrieveStrategy *string `json:"userRolesRetrieveStrategy,omitempty" tf:"user_roles_retrieve_strategy,omitempty"`
}

type RoleMapperParameters struct {

	// When specified, LDAP role mappings will be mapped to client role mappings tied to this client ID. Can only be set if use_realm_roles_mapping is false.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-keycloak/apis/openidclient/v1alpha1.Client
	// +crossplane:generate:reference:extractor=github.com/crossplane-contrib/provider-keycloak/config/common.UUIDExtractor()
	// +kubebuilder:validation:Optional
	ClientID *string `json:"clientId,omitempty" tf:"client_id,omitempty"`

	// Reference to a Client in openidclient to populate clientId.
	// +kubebuilder:validation:Optional
	ClientIDRef *v1.Reference `json:"clientIdRef,omitempty" tf:"-"`

	// Selector for a Client in openidclient to populate clientId.
	// +kubebuilder:validation:Optional
	ClientIDSelector *v1.Selector `json:"clientIdSelector,omitempty" tf:"-"`

	// The LDAP DN where roles can be found.
	// +kubebuilder:validation:Optional
	LdapRolesDn *string `json:"ldapRolesDn,omitempty" tf:"ldap_roles_dn,omitempty"`

	// The ID of the LDAP user federation provider to attach this mapper to.
	// The ldap user federation provider to attach this mapper to.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-keycloak/apis/ldap/v1alpha1.UserFederation
	// +kubebuilder:validation:Optional
	LdapUserFederationID *string `json:"ldapUserFederationId,omitempty" tf:"ldap_user_federation_id,omitempty"`

	// Reference to a UserFederation in ldap to populate ldapUserFederationId.
	// +kubebuilder:validation:Optional
	LdapUserFederationIDRef *v1.Reference `json:"ldapUserFederationIdRef,omitempty" tf:"-"`

	// Selector for a UserFederation in ldap to populate ldapUserFederationId.
	// +kubebuilder:validation:Optional
	LdapUserFederationIDSelector *v1.Selector `json:"ldapUserFederationIdSelector,omitempty" tf:"-"`

	// Specifies the name of the LDAP attribute on the LDAP user that contains the roles the user has. Defaults to memberOf. This is only used when
	// +kubebuilder:validation:Optional
	MemberofLdapAttribute *string `json:"memberofLdapAttribute,omitempty" tf:"memberof_ldap_attribute,omitempty"`

	// Can be one of DN or UID. Defaults to DN.
	// +kubebuilder:validation:Optional
	MembershipAttributeType *string `json:"membershipAttributeType,omitempty" tf:"membership_attribute_type,omitempty"`

	// The name of the LDAP attribute that is used for membership mappings.
	// +kubebuilder:validation:Optional
	MembershipLdapAttribute *string `json:"membershipLdapAttribute,omitempty" tf:"membership_ldap_attribute,omitempty"`

	// The name of the LDAP attribute on a user that is used for membership mappings.
	// +kubebuilder:validation:Optional
	MembershipUserLdapAttribute *string `json:"membershipUserLdapAttribute,omitempty" tf:"membership_user_ldap_attribute,omitempty"`

	// Can be one of READ_ONLY, LDAP_ONLY or IMPORT. Defaults to READ_ONLY.
	// +kubebuilder:validation:Optional
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`

	// Display name of this mapper when displayed in the console.
	// Display name of the mapper when displayed in the console.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The realm that this LDAP mapper will exist in.
	// The realm in which the ldap user federation provider exists.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-keycloak/apis/realm/v1alpha1.Realm
	// +kubebuilder:validation:Optional
	RealmID *string `json:"realmId,omitempty" tf:"realm_id,omitempty"`

	// Reference to a Realm in realm to populate realmId.
	// +kubebuilder:validation:Optional
	RealmIDRef *v1.Reference `json:"realmIdRef,omitempty" tf:"-"`

	// Selector for a Realm in realm to populate realmId.
	// +kubebuilder:validation:Optional
	RealmIDSelector *v1.Selector `json:"realmIdSelector,omitempty" tf:"-"`

	// The name of the LDAP attribute that is used in role objects for the name and RDN of the role. Typically cn.
	// +kubebuilder:validation:Optional
	RoleNameLdapAttribute *string `json:"roleNameLdapAttribute,omitempty" tf:"role_name_ldap_attribute,omitempty"`

	// List of strings representing the object classes for the role. Must contain at least one.
	// +kubebuilder:validation:Optional
	RoleObjectClasses []*string `json:"roleObjectClasses,omitempty" tf:"role_object_classes,omitempty"`

	// When specified, adds an additional custom filter to be used when querying for roles. Must start with ( and end with ).
	// +kubebuilder:validation:Optional
	RolesLdapFilter *string `json:"rolesLdapFilter,omitempty" tf:"roles_ldap_filter,omitempty"`

	// When true, LDAP role mappings will be mapped to realm roles within Keycloak. Defaults to true.
	// +kubebuilder:validation:Optional
	UseRealmRolesMapping *bool `json:"useRealmRolesMapping,omitempty" tf:"use_realm_roles_mapping,omitempty"`

	// Can be one of LOAD_ROLES_BY_MEMBER_ATTRIBUTE, GET_ROLES_FROM_USER_MEMBEROF_ATTRIBUTE, or LOAD_ROLES_BY_MEMBER_ATTRIBUTE_RECURSIVELY. Defaults to LOAD_ROLES_BY_MEMBER_ATTRIBUTE.
	// +kubebuilder:validation:Optional
	UserRolesRetrieveStrategy *string `json:"userRolesRetrieveStrategy,omitempty" tf:"user_roles_retrieve_strategy,omitempty"`
}

// RoleMapperSpec defines the desired state of RoleMapper
type RoleMapperSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RoleMapperParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider RoleMapperInitParameters `json:"initProvider,omitempty"`
}

// RoleMapperStatus defines the observed state of RoleMapper.
type RoleMapperStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RoleMapperObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// RoleMapper is the Schema for the RoleMappers API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,keycloak}
type RoleMapper struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.ldapRolesDn) || (has(self.initProvider) && has(self.initProvider.ldapRolesDn))",message="spec.forProvider.ldapRolesDn is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.membershipLdapAttribute) || (has(self.initProvider) && has(self.initProvider.membershipLdapAttribute))",message="spec.forProvider.membershipLdapAttribute is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.membershipUserLdapAttribute) || (has(self.initProvider) && has(self.initProvider.membershipUserLdapAttribute))",message="spec.forProvider.membershipUserLdapAttribute is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.roleNameLdapAttribute) || (has(self.initProvider) && has(self.initProvider.roleNameLdapAttribute))",message="spec.forProvider.roleNameLdapAttribute is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.roleObjectClasses) || (has(self.initProvider) && has(self.initProvider.roleObjectClasses))",message="spec.forProvider.roleObjectClasses is a required parameter"
	Spec   RoleMapperSpec   `json:"spec"`
	Status RoleMapperStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RoleMapperList contains a list of RoleMappers
type RoleMapperList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RoleMapper `json:"items"`
}

// Repository type metadata.
var (
	RoleMapper_Kind             = "RoleMapper"
	RoleMapper_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: RoleMapper_Kind}.String()
	RoleMapper_KindAPIVersion   = RoleMapper_Kind + "." + CRDGroupVersion.String()
	RoleMapper_GroupVersionKind = CRDGroupVersion.WithKind(RoleMapper_Kind)
)

func init() {
	SchemeBuilder.Register(&RoleMapper{}, &RoleMapperList{})
}
