/*
Copyright 2022 Upbound Inc.
*/
// Code generated by angryjet. DO NOT EDIT.
// Code transformed by upjet. DO NOT EDIT.

package v1alpha1

import (
	"context"

	apisresolver "github.com/crossplane-contrib/provider-keycloak/internal/apis"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	errors "github.com/pkg/errors"
	client "sigs.k8s.io/controller-runtime/pkg/client"

	// ResolveReferences of this Client.
	xpresource "github.com/crossplane/crossplane-runtime/pkg/resource"
)

func (mg *Client) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("realm.keycloak.crossplane.io", "v1alpha1", "Realm", "RealmList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.RealmID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.RealmIDRef,
			Selector:     mg.Spec.ForProvider.RealmIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.RealmID")
	}
	mg.Spec.ForProvider.RealmID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.RealmIDRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.ForProvider.AuthenticationFlowBindingOverrides); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("authenticationflow.keycloak.crossplane.io", "v1alpha1", "Flow", "FlowList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.AuthenticationFlowBindingOverrides[i3].BrowserID),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.ForProvider.AuthenticationFlowBindingOverrides[i3].BrowserIDRef,
				Selector:     mg.Spec.ForProvider.AuthenticationFlowBindingOverrides[i3].BrowserIDSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.AuthenticationFlowBindingOverrides[i3].BrowserID")
		}
		mg.Spec.ForProvider.AuthenticationFlowBindingOverrides[i3].BrowserID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.AuthenticationFlowBindingOverrides[i3].BrowserIDRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.AuthenticationFlowBindingOverrides); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("authenticationflow.keycloak.crossplane.io", "v1alpha1", "Flow", "FlowList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.AuthenticationFlowBindingOverrides[i3].DirectGrantID),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.ForProvider.AuthenticationFlowBindingOverrides[i3].DirectGrantIDRef,
				Selector:     mg.Spec.ForProvider.AuthenticationFlowBindingOverrides[i3].DirectGrantIDSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.AuthenticationFlowBindingOverrides[i3].DirectGrantID")
		}
		mg.Spec.ForProvider.AuthenticationFlowBindingOverrides[i3].DirectGrantID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.AuthenticationFlowBindingOverrides[i3].DirectGrantIDRef = rsp.ResolvedReference

	}
	{
		m, l, err = apisresolver.GetManagedResource("realm.keycloak.crossplane.io", "v1alpha1", "Realm", "RealmList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.RealmID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.RealmIDRef,
			Selector:     mg.Spec.InitProvider.RealmIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.RealmID")
	}
	mg.Spec.InitProvider.RealmID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.RealmIDRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.InitProvider.AuthenticationFlowBindingOverrides); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("authenticationflow.keycloak.crossplane.io", "v1alpha1", "Flow", "FlowList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.AuthenticationFlowBindingOverrides[i3].BrowserID),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.InitProvider.AuthenticationFlowBindingOverrides[i3].BrowserIDRef,
				Selector:     mg.Spec.InitProvider.AuthenticationFlowBindingOverrides[i3].BrowserIDSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.AuthenticationFlowBindingOverrides[i3].BrowserID")
		}
		mg.Spec.InitProvider.AuthenticationFlowBindingOverrides[i3].BrowserID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.AuthenticationFlowBindingOverrides[i3].BrowserIDRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.AuthenticationFlowBindingOverrides); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("authenticationflow.keycloak.crossplane.io", "v1alpha1", "Flow", "FlowList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.AuthenticationFlowBindingOverrides[i3].DirectGrantID),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.InitProvider.AuthenticationFlowBindingOverrides[i3].DirectGrantIDRef,
				Selector:     mg.Spec.InitProvider.AuthenticationFlowBindingOverrides[i3].DirectGrantIDSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.AuthenticationFlowBindingOverrides[i3].DirectGrantID")
		}
		mg.Spec.InitProvider.AuthenticationFlowBindingOverrides[i3].DirectGrantID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.AuthenticationFlowBindingOverrides[i3].DirectGrantIDRef = rsp.ResolvedReference

	}
	{
		m, l, err = apisresolver.GetManagedResource("realm.keycloak.crossplane.io", "v1alpha1", "Realm", "RealmList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Status.AtProvider.RealmID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Status.AtProvider.RealmIDRef,
			Selector:     mg.Status.AtProvider.RealmIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Status.AtProvider.RealmID")
	}
	mg.Status.AtProvider.RealmID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Status.AtProvider.RealmIDRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Status.AtProvider.AuthenticationFlowBindingOverrides); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("authenticationflow.keycloak.crossplane.io", "v1alpha1", "Flow", "FlowList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Status.AtProvider.AuthenticationFlowBindingOverrides[i3].BrowserID),
				Extract:      reference.ExternalName(),
				Reference:    mg.Status.AtProvider.AuthenticationFlowBindingOverrides[i3].BrowserIDRef,
				Selector:     mg.Status.AtProvider.AuthenticationFlowBindingOverrides[i3].BrowserIDSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Status.AtProvider.AuthenticationFlowBindingOverrides[i3].BrowserID")
		}
		mg.Status.AtProvider.AuthenticationFlowBindingOverrides[i3].BrowserID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Status.AtProvider.AuthenticationFlowBindingOverrides[i3].BrowserIDRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Status.AtProvider.AuthenticationFlowBindingOverrides); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("authenticationflow.keycloak.crossplane.io", "v1alpha1", "Flow", "FlowList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Status.AtProvider.AuthenticationFlowBindingOverrides[i3].DirectGrantID),
				Extract:      reference.ExternalName(),
				Reference:    mg.Status.AtProvider.AuthenticationFlowBindingOverrides[i3].DirectGrantIDRef,
				Selector:     mg.Status.AtProvider.AuthenticationFlowBindingOverrides[i3].DirectGrantIDSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Status.AtProvider.AuthenticationFlowBindingOverrides[i3].DirectGrantID")
		}
		mg.Status.AtProvider.AuthenticationFlowBindingOverrides[i3].DirectGrantID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Status.AtProvider.AuthenticationFlowBindingOverrides[i3].DirectGrantIDRef = rsp.ResolvedReference

	}

	return nil
}
