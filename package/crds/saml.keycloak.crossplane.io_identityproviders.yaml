---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.13.0
  name: identityproviders.saml.keycloak.crossplane.io
spec:
  group: saml.keycloak.crossplane.io
  names:
    categories:
    - crossplane
    - managed
    - keycloak
    kind: IdentityProvider
    listKind: IdentityProviderList
    plural: identityproviders
    singular: identityprovider
  scope: Cluster
  versions:
  - additionalPrinterColumns:
    - jsonPath: .status.conditions[?(@.type=='Ready')].status
      name: READY
      type: string
    - jsonPath: .status.conditions[?(@.type=='Synced')].status
      name: SYNCED
      type: string
    - jsonPath: .metadata.annotations.crossplane\.io/external-name
      name: EXTERNAL-NAME
      type: string
    - jsonPath: .metadata.creationTimestamp
      name: AGE
      type: date
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: IdentityProvider is the Schema for the IdentityProviders API.
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: IdentityProviderSpec defines the desired state of IdentityProvider
            properties:
              deletionPolicy:
                default: Delete
                description: 'DeletionPolicy specifies what will happen to the underlying
                  external when this managed resource is deleted - either "Delete"
                  or "Orphan" the external resource. This field is planned to be deprecated
                  in favor of the ManagementPolicies field in a future release. Currently,
                  both could be set independently and non-default values would be
                  honored if the feature flag is enabled. See the design doc for more
                  information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223'
                enum:
                - Orphan
                - Delete
                type: string
              forProvider:
                properties:
                  addReadTokenRoleOnCreate:
                    description: When true, new users will be able to read stored
                      tokens. This will automatically assign the broker.read-token
                      role. Defaults to false. Enable/disable if new users can read
                      any stored tokens. This assigns the broker.read-token role.
                    type: boolean
                  authenticateByDefault:
                    description: Authenticate users by default. Defaults to false.
                      Enable/disable authenticate users by default.
                    type: boolean
                  authnContextClassRefs:
                    description: Ordered list of requested AuthnContext ClassRefs.
                      AuthnContext ClassRefs
                    items:
                      type: string
                    type: array
                  authnContextComparisonType:
                    description: Specifies the comparison method used to evaluate
                      the requested context classes or statements. AuthnContext Comparison
                    type: string
                  authnContextDeclRefs:
                    description: Ordered list of requested AuthnContext DeclRefs.
                      AuthnContext DeclRefs
                    items:
                      type: string
                    type: array
                  backchannelSupported:
                    description: Does the external IDP support backchannel logout?.
                      Defaults to false. Does the external IDP support backchannel
                      logout?
                    type: boolean
                  displayName:
                    description: The display name for the realm that is shown when
                      logging in to the admin console. Friendly name for Identity
                      Providers.
                    type: string
                  enabled:
                    description: When false, users and clients will not be able to
                      access this realm. Defaults to true. Enable/disable this identity
                      provider.
                    type: boolean
                  entityId:
                    description: The Entity ID that will be used to uniquely identify
                      this SAML Service Provider. The Entity ID that will be used
                      to uniquely identify this SAML Service Provider.
                    type: string
                  extraConfig:
                    additionalProperties:
                      type: string
                    description: A map of key/value pairs to add extra configuration
                      to this identity provider. Use this attribute at your own risk,
                      as custom attributes may conflict with top-level configuration
                      attributes in future provider updates.
                    type: object
                    x-kubernetes-map-type: granular
                  firstBrokerLoginFlowAlias:
                    description: Alias of authentication flow, which is triggered
                      after first login with this identity provider. Term 'First Login'
                      means that there is not yet existing Keycloak account linked
                      with the authenticated identity provider account. Defaults to
                      first broker login. Alias of authentication flow, which is triggered
                      after first login with this identity provider. Term 'First Login'
                      means that there is not yet existing Keycloak account linked
                      with the authenticated identity provider account.
                    type: string
                  forceAuthn:
                    description: Indicates whether the identity provider must authenticate
                      the presenter directly rather than rely on a previous security
                      context. Require Force Authn.
                    type: boolean
                  guiOrder:
                    description: A number defining the order of this identity provider
                      in the GUI. GUI Order
                    type: string
                  hideOnLoginPage:
                    description: If hidden, then login with this provider is possible
                      only if requested explicitly, e.g. using the 'kc_idp_hint' parameter.
                      Hide On Login Page.
                    type: boolean
                  linkOnly:
                    description: When true, users cannot login using this provider,
                      but their existing accounts will be linked when possible. Defaults
                      to false. If true, users cannot log in through this provider.  They
                      can only link to this provider.  This is useful if you don't
                      want to allow login from the provider, but want to integrate
                      with a provider
                    type: boolean
                  loginHint:
                    description: Login Hint.
                    type: string
                  nameIdPolicyFormat:
                    description: Specifies the URI reference corresponding to a name
                      identifier format. Defaults to empty. Name ID Policy Format.
                    type: string
                  postBindingAuthnRequest:
                    description: Indicates whether the AuthnRequest must be sent using
                      HTTP-POST binding. If false, HTTP-REDIRECT binding will be used.
                      Post Binding Authn Request.
                    type: boolean
                  postBindingLogout:
                    description: Indicates whether to respond to requests using HTTP-POST
                      binding. If false, HTTP-REDIRECT binding will be used. Post
                      Binding Logout.
                    type: boolean
                  postBindingResponse:
                    description: Indicates whether to respond to requests using HTTP-POST
                      binding. If false, HTTP-REDIRECT binding will be used.. Post
                      Binding Response.
                    type: boolean
                  postBrokerLoginFlowAlias:
                    description: Alias of authentication flow, which is triggered
                      after each login with this identity provider. Useful if you
                      want additional verification of each user authenticated with
                      this identity provider (for example OTP). Leave this empty if
                      you don't want any additional authenticators to be triggered
                      after login with this identity provider. Also note, that authenticator
                      implementations must assume that user is already set in ClientSession
                      as identity provider already set it. Defaults to empty. Alias
                      of authentication flow, which is triggered after each login
                      with this identity provider. Useful if you want additional verification
                      of each user authenticated with this identity provider (for
                      example OTP). Leave this empty if you don't want any additional
                      authenticators to be triggered after login with this identity
                      provider. Also note, that authenticator implementations must
                      assume that user is already set in ClientSession as identity
                      provider already set it.
                    type: string
                  principalAttribute:
                    description: The principal attribute. Principal Attribute
                    type: string
                  principalType:
                    description: The principal type. Can be one of SUBJECT, ATTRIBUTE
                      or FRIENDLY_ATTRIBUTE. Principal Type
                    type: string
                  providerId:
                    description: The ID of the identity provider to use. Defaults
                      to saml, which should be used unless you have extended Keycloak
                      and provided your own implementation. provider id, is always
                      saml, unless you have a custom implementation
                    type: string
                  realm:
                    description: The name of the realm. This is unique across Keycloak.
                      Realm Name
                    type: string
                  realmRef:
                    description: Reference to a Realm in realm to populate realm.
                    properties:
                      name:
                        description: Name of the referenced object.
                        type: string
                      policy:
                        description: Policies for referencing.
                        properties:
                          resolution:
                            default: Required
                            description: Resolution specifies whether resolution of
                              this reference is required. The default is 'Required',
                              which means the reconcile will fail if the reference
                              cannot be resolved. 'Optional' means this reference
                              will be a no-op if it cannot be resolved.
                            enum:
                            - Required
                            - Optional
                            type: string
                          resolve:
                            description: Resolve specifies when this reference should
                              be resolved. The default is 'IfNotPresent', which will
                              attempt to resolve the reference only when the corresponding
                              field is not present. Use 'Always' to resolve the reference
                              on every reconcile.
                            enum:
                            - Always
                            - IfNotPresent
                            type: string
                        type: object
                    required:
                    - name
                    type: object
                  realmSelector:
                    description: Selector for a Realm in realm to populate realm.
                    properties:
                      matchControllerRef:
                        description: MatchControllerRef ensures an object with the
                          same controller reference as the selecting object is selected.
                        type: boolean
                      matchLabels:
                        additionalProperties:
                          type: string
                        description: MatchLabels ensures an object with matching labels
                          is selected.
                        type: object
                      policy:
                        description: Policies for selection.
                        properties:
                          resolution:
                            default: Required
                            description: Resolution specifies whether resolution of
                              this reference is required. The default is 'Required',
                              which means the reconcile will fail if the reference
                              cannot be resolved. 'Optional' means this reference
                              will be a no-op if it cannot be resolved.
                            enum:
                            - Required
                            - Optional
                            type: string
                          resolve:
                            description: Resolve specifies when this reference should
                              be resolved. The default is 'IfNotPresent', which will
                              attempt to resolve the reference only when the corresponding
                              field is not present. Use 'Always' to resolve the reference
                              on every reconcile.
                            enum:
                            - Always
                            - IfNotPresent
                            type: string
                        type: object
                    type: object
                  signatureAlgorithm:
                    description: Signing Algorithm. Defaults to empty. Signing Algorithm.
                    type: string
                  signingCertificate:
                    description: Signing Certificate. Signing Certificate.
                    type: string
                  singleLogoutServiceUrl:
                    description: The Url that must be used to send logout requests.
                      Logout URL.
                    type: string
                  singleSignOnServiceUrl:
                    description: The Url that must be used to send authentication
                      requests (SAML AuthnRequest). SSO Logout URL.
                    type: string
                  storeToken:
                    description: When true, tokens will be stored after authenticating
                      users. Defaults to true. Enable/disable if tokens must be stored
                      after authenticating users.
                    type: boolean
                  syncMode:
                    description: The default sync mode to use for all mappers attached
                      to this identity provider. Can be one of IMPORT, FORCE, or LEGACY.
                      Sync Mode
                    type: string
                  trustEmail:
                    description: When true, email addresses for users in this provider
                      will automatically be verified regardless of the realm's email
                      verification policy. Defaults to false. If enabled then email
                      provided by this provider is not verified even if verification
                      is enabled for the realm.
                    type: boolean
                  validateSignature:
                    description: Enable/disable signature validation of SAML responses.
                      Enable/disable signature validation of SAML responses.
                    type: boolean
                  wantAssertionsEncrypted:
                    description: Indicates whether this service provider expects an
                      encrypted Assertion. Want Assertions Encrypted.
                    type: boolean
                  wantAssertionsSigned:
                    description: Indicates whether this service provider expects a
                      signed Assertion. Want Assertions Signed.
                    type: boolean
                  xmlSignKeyInfoKeyNameTransformer:
                    description: The SAML signature key name. Can be one of NONE,
                      KEY_ID, or CERT_SUBJECT. Sign Key Transformer.
                    type: string
                type: object
              initProvider:
                description: THIS IS A BETA FIELD. It will be honored unless the Management
                  Policies feature flag is disabled. InitProvider holds the same fields
                  as ForProvider, with the exception of Identifier and other resource
                  reference fields. The fields that are in InitProvider are merged
                  into ForProvider when the resource is created. The same fields are
                  also added to the terraform ignore_changes hook, to avoid updating
                  them after creation. This is useful for fields that are required
                  on creation, but we do not desire to update them after creation,
                  for example because of an external controller is managing them,
                  like an autoscaler.
                properties:
                  addReadTokenRoleOnCreate:
                    description: When true, new users will be able to read stored
                      tokens. This will automatically assign the broker.read-token
                      role. Defaults to false. Enable/disable if new users can read
                      any stored tokens. This assigns the broker.read-token role.
                    type: boolean
                  authenticateByDefault:
                    description: Authenticate users by default. Defaults to false.
                      Enable/disable authenticate users by default.
                    type: boolean
                  authnContextClassRefs:
                    description: Ordered list of requested AuthnContext ClassRefs.
                      AuthnContext ClassRefs
                    items:
                      type: string
                    type: array
                  authnContextComparisonType:
                    description: Specifies the comparison method used to evaluate
                      the requested context classes or statements. AuthnContext Comparison
                    type: string
                  authnContextDeclRefs:
                    description: Ordered list of requested AuthnContext DeclRefs.
                      AuthnContext DeclRefs
                    items:
                      type: string
                    type: array
                  backchannelSupported:
                    description: Does the external IDP support backchannel logout?.
                      Defaults to false. Does the external IDP support backchannel
                      logout?
                    type: boolean
                  displayName:
                    description: The display name for the realm that is shown when
                      logging in to the admin console. Friendly name for Identity
                      Providers.
                    type: string
                  enabled:
                    description: When false, users and clients will not be able to
                      access this realm. Defaults to true. Enable/disable this identity
                      provider.
                    type: boolean
                  entityId:
                    description: The Entity ID that will be used to uniquely identify
                      this SAML Service Provider. The Entity ID that will be used
                      to uniquely identify this SAML Service Provider.
                    type: string
                  extraConfig:
                    additionalProperties:
                      type: string
                    description: A map of key/value pairs to add extra configuration
                      to this identity provider. Use this attribute at your own risk,
                      as custom attributes may conflict with top-level configuration
                      attributes in future provider updates.
                    type: object
                    x-kubernetes-map-type: granular
                  firstBrokerLoginFlowAlias:
                    description: Alias of authentication flow, which is triggered
                      after first login with this identity provider. Term 'First Login'
                      means that there is not yet existing Keycloak account linked
                      with the authenticated identity provider account. Defaults to
                      first broker login. Alias of authentication flow, which is triggered
                      after first login with this identity provider. Term 'First Login'
                      means that there is not yet existing Keycloak account linked
                      with the authenticated identity provider account.
                    type: string
                  forceAuthn:
                    description: Indicates whether the identity provider must authenticate
                      the presenter directly rather than rely on a previous security
                      context. Require Force Authn.
                    type: boolean
                  guiOrder:
                    description: A number defining the order of this identity provider
                      in the GUI. GUI Order
                    type: string
                  hideOnLoginPage:
                    description: If hidden, then login with this provider is possible
                      only if requested explicitly, e.g. using the 'kc_idp_hint' parameter.
                      Hide On Login Page.
                    type: boolean
                  linkOnly:
                    description: When true, users cannot login using this provider,
                      but their existing accounts will be linked when possible. Defaults
                      to false. If true, users cannot log in through this provider.  They
                      can only link to this provider.  This is useful if you don't
                      want to allow login from the provider, but want to integrate
                      with a provider
                    type: boolean
                  loginHint:
                    description: Login Hint.
                    type: string
                  nameIdPolicyFormat:
                    description: Specifies the URI reference corresponding to a name
                      identifier format. Defaults to empty. Name ID Policy Format.
                    type: string
                  postBindingAuthnRequest:
                    description: Indicates whether the AuthnRequest must be sent using
                      HTTP-POST binding. If false, HTTP-REDIRECT binding will be used.
                      Post Binding Authn Request.
                    type: boolean
                  postBindingLogout:
                    description: Indicates whether to respond to requests using HTTP-POST
                      binding. If false, HTTP-REDIRECT binding will be used. Post
                      Binding Logout.
                    type: boolean
                  postBindingResponse:
                    description: Indicates whether to respond to requests using HTTP-POST
                      binding. If false, HTTP-REDIRECT binding will be used.. Post
                      Binding Response.
                    type: boolean
                  postBrokerLoginFlowAlias:
                    description: Alias of authentication flow, which is triggered
                      after each login with this identity provider. Useful if you
                      want additional verification of each user authenticated with
                      this identity provider (for example OTP). Leave this empty if
                      you don't want any additional authenticators to be triggered
                      after login with this identity provider. Also note, that authenticator
                      implementations must assume that user is already set in ClientSession
                      as identity provider already set it. Defaults to empty. Alias
                      of authentication flow, which is triggered after each login
                      with this identity provider. Useful if you want additional verification
                      of each user authenticated with this identity provider (for
                      example OTP). Leave this empty if you don't want any additional
                      authenticators to be triggered after login with this identity
                      provider. Also note, that authenticator implementations must
                      assume that user is already set in ClientSession as identity
                      provider already set it.
                    type: string
                  principalAttribute:
                    description: The principal attribute. Principal Attribute
                    type: string
                  principalType:
                    description: The principal type. Can be one of SUBJECT, ATTRIBUTE
                      or FRIENDLY_ATTRIBUTE. Principal Type
                    type: string
                  providerId:
                    description: The ID of the identity provider to use. Defaults
                      to saml, which should be used unless you have extended Keycloak
                      and provided your own implementation. provider id, is always
                      saml, unless you have a custom implementation
                    type: string
                  realm:
                    description: The name of the realm. This is unique across Keycloak.
                      Realm Name
                    type: string
                  realmRef:
                    description: Reference to a Realm in realm to populate realm.
                    properties:
                      name:
                        description: Name of the referenced object.
                        type: string
                      policy:
                        description: Policies for referencing.
                        properties:
                          resolution:
                            default: Required
                            description: Resolution specifies whether resolution of
                              this reference is required. The default is 'Required',
                              which means the reconcile will fail if the reference
                              cannot be resolved. 'Optional' means this reference
                              will be a no-op if it cannot be resolved.
                            enum:
                            - Required
                            - Optional
                            type: string
                          resolve:
                            description: Resolve specifies when this reference should
                              be resolved. The default is 'IfNotPresent', which will
                              attempt to resolve the reference only when the corresponding
                              field is not present. Use 'Always' to resolve the reference
                              on every reconcile.
                            enum:
                            - Always
                            - IfNotPresent
                            type: string
                        type: object
                    required:
                    - name
                    type: object
                  realmSelector:
                    description: Selector for a Realm in realm to populate realm.
                    properties:
                      matchControllerRef:
                        description: MatchControllerRef ensures an object with the
                          same controller reference as the selecting object is selected.
                        type: boolean
                      matchLabels:
                        additionalProperties:
                          type: string
                        description: MatchLabels ensures an object with matching labels
                          is selected.
                        type: object
                      policy:
                        description: Policies for selection.
                        properties:
                          resolution:
                            default: Required
                            description: Resolution specifies whether resolution of
                              this reference is required. The default is 'Required',
                              which means the reconcile will fail if the reference
                              cannot be resolved. 'Optional' means this reference
                              will be a no-op if it cannot be resolved.
                            enum:
                            - Required
                            - Optional
                            type: string
                          resolve:
                            description: Resolve specifies when this reference should
                              be resolved. The default is 'IfNotPresent', which will
                              attempt to resolve the reference only when the corresponding
                              field is not present. Use 'Always' to resolve the reference
                              on every reconcile.
                            enum:
                            - Always
                            - IfNotPresent
                            type: string
                        type: object
                    type: object
                  signatureAlgorithm:
                    description: Signing Algorithm. Defaults to empty. Signing Algorithm.
                    type: string
                  signingCertificate:
                    description: Signing Certificate. Signing Certificate.
                    type: string
                  singleLogoutServiceUrl:
                    description: The Url that must be used to send logout requests.
                      Logout URL.
                    type: string
                  singleSignOnServiceUrl:
                    description: The Url that must be used to send authentication
                      requests (SAML AuthnRequest). SSO Logout URL.
                    type: string
                  storeToken:
                    description: When true, tokens will be stored after authenticating
                      users. Defaults to true. Enable/disable if tokens must be stored
                      after authenticating users.
                    type: boolean
                  syncMode:
                    description: The default sync mode to use for all mappers attached
                      to this identity provider. Can be one of IMPORT, FORCE, or LEGACY.
                      Sync Mode
                    type: string
                  trustEmail:
                    description: When true, email addresses for users in this provider
                      will automatically be verified regardless of the realm's email
                      verification policy. Defaults to false. If enabled then email
                      provided by this provider is not verified even if verification
                      is enabled for the realm.
                    type: boolean
                  validateSignature:
                    description: Enable/disable signature validation of SAML responses.
                      Enable/disable signature validation of SAML responses.
                    type: boolean
                  wantAssertionsEncrypted:
                    description: Indicates whether this service provider expects an
                      encrypted Assertion. Want Assertions Encrypted.
                    type: boolean
                  wantAssertionsSigned:
                    description: Indicates whether this service provider expects a
                      signed Assertion. Want Assertions Signed.
                    type: boolean
                  xmlSignKeyInfoKeyNameTransformer:
                    description: The SAML signature key name. Can be one of NONE,
                      KEY_ID, or CERT_SUBJECT. Sign Key Transformer.
                    type: string
                type: object
              managementPolicies:
                default:
                - '*'
                description: 'THIS IS A BETA FIELD. It is on by default but can be
                  opted out through a Crossplane feature flag. ManagementPolicies
                  specify the array of actions Crossplane is allowed to take on the
                  managed and external resources. This field is planned to replace
                  the DeletionPolicy field in a future release. Currently, both could
                  be set independently and non-default values would be honored if
                  the feature flag is enabled. If both are custom, the DeletionPolicy
                  field will be ignored. See the design doc for more information:
                  https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
                  and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md'
                items:
                  description: A ManagementAction represents an action that the Crossplane
                    controllers can take on an external resource.
                  enum:
                  - Observe
                  - Create
                  - Update
                  - Delete
                  - LateInitialize
                  - '*'
                  type: string
                type: array
              providerConfigRef:
                default:
                  name: default
                description: ProviderConfigReference specifies how the provider that
                  will be used to create, observe, update, and delete this managed
                  resource should be configured.
                properties:
                  name:
                    description: Name of the referenced object.
                    type: string
                  policy:
                    description: Policies for referencing.
                    properties:
                      resolution:
                        default: Required
                        description: Resolution specifies whether resolution of this
                          reference is required. The default is 'Required', which
                          means the reconcile will fail if the reference cannot be
                          resolved. 'Optional' means this reference will be a no-op
                          if it cannot be resolved.
                        enum:
                        - Required
                        - Optional
                        type: string
                      resolve:
                        description: Resolve specifies when this reference should
                          be resolved. The default is 'IfNotPresent', which will attempt
                          to resolve the reference only when the corresponding field
                          is not present. Use 'Always' to resolve the reference on
                          every reconcile.
                        enum:
                        - Always
                        - IfNotPresent
                        type: string
                    type: object
                required:
                - name
                type: object
              publishConnectionDetailsTo:
                description: PublishConnectionDetailsTo specifies the connection secret
                  config which contains a name, metadata and a reference to secret
                  store config to which any connection details for this managed resource
                  should be written. Connection details frequently include the endpoint,
                  username, and password required to connect to the managed resource.
                properties:
                  configRef:
                    default:
                      name: default
                    description: SecretStoreConfigRef specifies which secret store
                      config should be used for this ConnectionSecret.
                    properties:
                      name:
                        description: Name of the referenced object.
                        type: string
                      policy:
                        description: Policies for referencing.
                        properties:
                          resolution:
                            default: Required
                            description: Resolution specifies whether resolution of
                              this reference is required. The default is 'Required',
                              which means the reconcile will fail if the reference
                              cannot be resolved. 'Optional' means this reference
                              will be a no-op if it cannot be resolved.
                            enum:
                            - Required
                            - Optional
                            type: string
                          resolve:
                            description: Resolve specifies when this reference should
                              be resolved. The default is 'IfNotPresent', which will
                              attempt to resolve the reference only when the corresponding
                              field is not present. Use 'Always' to resolve the reference
                              on every reconcile.
                            enum:
                            - Always
                            - IfNotPresent
                            type: string
                        type: object
                    required:
                    - name
                    type: object
                  metadata:
                    description: Metadata is the metadata for connection secret.
                    properties:
                      annotations:
                        additionalProperties:
                          type: string
                        description: Annotations are the annotations to be added to
                          connection secret. - For Kubernetes secrets, this will be
                          used as "metadata.annotations". - It is up to Secret Store
                          implementation for others store types.
                        type: object
                      labels:
                        additionalProperties:
                          type: string
                        description: Labels are the labels/tags to be added to connection
                          secret. - For Kubernetes secrets, this will be used as "metadata.labels".
                          - It is up to Secret Store implementation for others store
                          types.
                        type: object
                      type:
                        description: Type is the SecretType for the connection secret.
                          - Only valid for Kubernetes Secret Stores.
                        type: string
                    type: object
                  name:
                    description: Name is the name of the connection secret.
                    type: string
                required:
                - name
                type: object
              writeConnectionSecretToRef:
                description: WriteConnectionSecretToReference specifies the namespace
                  and name of a Secret to which any connection details for this managed
                  resource should be written. Connection details frequently include
                  the endpoint, username, and password required to connect to the
                  managed resource. This field is planned to be replaced in a future
                  release in favor of PublishConnectionDetailsTo. Currently, both
                  could be set independently and connection details would be published
                  to both without affecting each other.
                properties:
                  name:
                    description: Name of the secret.
                    type: string
                  namespace:
                    description: Namespace of the secret.
                    type: string
                required:
                - name
                - namespace
                type: object
            required:
            - forProvider
            type: object
            x-kubernetes-validations:
            - message: spec.forProvider.entityId is a required parameter
              rule: '!(''*'' in self.managementPolicies || ''Create'' in self.managementPolicies
                || ''Update'' in self.managementPolicies) || has(self.forProvider.entityId)
                || (has(self.initProvider) && has(self.initProvider.entityId))'
            - message: spec.forProvider.singleSignOnServiceUrl is a required parameter
              rule: '!(''*'' in self.managementPolicies || ''Create'' in self.managementPolicies
                || ''Update'' in self.managementPolicies) || has(self.forProvider.singleSignOnServiceUrl)
                || (has(self.initProvider) && has(self.initProvider.singleSignOnServiceUrl))'
          status:
            description: IdentityProviderStatus defines the observed state of IdentityProvider.
            properties:
              atProvider:
                properties:
                  addReadTokenRoleOnCreate:
                    description: When true, new users will be able to read stored
                      tokens. This will automatically assign the broker.read-token
                      role. Defaults to false. Enable/disable if new users can read
                      any stored tokens. This assigns the broker.read-token role.
                    type: boolean
                  authenticateByDefault:
                    description: Authenticate users by default. Defaults to false.
                      Enable/disable authenticate users by default.
                    type: boolean
                  authnContextClassRefs:
                    description: Ordered list of requested AuthnContext ClassRefs.
                      AuthnContext ClassRefs
                    items:
                      type: string
                    type: array
                  authnContextComparisonType:
                    description: Specifies the comparison method used to evaluate
                      the requested context classes or statements. AuthnContext Comparison
                    type: string
                  authnContextDeclRefs:
                    description: Ordered list of requested AuthnContext DeclRefs.
                      AuthnContext DeclRefs
                    items:
                      type: string
                    type: array
                  backchannelSupported:
                    description: Does the external IDP support backchannel logout?.
                      Defaults to false. Does the external IDP support backchannel
                      logout?
                    type: boolean
                  displayName:
                    description: The display name for the realm that is shown when
                      logging in to the admin console. Friendly name for Identity
                      Providers.
                    type: string
                  enabled:
                    description: When false, users and clients will not be able to
                      access this realm. Defaults to true. Enable/disable this identity
                      provider.
                    type: boolean
                  entityId:
                    description: The Entity ID that will be used to uniquely identify
                      this SAML Service Provider. The Entity ID that will be used
                      to uniquely identify this SAML Service Provider.
                    type: string
                  extraConfig:
                    additionalProperties:
                      type: string
                    description: A map of key/value pairs to add extra configuration
                      to this identity provider. Use this attribute at your own risk,
                      as custom attributes may conflict with top-level configuration
                      attributes in future provider updates.
                    type: object
                    x-kubernetes-map-type: granular
                  firstBrokerLoginFlowAlias:
                    description: Alias of authentication flow, which is triggered
                      after first login with this identity provider. Term 'First Login'
                      means that there is not yet existing Keycloak account linked
                      with the authenticated identity provider account. Defaults to
                      first broker login. Alias of authentication flow, which is triggered
                      after first login with this identity provider. Term 'First Login'
                      means that there is not yet existing Keycloak account linked
                      with the authenticated identity provider account.
                    type: string
                  forceAuthn:
                    description: Indicates whether the identity provider must authenticate
                      the presenter directly rather than rely on a previous security
                      context. Require Force Authn.
                    type: boolean
                  guiOrder:
                    description: A number defining the order of this identity provider
                      in the GUI. GUI Order
                    type: string
                  hideOnLoginPage:
                    description: If hidden, then login with this provider is possible
                      only if requested explicitly, e.g. using the 'kc_idp_hint' parameter.
                      Hide On Login Page.
                    type: boolean
                  id:
                    type: string
                  internalId:
                    description: Internal Identity Provider Id
                    type: string
                  linkOnly:
                    description: When true, users cannot login using this provider,
                      but their existing accounts will be linked when possible. Defaults
                      to false. If true, users cannot log in through this provider.  They
                      can only link to this provider.  This is useful if you don't
                      want to allow login from the provider, but want to integrate
                      with a provider
                    type: boolean
                  loginHint:
                    description: Login Hint.
                    type: string
                  nameIdPolicyFormat:
                    description: Specifies the URI reference corresponding to a name
                      identifier format. Defaults to empty. Name ID Policy Format.
                    type: string
                  postBindingAuthnRequest:
                    description: Indicates whether the AuthnRequest must be sent using
                      HTTP-POST binding. If false, HTTP-REDIRECT binding will be used.
                      Post Binding Authn Request.
                    type: boolean
                  postBindingLogout:
                    description: Indicates whether to respond to requests using HTTP-POST
                      binding. If false, HTTP-REDIRECT binding will be used. Post
                      Binding Logout.
                    type: boolean
                  postBindingResponse:
                    description: Indicates whether to respond to requests using HTTP-POST
                      binding. If false, HTTP-REDIRECT binding will be used.. Post
                      Binding Response.
                    type: boolean
                  postBrokerLoginFlowAlias:
                    description: Alias of authentication flow, which is triggered
                      after each login with this identity provider. Useful if you
                      want additional verification of each user authenticated with
                      this identity provider (for example OTP). Leave this empty if
                      you don't want any additional authenticators to be triggered
                      after login with this identity provider. Also note, that authenticator
                      implementations must assume that user is already set in ClientSession
                      as identity provider already set it. Defaults to empty. Alias
                      of authentication flow, which is triggered after each login
                      with this identity provider. Useful if you want additional verification
                      of each user authenticated with this identity provider (for
                      example OTP). Leave this empty if you don't want any additional
                      authenticators to be triggered after login with this identity
                      provider. Also note, that authenticator implementations must
                      assume that user is already set in ClientSession as identity
                      provider already set it.
                    type: string
                  principalAttribute:
                    description: The principal attribute. Principal Attribute
                    type: string
                  principalType:
                    description: The principal type. Can be one of SUBJECT, ATTRIBUTE
                      or FRIENDLY_ATTRIBUTE. Principal Type
                    type: string
                  providerId:
                    description: The ID of the identity provider to use. Defaults
                      to saml, which should be used unless you have extended Keycloak
                      and provided your own implementation. provider id, is always
                      saml, unless you have a custom implementation
                    type: string
                  realm:
                    description: The name of the realm. This is unique across Keycloak.
                      Realm Name
                    type: string
                  signatureAlgorithm:
                    description: Signing Algorithm. Defaults to empty. Signing Algorithm.
                    type: string
                  signingCertificate:
                    description: Signing Certificate. Signing Certificate.
                    type: string
                  singleLogoutServiceUrl:
                    description: The Url that must be used to send logout requests.
                      Logout URL.
                    type: string
                  singleSignOnServiceUrl:
                    description: The Url that must be used to send authentication
                      requests (SAML AuthnRequest). SSO Logout URL.
                    type: string
                  storeToken:
                    description: When true, tokens will be stored after authenticating
                      users. Defaults to true. Enable/disable if tokens must be stored
                      after authenticating users.
                    type: boolean
                  syncMode:
                    description: The default sync mode to use for all mappers attached
                      to this identity provider. Can be one of IMPORT, FORCE, or LEGACY.
                      Sync Mode
                    type: string
                  trustEmail:
                    description: When true, email addresses for users in this provider
                      will automatically be verified regardless of the realm's email
                      verification policy. Defaults to false. If enabled then email
                      provided by this provider is not verified even if verification
                      is enabled for the realm.
                    type: boolean
                  validateSignature:
                    description: Enable/disable signature validation of SAML responses.
                      Enable/disable signature validation of SAML responses.
                    type: boolean
                  wantAssertionsEncrypted:
                    description: Indicates whether this service provider expects an
                      encrypted Assertion. Want Assertions Encrypted.
                    type: boolean
                  wantAssertionsSigned:
                    description: Indicates whether this service provider expects a
                      signed Assertion. Want Assertions Signed.
                    type: boolean
                  xmlSignKeyInfoKeyNameTransformer:
                    description: The SAML signature key name. Can be one of NONE,
                      KEY_ID, or CERT_SUBJECT. Sign Key Transformer.
                    type: string
                type: object
              conditions:
                description: Conditions of the resource.
                items:
                  description: A Condition that may apply to a resource.
                  properties:
                    lastTransitionTime:
                      description: LastTransitionTime is the last time this condition
                        transitioned from one status to another.
                      format: date-time
                      type: string
                    message:
                      description: A Message containing details about this condition's
                        last transition from one status to another, if any.
                      type: string
                    reason:
                      description: A Reason for this condition's last transition from
                        one status to another.
                      type: string
                    status:
                      description: Status of this condition; is it currently True,
                        False, or Unknown?
                      type: string
                    type:
                      description: Type of this condition. At most one of each condition
                        type may apply to a resource at any point in time.
                      type: string
                  required:
                  - lastTransitionTime
                  - reason
                  - status
                  - type
                  type: object
                type: array
                x-kubernetes-list-map-keys:
                - type
                x-kubernetes-list-type: map
            type: object
        required:
        - spec
        type: object
    served: true
    storage: true
    subresources:
      status: {}
